<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2022 on CloudNativeOps - SRE，DevOps、Kubernetes 云原生运维。成长之路，一起前行！</title>
    <link>https://bgbiao.top/tags/2022/</link>
    <description>Recent content in 2022 on CloudNativeOps - SRE，DevOps、Kubernetes 云原生运维。成长之路，一起前行！</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 09 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://bgbiao.top/tags/2022/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>初识 WebSocket 以及 Golang 实现</title>
      <link>https://bgbiao.top/post/websocket%E4%BB%A5%E5%8F%8Agolang%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/websocket%E4%BB%A5%E5%8F%8Agolang%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h2 id=&#34;初识-websocket-以及-golang-实现&#34;&gt;初识 WebSocket 以及 Golang 实现&lt;/h2&gt;
&lt;h3 id=&#34;一-websocket-介绍&#34;&gt;一、 WebSocket 介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.1 WebSocket 的诞生背景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在网络冲浪中，我们接触到最多的协议必定是 HTTP/HTTPS 协议，这两种协议的工作原理可简述为：客户端通过浏览器发送一个请求，服务器在接受到请求后进行处理并将得到的结果返回给客户端，由客户端处理结果。可见其主要为一种 “拉取” 信息的形式。&lt;/p&gt;
&lt;p&gt;随着时代的发展，出现了一些需要实时发送信息的场景，比如体育实况更新、金融证券的实时信息、实时数据监控等。而如何实现 “推送” 信息的形式呢？在 WebSocket 还未诞生的时候，采用的是轮询技术来实现信息的推送：每间隔一定的时间，浏览器自动发送一个 HTTP 请求，以此主动拉取服务器的最新消息。使用轮询技术，需要不停向服务器发送 HTTP 请求，这样会占用很多的带宽和服务器资源，并且还是不能实现服务器主动向客户端推送数据。&lt;/p&gt;
&lt;p&gt;在上述背景下，一种全双工的通信协议 WebSocket 应运而生，它实现了服务端主动向客户端推送数据，使得客户端与服务器间的信息交互更为便捷。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
