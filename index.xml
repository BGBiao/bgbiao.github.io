<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BGBiao的SRE人生</title>
    <link>https://bgbiao.top/</link>
    <description>Recent content on BGBiao的SRE人生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 01 Mar 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://bgbiao.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>过去这一个月的所思所想</title>
      <link>https://bgbiao.top/post/%E7%96%AB%E6%83%85%E5%9C%A8%E5%AE%B6%E8%BF%99%E4%B8%AA%E6%9C%88/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/%E7%96%AB%E6%83%85%E5%9C%A8%E5%AE%B6%E8%BF%99%E4%B8%AA%E6%9C%88/</guid>
      
        <description>&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/00831rSTly1gceh0gxrolj313y0u07wl.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;​                                                                       &amp;lt;可乐葱三结义&amp;gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这一个月以来，受疫情的影响，一直在家办公，可能对外人而言，觉得在家办公会相对比较轻松，能够除工作外做更多的事情，但这一个月下来，我却有颇多的不爽和不适，也因此把公众号的更新耽误了许久。本来计划3月2号全员复工的我们，在2月的尾巴突然通知延迟到3月16号上班，这让我顿时有了紧迫感，2020年的规划和计划得赶紧抓紧执行了，公号也得更起来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;先说说在家办公吧。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在春节期间，由于疫情的爆发，国家将法定的春节延长至2月2日(正月初九)，所以我们正式的远程办公是在2月3日开始执行的，截止2月底，相当于已经整整在家办公四周了。&lt;/p&gt;

&lt;p&gt;在家的办公的这四周里，虽然对于个人实际的工作内容没有太大的变化，但整个工作形式、工作状态以及工作效能却是有很大的变化的。(&lt;code&gt;注意:这里说的是在家办公而非远程办公&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;在工作形式上可谓是百花齐放。相关的协作和协同工具也基本上处于头部几家互联网大厂，首当其冲的肯定属于阿里旗下的&lt;code&gt;钉钉&lt;/code&gt;,由于其早已在TOB领域深耕多年，在这次特殊情况下也就自然发挥了其作用，不过在以直播方式应用在中小学教学领域时也是遭遇&lt;code&gt;1分好评&lt;/code&gt;的尴尬场面。其次是企业微信和头条旗下的&lt;code&gt;飞书&lt;/code&gt;，前者由于存在个人版，所以没做尝试，而飞书前两天在&lt;code&gt;姜胡说&lt;/code&gt;作者胡子老师的直播会议时有幸做了尝试，只能说用过了钉钉，基本很难去转向飞书，毕竟作为TOB产品，以及协作工具，后者的功能更全，生态更广。&lt;/p&gt;

&lt;p&gt;为什么在家办公一个月我会有很多不适？我总结了几个点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;早中午的打卡(每天按点进行团队视频打卡)&lt;/li&gt;
&lt;li&gt;网络的限制&lt;/li&gt;
&lt;li&gt;家庭办公中的生活干扰&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在家办公后公司采取了一系列措施来保证员工的安全和&amp;rdquo;到岗&amp;rdquo;，而钉钉则解决了团队以及项目的沟通和协作问题，看起来似乎即使因为疫情的影响，对于互联网业务的技术岗位来说，也基本不会影响业务进度。事实上也的确是这个样子的。&lt;/p&gt;

&lt;p&gt;但是，对于员工个人(其实是我自己)而言，需要克服的是更多的困难。&lt;/p&gt;

&lt;p&gt;比如家庭网络对于远程办公场景的支撑如何，又如家庭场景的多样性对办公场景的干扰性如何，因为疫情是突然爆发的，所以大部分人在这两方面应该没有足够的准备，也因此可以确定的是，在目标导向或者结果导向的情况下，在家办公的工作内容可能会花费更多的时间。&lt;/p&gt;

&lt;p&gt;我不知道其他小伙伴们如何，但事实上，在北漂出租屋办公一个月的日子里，我好像每天都要加班到晚上十点，才能勉强将当日的计划做完，并且办公环境的限制会使得身体各种不舒服。&lt;/p&gt;

&lt;p&gt;说了这么多我的在家办公情况，其实并未想表明什么，只是希望疫情能够快速过去，企业能早日复工，而我也能去公司去做工作上的事情。&lt;/p&gt;

&lt;p&gt;不过上周五，收到这个通知，感觉又要痛苦两周。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/00831rSTly1gcepuaum3fj30ks0axt9k.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;但其实，如果在家办公久了，也许以后会成为常态，那对于技术工作者而言是不是也会不再受地域的限制，会不会未来北上广深的技术人员在家办公即可，如此以来不是企业降负，员工自由么，那个时候就可以在家置办个高速网络和工作台，真正实现SOHO了(容我自己YY会儿)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;蜗居生活&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在家办公这一周可以算得上是真正的蜗居生活了，对于我这种天生好动的人来说，一周出门两三次，活动空间不超过40平，这种情况下，也很难会有比较好的心情(主要是我也不咋喜欢宅的娱乐活动)。&lt;/p&gt;

&lt;p&gt;所以，偶然在一次做饭中，想起来将菜根留下来做水培，也就有了题图的&amp;rdquo;可乐葱三结义&amp;rdquo;，一方面是因为实在没事干，想用这种小葱根水培来见证蜗居的日子，另外一方面是因为从假期开始也一直在看电视剧《三国》，每每看到刘备取得一定成绩时，就会想起这桃园三兄弟，三人有勇有谋，且情同手足。&lt;/p&gt;

&lt;p&gt;可叹刘备的胸襟，关羽的忠义，张飞的粗狂。&lt;/p&gt;

&lt;p&gt;话说，活动空间有限，又不能出门，对于运动细胞发达的我更是煎熬，为了不使自己在疫情过后丢掉了矫健的步伐，开始了每晚的Keep运动，每晚10点开始一天的简单运动放松，项目是: 李现HIT全身燃脂。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于成长&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实当人越是处于一个封闭的物理环境时，越容易有焦虑感，这种焦虑感一方面源自于个人成长多样性，另外一方面也源于缺乏与真实环境的正面反馈。&lt;/p&gt;

&lt;p&gt;在家办公的一个月(加上环境的限制)，的确在个人成长方面受限了很多，比如没有足够时间和经历去学习一些新技术，也很难抽出一小段时间来专注读技术之外的书籍(不过还是读完了两本)，这对于整个人的体系化成长会有很大的影响。&lt;/p&gt;

&lt;p&gt;所以，虽然突然又多出来两周的在家办公时间，但是我已经调整了整个生活和工作计划，打算充分利用在家办工的这段时间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其他，就没有什么了，我打算趁着现在还没复工，好好梳理梳理我的运维知识体系和个人价值体系以及财富体系，毕竟整个2月一个月的时间整个收益曲线变化很大，现在刚好是可以整理自己思绪的时候，加油吧，baby！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/00831rSTly1gceh0txnrhj313y0u01l9.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;​                                                                                      &amp;lt;一个坚定的眼神&amp;gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>开源分布式对象存储服务-MinIO</title>
      <link>https://bgbiao.top/post/minio%E5%88%86%E5%B8%83%E5%BC%8F%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/minio%E5%88%86%E5%B8%83%E5%BC%8F%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;背景:通常在企业中我们会将一些图片，视频，文档等相关数据存储在对象存储中，以便于数据的存储和快速获取。在过去的一段时间，我们将这部分数据存储在公有云的对象存储服务上，但随着业务的快速发展，我们需要存储一些身份信息用于审核和实名相关的数据，这部分数据较为敏感，因此对于敏感数据的存储我们选择了使用兼容S3协议的开源分布式对象存储-&lt;a href=&#34;https://github.com/minio/minio&#34;&gt;Minio&lt;/a&gt;来进行自建服务。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Minio可能在国内知道和用的人不是很多，我第一次接触Minio是也是当时我们需要使用Spinnaker集群来管理和维护内部的Kubernetes集群，而Spinnaker的中的持久化存储就使用的是Minio &lt;a href=&#34;https://mp.weixin.qq.com/s/uN0RoGtcK1jT4QXlzkf4Bg&#34;&gt;Spinnaker集群搭建&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;但其实，Minio这款开源的分布式对象存储服务在国外已经相当受欢迎，并且国内也有多中小型互联网公司使用它来作为对象存储服务。&lt;/p&gt;

&lt;p&gt;有意思的是当年在开源的分布式存储方案中，比较有名的就是&lt;code&gt;GlusterFS&lt;/code&gt;和&lt;code&gt;Ceph&lt;/code&gt;。前者虽然也提供了块存储和对象存储的接口，但对于企业来说更多用于了分布式文件系统存储，其实就是一种高可用版本的NAS解决方案(通常用于替换NFS)，而后者则针对多种存储场景设计了不同的产品，针对分布式文件系统存储有&lt;code&gt;CephFS&lt;/code&gt;，针对分布式块存储有&lt;code&gt;Ceph RBD&lt;/code&gt;，针对分布式对象存储有&lt;code&gt;Ceph Radosgw&lt;/code&gt;，基本上可以做到开箱即用。&lt;/p&gt;

&lt;p&gt;所以，在后来GlusterFS后来被收购后，据说创始团队又开源了一个分布式存储软件，就是这个用Golang编写的小而美的对象存储&lt;a href=&#34;https://min.io/&#34;&gt;Minio&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;minio介绍&#34;&gt;Minio介绍&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;MinIO&lt;/code&gt;是一个用&lt;code&gt;Golang&lt;/code&gt;开发的基于&lt;code&gt;Apache License v2.0&lt;/code&gt;开源协议的&lt;code&gt;对象存储服务&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。&lt;/p&gt;

&lt;p&gt;Minio使用纠删码&lt;code&gt;erasure code&lt;/code&gt;和校验和&lt;code&gt;checksum&lt;/code&gt;来保护数据免受硬件故障和数据损坏。&lt;/p&gt;

&lt;p&gt;因此，即便您丢失一半数量（N/2）的硬盘，您仍然可以恢复数据。&lt;/p&gt;

&lt;h4 id=&#34;纠错码介绍-erasure-code&#34;&gt;纠错码介绍(erasure code)&lt;/h4&gt;

&lt;p&gt;纠删码是一种恢复丢失和损坏数据的数学算法， Minio采用&lt;code&gt;Reed-Solomon code&lt;/code&gt;将对象拆分成&lt;code&gt;可变数据块&lt;/code&gt;和&lt;code&gt;奇偶校验块&lt;/code&gt;。 比如12块盘(driver)，一个对象可以被切分到所有驱动器上的可变数量的数据和奇偶校验块—从6个数据和6个奇偶校验块到10个数据和2个奇偶校验块。&lt;/p&gt;

&lt;p&gt;但是，默认情况下，MinIO在&lt;code&gt;N/2&lt;/code&gt;个数据块和&lt;code&gt;N/2&lt;/code&gt;个奇偶校验驱动器上分片对象，当然用户可以通过&lt;a href=&#34;https://github.com/minio/minio/tree/master/docs/erasure/storage-class&#34;&gt;storage classes&lt;/a&gt;来自定义配置，不过官方还是建议采用使用N/2个节点来分配数据块和奇偶校验块，这样能够以最佳的方式保护防止驱动器(driver)故障.&lt;/p&gt;

&lt;p&gt;在上面的12个驱动器示例(使用默认配置)中，您可以丢失6个驱动器中的任何一个，但仍然可以从其余驱动器可靠地重构和恢复数据。&lt;/p&gt;

&lt;h4 id=&#34;为什么纠错码有用&#34;&gt;为什么纠错码有用&lt;/h4&gt;

&lt;p&gt;与RAID或复制不同，纠错码可以保护数据不受多个驱动器故障的影响。&lt;/p&gt;

&lt;p&gt;比如，在经典的&lt;code&gt;RAID6&lt;/code&gt;中可以在损失两块盘的情况下不丢数据，然而在Minio中纠错码可以保证当一般的盘故障时依然不会影响到数据。此外，纠错码在在对象级别，并且每次就可以修复一个对象。对于&lt;code&gt;RAID&lt;/code&gt;而言，数据的修复在卷(volume)级别，这就意味比较高的修复时间。由于MinIO对每个对象单独编码，所以它可以逐步的对对象进行修复。一旦部署了存储服务器，就不需要在服务器的生命周期内更换或修复驱动器。MinIO的纠错码后端是为提高操作效率而设计的，它可以更加高效的利用硬件而达到加速的效果。&lt;/p&gt;

&lt;h4 id=&#34;什么是-bit-rot-保护&#34;&gt;什么是&lt;code&gt;Bit Rot&lt;/code&gt;保护&lt;/h4&gt;

&lt;p&gt;Bit Rot，也称为Data Rot或静默数据损坏，是当今磁盘驱动器面临的数据丢失问题。驱动器上的数据可能在不发出错误信号的情况下被损坏，这使得比特损坏比永久的硬盘驱动器故障更危险。而在Minio内部的设计中采用了高速的&lt;a href=&#34;https://github.com/minio/highwayhash&#34;&gt;HighwayHash&lt;/a&gt;校验和来保护&lt;code&gt;Bit Bot&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;drivers是如何使用纠错码的&#34;&gt;Drivers是如何使用纠错码的&lt;/h4&gt;

&lt;p&gt;MinIO将您提供的驱动器分为4、6、8、10、12、14或16个驱动器的纠错码集，因此，在你构建一个Minio集群时，需要确保提供的驱动器的数量是这些数据之一的倍数，然后每个对象都会被写入一个单一的纠错码集中。&lt;/p&gt;

&lt;p&gt;Minio会使用尽可能大的EC集(除以给定驱动器的数量)，比如，18个驱动器可以配置为3组6个驱动器，但是24个驱动器最大只能分配2组12个驱动器。&lt;/p&gt;

&lt;p&gt;驱动器的大小应该大致相同。&lt;/p&gt;

&lt;h3 id=&#34;minio集群实操&#34;&gt;Minio集群实操&lt;/h3&gt;

&lt;h4 id=&#34;使用纠错码模式运行minio服务&#34;&gt;使用纠错码模式运行minio服务&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 使用二进制方式运行有12个驱动器的minio服务
$ minio server /data1 /data2 /data3 /data4 /data5 /data6 /data7 /data8 /data9 /data10 /data11 /data12

# 使用docker方式运行有8驱动器的minio服务
$ docker run -p 9000:9000 --name minio \
  -v /mnt/data1:/data1 \
  -v /mnt/data2:/data2 \
  -v /mnt/data3:/data3 \
  -v /mnt/data4:/data4 \
  -v /mnt/data5:/data5 \
  -v /mnt/data6:/data6 \
  -v /mnt/data7:/data7 \
  -v /mnt/data8:/data8 \
  minio/minio server /data1 /data2 /data3 /data4 /data5 /data6 /data7 /data8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;以纠错码方式运行服务后，你就可以尝试将任意一半盘毁坏，依然不会影响整个系统的IO。但是&lt;code&gt;如果要求不影响写，处于正常的的驱动器个数必须大于N/2&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;分布式minio集群&#34;&gt;分布式MinIO集群&lt;/h4&gt;

&lt;p&gt;通常情况下，为了成本和效率的考虑开发同学可能会使用上述方式快速创建一个minio服务，但是从稳定性和可用性的角度来考虑，上述方式均无法保证，因此MinIO也提供了分布式的模式。&lt;/p&gt;

&lt;p&gt;分布式Minio可以让你将多块硬盘（甚至在不同的机器上）组成一个对象存储服务。由于硬盘分布在不同的节点上，分布式Minio避免了单点故障。&lt;/p&gt;

&lt;p&gt;分布式的Minio的优势:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;数据保护&lt;/code&gt;: 采用纠错码&lt;code&gt;erasure code&lt;/code&gt;防止多节点或者驱动器异常，采用&lt;code&gt;bit rot&lt;/code&gt;来进行数据保护。一个分布式的Minio集群最小需要4块盘(其实是纠错码要求最小4块)来驱动整个集群，当我们启动分布式集群后，纠错码会自动启动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;高可用&lt;/code&gt;: 多节点组成的分布式minio可保证服务的高可用(一个N节点的分布式Minio,只要有N/2节点在线，你的数据就是安全的。不过你需要至少有N/2+1个节点才能创建新的对象。)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;一致性保障&lt;/code&gt;: MinIO在所有的IO操作中都严格遵循&lt;code&gt;read-after-write&lt;/code&gt;和&lt;code&gt;list-after-write&lt;/code&gt;一致性模型&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;运行分布式minio集群&#34;&gt;运行分布式MinIO集群&lt;/h4&gt;

&lt;p&gt;想要运行一个分布式的MinIO集群，你只需要将驱动器的位置参数传给minio指令即可，然后需要在全部节点运行相同的命令。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意事项&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;所有的节点需要有相同的access key 和 secret key，推荐在启动之前使用&lt;code&gt;MINIO_ACCESS_KEY&lt;/code&gt;和&lt;code&gt;MINIO_SECRET_KEY&lt;/code&gt;变量来共享key&lt;/li&gt;
&lt;li&gt;MinIO创建一组4, 6, 8, 10, 12, 14 or 16个驱动器的纠错码，因此提供的驱动数量必须是前面数字的倍数&lt;/li&gt;
&lt;li&gt;MinIO会选择给定驱动中，较大的一个EC集合，比如8个驱动将会使用一个大小为8的EC集，而不是两个大小为4的EC集&lt;/li&gt;
&lt;li&gt;每一个对象都会写到一个EC集中，因此对象的分布不可能超过16个驱动&lt;/li&gt;
&lt;li&gt;MinIO集群中的所有节点应该是同构的(比如:相同的OS,相同的磁盘和相同的网络架构)&lt;/li&gt;
&lt;li&gt;MinIO分布式模式需要&lt;code&gt;fresh directories&lt;/code&gt;(即干净的目录)，如果需要可以和其他应用程序共享驱动器(使用子目录的方式)&lt;/li&gt;
&lt;li&gt;运行分布式MinIO实例的服务器之间的间隔应该小于15分钟，你可以使用&lt;code&gt;NTP&lt;/code&gt;服务来保证服务器时间同步&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MINIO_DOMAIN&lt;/code&gt;环境变量应该被定义成&lt;code&gt;bucket DNS&lt;/code&gt;样式的支持(可以给每个bucket设置子域名)&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Windows&lt;/code&gt;上的分布式集群是实验性的，需要谨慎&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gb4fbrthg2j30qo0f0myz.jpg&#34; alt=&#34;官方提供的有32个驱动器的32节点的分布式集群&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;一个EC Set 上包含多少个Drive是由系统自动根据集群规模算出来的，当然你可以自己去配置.&lt;/p&gt;

&lt;p&gt;我们以1个驱动器的4节点来组成集群:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# tree -L 1 /opt/app/
/opt/app/
├── minio
├── minio.conf

$ cat minio.conf
MINIO_ACCESS_KEY=BGBiao
MINIO_SECRET_KEY=BGBiao
ENDPOINTS=&amp;#34;http://10.0.0.148:9000/data/minio http://172.16.62.149:9000/data/minio http://172.16.62.150:9000/data/minio http://172.16.62.151:9000/data/minio&amp;#34;

$ cat /usr/lib/systemd/system/minio.service
[Unit]
Description=Minio
Documentation=https://docs.minio.io
Wants=network-online.target
After=network-online.target
AssertFileIsExecutable=/opt/app/minio

[Service]
EnvironmentFile=-/opt/app/minio.conf
ExecStart=/opt/app/minio server $ENDPOINTS

# Let systemd restart this service always
Restart=always
# Specifies the maximum file descriptor number that can be opened by this process
LimitNOFILE=65536
# Disable timeout logic and wait until process is stopped
TimeoutStopSec=infinity
SendSIGKILL=no
[Install]
WantedBy=multi-user.target


# 将上述配置同步到4个节点，并启动，minio实例之间会自行发现各个节点
$ systemctl restart minio&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;minio分布式对象存储服务使用&#34;&gt;Minio分布式对象存储服务使用&lt;/h3&gt;

&lt;p&gt;当使用前面的方式成功运行minio的对象服务后，我们就可以使用以下几种方式进行访问:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;web&lt;/code&gt;: 默认我们可以访问实例的9000端口，通过access key和secret key进行访问实例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mc&lt;/code&gt;: 使用minio官方提供的兼容s3的客户端&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aws-cli&lt;/code&gt;: 使用aws的客户端命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s3cmd&lt;/code&gt;: 使用3s的开源客户端执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minio-go&lt;/code&gt;: 使用minio的golang客户端操作集群&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;: 当我们成功运行minio服务后，默认会提供一个简单的web管理页面.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gb5hep7kazj31zm0u0aer.jpg&#34; alt=&#34;web管理页面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这里我们使用&lt;code&gt;mc&lt;/code&gt;客户端命令进行操作(&lt;code&gt;值得一提的是，有了mc客户端之后操作oss就如同本地操作一样方便快捷&lt;/code&gt;)&lt;/p&gt;

&lt;h4 id=&#34;minio客户端mc的使用&#34;&gt;minio客户端mc的使用&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;客户端配置管理&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 添加minio云存储服务(会将数据存入~/.mc/config.json)
# mc config host add &amp;lt;ALIAS&amp;gt; &amp;lt;YOUR-S3-ENDPOINT&amp;gt; &amp;lt;YOUR-ACCESS-KEY&amp;gt; &amp;lt;YOUR-SECRET-KEY&amp;gt; &amp;lt;API-SIGNATURE&amp;gt;
$ mc config host add minio http://bgbiao.top:9000 BGBiao BGBiao S3v4&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;查看bucket&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 查看minio集群中的bucket
$ mc ls minio
[2020-01-10 20:54:19 CST]      0B test11/
[2019-07-08 19:51:02 CST]      0B test23/
[2019-07-08 20:10:58 CST]      0B test4/

# 查看bucket的内容
$ mc ls minio/test11
[2019-07-05 21:22:34 CST]   88KiB 111
[2019-07-07 11:03:21 CST]   88KiB 112
[2019-07-08 10:50:51 CST]   88KiB 113
[2019-07-08 18:17:17 CST]   88KiB 114
[2019-07-09 11:51:30 CST]   66KiB 116
[2019-07-09 14:24:23 CST]   66KiB 117.jpg
[2019-07-09 14:33:17 CST]   66KiB 118.jpg
[2019-07-09 14:52:36 CST]   66KiB 119.jpg
[2020-01-10 20:52:28 CST]  7.4KiB server.xml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;bucket管理&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 创建一个bucket
$ mc mb minio/bgbiao
Bucket created successfully `minio/bgbiao`.
$ mc ls minio/ | grep bgbiao
[2020-01-22 16:32:43 CST]      0B bgbiao/

# rb可以直接删除指定的bucket
$ mc rb minio/bgbiao
Removed `minio/bgbiao` successfully.

# tree可以打印出来bucket组织的文件系统树形结构
$ mc tree --depth 2 --files minio/bgbiao
minio/bgbiao
└─ hostname.txt

# du可以查看某个bucket或者object的大小
$ mc du minio/bgbiao
10B bgbiao
$ mc du minio/
9.1GiB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;对象管理&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 将本地文件拷贝到minio的oss服务
# 并直接使用cat命令访问
$ hostname &amp;gt; hostname.txt
$ mc cp hostname.txt minio/bgbiao/
hostname.txt:         10 B / 10 B  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  132 B/s 0s%
$ mc ls minio/bgbiao/
[2020-01-22 16:33:52 CST]     10B hostname.txt
$ mc cat  minio/bgbiao/hostname.txt
localhost

# 使用pipe命令可以将标准输入的数据直接写入到minio的存储中
$ echo ${PATH} | mc pipe minio/bgbiao/path.txt
$ mc ls minio/bgbiao/
[2020-01-22 16:33:52 CST]     10B hostname.txt
[2020-01-22 16:43:43 CST]    111B path.txt
$ mc cat minio/bgbiao/path.txt
/Users/BGBiao/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/soul/bin


# 受用share命令生成可供外部匿名下载的临时链接地址
# 生成后我们就可以使用共享链接在4小时内随意下载
$ mc share download --expire 4h minio/bgbiao/hostname.txt
URL: http://bgbiao.top:9000/bgbiao/hostname.txt
Expire: 4 hours 0 minutes 0 seconds
Share: http://bgbiao.top:9000/bgbiao/hostname.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=BGBiao%2F20200122%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20200122T083619Z&amp;amp;X-Amz-Expires=14400&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=ec49806b7c249bbeb140af759afeff907672ebd97637b759efd11d4f9b1a20b3

# 使用mirror指令对bucket内容进行镜像(最实用的一个指令)
# 将minio这个对象服务下的bgbiao的整个bucket的对象镜像到本地
# 使用minio的mc客户端可以在多个minio服务之间进行数据镜像
$ mc mirror minio/bgbiao .
...iao/hostname.txt:  10 B / 10 B  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  39 B/s 0s %

# 使用find指令来直接查找内容(相对比较实用,find指令支持很多方便快捷的参数，和Linux本地的find命令内容相似)
# 查找名称为*.txt的文件并打印临时url下载地址
$ mc find minio/bgbiao/ --name &amp;#34;*.txt&amp;#34; --print {url}
http://bgbiao.top:9000/bgbiao/hostname.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=BGBiao%2F20200122%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20200122T084926Z&amp;amp;X-Amz-Expires=604800&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=a02a370575cae5d5cf92c565d02918e20d734f80afed3e5eebf5fe1433aa348a
http://bgbiao.top:9000/bgbiao/path.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=BGBiao%2F20200122%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20200122T084926Z&amp;amp;X-Amz-Expires=604800&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=d7d87f6a4f9d406ae02a6844574f02f6e1479215bee8401feea58e95e98b8b36
 
# diff命令可以列出两个bucket之间对象的大小，名字，时间的不同
$ mc diff . minio/bgbiao/
&amp;gt; http://bgbiao.top:9000/bgbiao/path.txt
&amp;lt; readme.md

# rm可以直接删除指定的对象(--force --recursive就相当于我们linux中的rm -rf)
$ mc rm --force --recursive   minio/bgbiao
Removing `minio/bgbiao/hostname.txt`.
Removing `minio/bgbiao/path.txt`.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;minio运维管理&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;90
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# stat可以查看minio服务的元数据信息
$ mc stat minio/bgbiao
Name      : bgbiao/
Date      : 1970-01-01 08:00:00 CST
Size      : 0 B
Type      : folder
$ mc stat minio/bgbiao/hostname.txt
Name      : hostname.txt
Date      : 2020-01-22 17:04:27 CST
Size      : 10 B
ETag      : 902f570940ba8d4b74743a3a97f5aff6-1
Type      : file
Metadata  :
  Content-Type         : text/plain
  X-Minio-Deployment-Id: 80525c40-fec3-459e-8080-6f5210548647


# retention指令可以设置指定前缀的对象的保留时间

# events指令可以查看和添加对象的事件

# watch可以实时监听对象的events

# policy用来管理匿名用户对bucket和object的访问
# 设置bgbiao这个bucket匿名用户仅可以下载(download/public/upload)
$ mc policy set download minio/bgbiao
$ mc policy list minio/bgbiao 

# admin用来管理minio服务
# mc admin info 查看minio服务基本信息
# mc admin service 重启和停止minio服务
# mc admin config  管理minio服务的配置信息
$ mc admin info minio
●  10.0.0.149:9000
   Uptime: 1 day
   Version: 2020-01-16T22:40:29Z
   Network: 4/4 OK
   Drives: 1/1 OK

●  10.0.0.150:9000
   Uptime: 1 day
   Version: 2020-01-16T22:40:29Z
   Network: 4/4 OK
   Drives: 1/1 OK

●  10.0.0.151:9000
   Uptime: 1 day
   Version: 2020-01-16T22:40:29Z
   Network: 4/4 OK
   Drives: 1/1 OK

●  10.0.0.148:9000
   Uptime: 1 day
   Version: 2020-01-16T22:40:29Z
   Network: 4/4 OK
   Drives: 1/1 OK

13 GiB Used, 2 Buckets, 166,580 Objects
4 drives online, 0 drives offline
 
# config 用来管理客户端的配置文件(还记得我们刚开始配置本地环境的时候吗)
# minio默认帮我们配置了一些公共的对象存储服务，同时也配置了一个本地的oss服务
$ mc config host list
gcs
  URL       : https://storage.googleapis.com
  AccessKey : YOUR-ACCESS-KEY-HERE
  SecretKey : YOUR-SECRET-KEY-HERE
  API       : S3v2
  Lookup    : dns

local
  URL       : http://localhost:9000
  AccessKey :
  SecretKey :
  API       :
  Lookup    : auto

minio
  URL       : http://bgbiao.top:9000
  AccessKey : BGBiao
  SecretKey : BGBiao
  API       : s3v4
  Lookup    : auto

play
  URL       : https://play.min.io
  AccessKey : Q3AM3UQ867SPQQA43P2F
  SecretKey : zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG
  API       : S3v4
  Lookup    : auto&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>思考自己的价值系统</title>
      <link>https://bgbiao.top/post/2020-%E6%80%9D%E8%80%83%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%B7%E5%80%BC%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/2020-%E6%80%9D%E8%80%83%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%B7%E5%80%BC%E7%B3%BB%E7%BB%9F/</guid>
      
        <description>&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwgy1gazzkqu1bqj31970u0b2a.jpg&#34; alt=&#34;~美丽的布达拉宫~&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;文末有彩蛋&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;批判(&lt;code&gt;胡&lt;/code&gt;)性(&lt;code&gt;思&lt;/code&gt;)思(&lt;code&gt;乱&lt;/code&gt;)考(&lt;code&gt;想&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在过去的几个月里，我又做了一个实验。&lt;/p&gt;

&lt;p&gt;我这个人总是有一个特点，就是当自己内心里突然出现一个比较有意思的想法时，我就会尽自己最大可能去做一个亲身实验，当然我也不知道这个特点对于我个人来说是福是祸，但每当想起能够控制自己去做一件事情的时候，就觉的特别酷。&lt;/p&gt;

&lt;p&gt;我们都知道如今的互联网有几大产品几乎占据了我们全部的生活，对我个人感触最大的就是&lt;code&gt;抖音&lt;/code&gt;和&lt;code&gt;微信&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;17年因为追&lt;code&gt;中国有嘻哈&lt;/code&gt;节目，了解到&lt;code&gt;抖音&lt;/code&gt;这个产品，那个时候抖音还没有19年这么火，但当时它们的内容以及推荐策略足以让我在卫生间的马桶上呆一个多小时(如果不是公共区域可能会更长)。&lt;/p&gt;

&lt;p&gt;你要知道人对一个东西上瘾是一件很恐怖的事情，因为不知不觉一天就会过去，而人生命的长度是有限的，想到这内心不免会有一些愧疚感(应该很多人都会这样的感觉吧)。那个时候我想办法就强制把抖音卸载了，幸亏我是一个自控力还算可以的人，算是没有在这个产品上荒废太多时光(但其实后来才发现，在这个产品里其实可以有很多&lt;code&gt;价值&lt;/code&gt;可以挖掘，不仅可以带货，也可以用来学习专业领域知识)。&lt;/p&gt;

&lt;p&gt;而微信则非常不同，这个伴随移动互联网崛起的社交软件一直在不断的&lt;code&gt;侵蚀&lt;/code&gt;我们，从一开始的&lt;code&gt;即时通讯，语音聊天，微信群，图片聊天，朋友圈，公众号，小程序，支付，搜一搜(再看)，到现在的圈子和朋友圈图文评论&lt;/code&gt;，微信生态几乎可以满足我们一天大部分的工作和生活需求。&lt;/p&gt;

&lt;p&gt;从一般人的角度来讲可能觉得这样挺好的，我们不需要在不同需求之间来回切换软件，整个工作和生活可能都觉得高效了起来，但如果你仔细想想就会发现，其实没有那么简单。&lt;/p&gt;

&lt;p&gt;在没有离开京东数科之前，曾经有段时间我一直处于被微信引导的状态。&lt;/p&gt;

&lt;p&gt;什么意思呢，就是我发现几乎只要有碎片时间就会去刷朋友圈，去看公众号的推送文章。&lt;/p&gt;

&lt;p&gt;当你通过微信这样的方式去学习和涨见识的时候，你会发现你的朋友都是能力圈周边的人，你的朋友圈也因为各种屏蔽功能只能让你看到你想看的东西，而公众号的推送一般都是我们主动关注的领域(&lt;em&gt;但通常一般主动关注公众号有80%对我个人来说是没有价值的，也就是干扰知识，这可能也是微信团队退出&lt;code&gt;搜一搜&lt;/code&gt;和&lt;code&gt;看一看&lt;/code&gt;两个功能的主要原因吧&lt;/em&gt;)。&lt;/p&gt;

&lt;p&gt;这样造成的一个结果就是我们总是会习惯性的打开微信去消耗碎片时间，而几乎很难得到一些真正有价值成体系的知识(&lt;em&gt;所以关注我公众号的兄弟们如果觉得内容没有给自己带来价值我是非常建议取关的，如果给您带来价值了可以点个&lt;code&gt;在看&lt;/code&gt;，因为这样我的推送不会干扰到您，也可以给有需要的同学带来便利&lt;/em&gt;)。&lt;/p&gt;

&lt;p&gt;讲了这么多废话，我做的小实验其实就是&lt;code&gt;关闭朋友圈&lt;/code&gt;和&lt;code&gt;公众号取关&lt;/code&gt;，通过这种主动屏蔽的方式来改变以前被微信生态绑定的习惯和状态。
&lt;em&gt;其实很佩服微信的产品，很多功能其实都是插拔式的，用户完全可以根据自己的需求来关闭某些功能，所以在&lt;code&gt;关闭朋友圈&lt;/code&gt;后丝毫不会影响微信给我们带来的便利&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;可能会有人有很多疑虑，这其实也是我这半年的思考和写该篇文章的原因，因为当我从这些碎片化的内容中剥离出来后，我能够更加聚焦到自己想关注的内容上来，从而满足自己内心的需要。&lt;/p&gt;

&lt;p&gt;写这篇文章主要想通过自己的一些思考，来不断优化自己的成长路径，同时也希望能对大家有一定帮助。&lt;/p&gt;

&lt;p&gt;接下来，我会从&lt;code&gt;工作&lt;/code&gt;,&lt;code&gt;生活&lt;/code&gt;,&lt;code&gt;运动&lt;/code&gt;,&lt;code&gt;理财&lt;/code&gt;几个方面来分享一下我这大半年的一些感悟和思考。&lt;/p&gt;

&lt;h4 id=&#34;工作&#34;&gt;工作&lt;/h4&gt;

&lt;p&gt;我是15年毕业的，去年6月底从老东家(也是第一家公司)出来的，我很幸运在一毕业能够进入一个大企业进行学习和成长，也很幸运能够加入一个比较好的团队和各种优秀的同事一起共事，这让我在整个职业生涯初期得到了飞速的成长，当然这里要非常感谢三位老领导：超哥，郑老板，还有一位可算是我的职业生涯的启蒙老师波哥。&lt;/p&gt;

&lt;p&gt;有的人可能会说，都9012年了，整个经济周期都从十年缩短到3-5年了，还能在一家互联公司呆4年，可真是&amp;rdquo;兄弟&amp;rdquo;啊。&lt;/p&gt;

&lt;p&gt;其实并不是这样的，要知道我们每个人的职业生涯都是螺旋式成长的，在过去的四年中的确会有成长瓶颈点而有想出去的想法，但考虑到自己的职业履历后都打消这种念头了，幸运的是，通常这个时候都会找到新成长途径(也多亏有个好领导)，不至于让自己四年重复了一年的工作。&lt;/p&gt;

&lt;p&gt;所以，就有了在去年中旬离开的这件事。&lt;/p&gt;

&lt;p&gt;其实在当时老板们对我都很好，而且整体待遇也相当不错，只是对于我个人而言，在相对舒适的环境里成长确实受限了些，而且在一个熟悉的环境里很多决策和思考会形成一定的固有模式，这对于一个发散型思维和批判性思维的人来说并不是一个好事。&lt;/p&gt;

&lt;p&gt;认清自己的现状和期望后，便十分果断的离开了。在这之前还有一个小插曲，就是当年在数科时有个要好的小伙伴，后来去了鹅厂，各种怂恿我出去看看，说出来后机会很多，认知也会提升很多，而我的内心其实也是非常认同的，事实也证明早出来其实是非常明智的，甚至有时在想如果我早一年出来的话，又会是怎样的。&lt;/p&gt;

&lt;p&gt;在工作这件事上，前期我的想法是很简单的，因为我主要追求的是个人成长，只需要自己努力工作，自己快速成长，至于钱的事情可能也没怎么考虑(如果遇到好领导，你的努力老板不会看不见的)，并且刚毕业的前几年，我们往往是不那么缺钱的，更缺的是一些技能和经验，毕竟这两者才是未来个人价值的基础。&lt;/p&gt;

&lt;p&gt;但其实在后面的时间，你会发现钱越来越重要了，因为我们不断面临着买房，结婚以及身体上的压力，而此时并不一定是领导或者公司给你的报酬幅度降低了，而可能是你所处的大环境限制了你所拿到的报酬。&lt;/p&gt;

&lt;p&gt;所以，择机选择一个新的环境，新的方向去继续努力也不失为一种良策，这就好比在2018-2019年整体经济形势不景气的大背景下，很多企业依然保持着高速的成长，那我们要是能够选择一个好的企业，努力工作，闷声发大财不也挺香么(&lt;em&gt;不过也需要谨慎，好的企业不一定一直好，也不容易选择&lt;/em&gt;)，毕竟我们这一代人努力工作一方面是为了满足自己的成就感，另外一方面是为了更好的品质生活(这不得是用钱来换么)，前者通常来讲只要个人自驱力强，很容易在工作中找到成就感，而后者在职业生涯中往往需要依靠自身努力和所处的企业大环境，两者缺一都很难实现(当然也不排除那些不怎么努力但是运气绝佳的人)。&lt;/p&gt;

&lt;p&gt;看到这里的人，或许会有些好奇，我换到了什么企业，做什么工作。&lt;/p&gt;

&lt;p&gt;实际上，从数科离开后，我加入了一家创业公司，还是做运维相关的事，但不同的是在创业公司的整个基础设施都是云化的，在未来整个云计算的大背景，做和云相关的东西至少不会掉队，另外整个运维体系化建设还很原始，正好可以将这几年经历过的也都落地一次，从零将整个运维体系闭环走通(实际上在任何工作中，整个生态或商业闭环的能力其实是相当重要的)。&lt;/p&gt;

&lt;p&gt;当然，还有比较重要的一点是，我们公司的产品更多是面向Z世代人群的，整个互联网的发展史告诉我未来的战场是面向年轻人市场的，所以接触接触年轻人们的世界我觉的对于我们这个当叔叔年级的人来说是有一定帮助的，就像一个B站年会会对它的市值造成那么大影响，我们得去学着理解年轻人的世界不是吗？&lt;/p&gt;

&lt;p&gt;在工作这块我的感悟有以下几点:
- 1.如果你是有想法，自驱力较强的人，没必要为了履历呆够3-5年，外面的世界很大(没想的那么好，但也没有大家说的那么差)，并且这个世界正在&lt;code&gt;微服务&lt;/code&gt;化
- 2.选择一个&lt;code&gt;&amp;quot;有未来&amp;quot;&lt;/code&gt;的企业(即坡道够长)
- 3.尽可能选择一个自己喜欢的方向和能让自己有成就感的事情(不要一味追求利益)，并持续下去&lt;/p&gt;

&lt;p&gt;所以，我目前来说还是做着我比较喜欢的运维相关的工作(Ops也好，DevOps也罢，亦或者是SRE)，本质的内容还是帮助业务快速发展，但其实可能会更多的从&lt;code&gt;技术、运营，甚至营销&lt;/code&gt;等多方面来辅助工作执行。&lt;/p&gt;

&lt;h4 id=&#34;生活&#34;&gt;生活&lt;/h4&gt;

&lt;p&gt;生活上我一直是一个不太讲究的人，但也时常会有一些比较喜欢的东西或者想要去体验的事情，虽然很多东西最后都是浅尝辄止，但是不去尝试，又如何知道自己曾经心心念的东西为何般。&lt;/p&gt;

&lt;p&gt;所以说，人嘛，在生活中总得有一个比较喜欢的事情去做。&lt;/p&gt;

&lt;p&gt;比如说曾经的我，工作就是我全部的生活，不仅仅是工作能够带来给我成就感，还有重要一点是，任何我们想象中美好的生活都是需要很多成本的，一切都是为了未来美好的生活。&lt;/p&gt;

&lt;p&gt;而现在我也会在空闲时间适当的去看一些可以引发思考的节目，电视剧，甚至为了想了解年轻人的世界而去关注一些娱乐节目(当然很多都是向女票请教的)。&lt;/p&gt;

&lt;p&gt;女朋友也找到一个自己喜欢的事(她说喜欢做饭😸)，并且在不断的学习和进步。&lt;/p&gt;

&lt;p&gt;同时，我们会在日常生活之外的时间定期去咖啡馆学习，一起共同成长。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;不得不说家附近有咖啡馆真的是相当方便，通常在星巴克之类的咖啡馆长坐的人大部分都是来学习的，我们看到的基本上都是抱着电脑或者书本在做自己的事，点一杯咖啡，戴一个耳机，自己尽情做自己的事就好。虽然可能这样下来整个开销大了，但其实做事的效率却是很高的，这种高效和快速的成长是无法用金钱的成本来衡量的，因为说不定哪天老板就突然给加薪了呢。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;对了，在过去的几个月里我还给自己找了个事，学&lt;code&gt;架子鼓&lt;/code&gt;，这件事情可算得上从小一直心心念的东西了，但迫于经济和地域条件一直未曾尝试，虽然不知道能不能学会，能学多久，但我还是发自内心的比较喜欢摇滚，比较喜欢这个乐器，希望2020年能够有一定的成绩。&lt;/p&gt;

&lt;h3 id=&#34;运动&#34;&gt;运动&lt;/h3&gt;

&lt;p&gt;工作是为了更好的生活，生活的目的又是不断去探知这个世界，所以健康的身体就成为了最基础的保障，所谓身体是革命的本钱嘛。我在大学时期刚开始跑步时也是为了不感冒(每次感冒就会鼻炎)，直到后面真正爱上了跑步，就会开心也跑，痛苦也跑。&lt;/p&gt;

&lt;p&gt;所以在19年年初和跑团的兄弟们定了契约之后，基本在每个月都会去争取完成100km的任务(只有7月差了5km，到新公司第一个月的最后一天加了个夜班)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwgy1gazzcfhzz1j30ku112n06.jpg&#34; alt=&#34;19年单月跑量&#34; /&gt;&lt;/p&gt;

&lt;p&gt;遗憾的是，19年没有参加过马拉松(北马没中签)，而越野跑也仅跑过一个50km和一个打5折的50km。&lt;/p&gt;

&lt;p&gt;不过，令我比较兴奋的是，以前动不动各种腰痛，颈椎痛，基本很少出现了，以前买的电脑桌自从换工作后也没在用过，我想这可能也是坚持定量运动一个最大的好处吧。&lt;/p&gt;

&lt;p&gt;另外，去年给自己定的目标是挑战崇礼168KM的越野跑，不过因为工作的事情无法参赛，今年提前规划了赛事，如果不出意外会跑完TNF100和崇礼130KM两个越野赛事。其他赛事估计看运气和时间吧，日常的运动量打算继续保持至少100km的跑量(不过1月应该不行了，春节要进藏，不能瞎蹦跶)。&lt;/p&gt;

&lt;p&gt;20年会继续坚持运动，如果有可能，会带着女朋友一起运动，毕竟健康的身体，好看的身材大家都想拥有。&lt;/p&gt;

&lt;h3 id=&#34;理财&#34;&gt;理财&lt;/h3&gt;

&lt;p&gt;理财这件事情是我在过去一年都是比较重视的，但也仅限于基金和股票理财。&lt;/p&gt;

&lt;p&gt;大家都说2018-2019是这几年市场最低迷的两年，的确整个经济的波动在金融市场也表现的淋漓尽致，而我所持仓的理财标的物也是有赔有赚，基金整体上来讲还算不错，所以也想在这里和大家分享一些心路历程。&lt;/p&gt;

&lt;p&gt;我是怎么开始有理财意识的呢？&lt;/p&gt;

&lt;p&gt;源于大学时期，由于我就读的是财经院校，并且会学习金融类相关课程(也会学习支付相关的东西)，有老师就教导我们要&lt;code&gt;有才&lt;/code&gt;，也要&lt;code&gt;有财&lt;/code&gt;，基本上从那个时候就慢慢培养了自己的理财意识(老师会让我们去买余额宝之类的产品来辅助学习支付工具)。&lt;/p&gt;

&lt;p&gt;刚开始毕业那会，会选一些类似P2P理财之类的产品，基本上年化可以保持在4%-6%之间，通常情况会把每个月工资的一部分放进去，直到后来P2P产品的不断倒台，才完全从里面抽出来。&lt;/p&gt;

&lt;p&gt;但是抽出来后会发现，那点钱放在银行账户里收益太低，拿出来又不足以去购买其他资产，索性就找到在银行工作的朋友，让帮忙指导下基金理财，后来也就入了基金理财的坑，到目前为止整体的基金理财平均收益可以保持在10%左右，个人觉得还算是可以的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwgy1gazlk45r55j30ku11241x.jpg&#34; alt=&#34;天天基金上的持仓收益&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwgy1gazljvr5oej30ku1120uk.jpg&#34; alt=&#34;支付宝上的持仓收益&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中图1中可以看到我个人的持仓年涨幅为&lt;code&gt;18.77%&lt;/code&gt;，而&lt;code&gt;沪深300的涨幅为36.07%&lt;/code&gt;，由于我买的都是股票型基金，所以也就意味着在去年一年整个A股市场基本是属于稳定上升状态的，这也就是我在&lt;code&gt;工作&lt;/code&gt;总结中说的&lt;code&gt;外面的环境没想像的那么好，但也没有大家说的那么差&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因为不论市场好坏，总有一些东西是必须品，也总会存在一些持续上升的价值系统。&lt;/p&gt;

&lt;p&gt;在过去大半年基金理财的收益还算不错后，我开始向几位小伙伴推荐，从前几天来看小伙伴们的基金理财收益也基本达到7%-10%左右，这也是促使我想要写这个总结的动力。&lt;/p&gt;

&lt;p&gt;在经历过两年多的基金理财后，我总结了以下几个点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.选一只蓝筹鸡，至于如何选鸡，我之前写过一篇文章&lt;a href=&#34;https://mp.weixin.qq.com/s/swAOiIT-tWkpC0wa24C51Q&#34;&gt;门外汉如何选鸡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.设置每月投资资金的5%-10%到定投中，并坚持下去&lt;/li&gt;
&lt;li&gt;3.以月或周为单位进行复盘，进行适当调仓&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最重要的我认为属于选鸡，因为通常整个基金背后的管理是较为复杂的，一般基金背后的团队和投资物都会相对来说比较稳定，所以前期选好一只基金后，基本上持续定投，只需等待复利效应了。&lt;/p&gt;

&lt;p&gt;股票投资我是投了A股，港股和美股的，基本上各自都有盈亏，美股整体上是亏损的，下面来说说我这一年在股票上学到东西。&lt;/p&gt;

&lt;p&gt;A股我在年初是买了几家公司的，其中包括了&lt;code&gt;京东方A&lt;/code&gt;，&lt;code&gt;苏宁易购&lt;/code&gt;，&lt;code&gt;达华智能&lt;/code&gt;等。&lt;/p&gt;

&lt;p&gt;买这几只股票是因为看好5G，智能时代和新零售市场，结果却发现在不断的跌，后来在合适的点不断清仓，最终基本全部撤离(苏宁易购还剩了点)，后来总结的一点就是虽然整个5G和智能时代可能是未来的方向，但是由于基础设施或者商业化方案不成熟，对应的股票并不能在当时表现出自己的价值，再加上前期自己只是抱着学习的态度去炒股的，希望能在实践中学习并保留资产，所以就做了快速止损的操作。&lt;/p&gt;

&lt;p&gt;不过从现在来看，那几只股票到现在为止都是涨的(也再一次说明2019年市场没有太差).&lt;/p&gt;

&lt;p&gt;港股过去一年买卖过几家，比较出名的有&lt;code&gt;新东方在线&lt;/code&gt;,&lt;code&gt;美团&lt;/code&gt;,&lt;code&gt;小米&lt;/code&gt;,&lt;code&gt;呷哺呷哺&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;新东方在线我看中的是当前的K12领域，并且有母公司新东方已经在美股上市，线下资源较为丰富，在移动互联网+短视频的双重作用下，新东方在线应该不会太差，事实也证明了它非常不错(我当时10港币买的最后11港币卖出，当前是25港币😅)。&lt;/p&gt;

&lt;p&gt;美团是因为属于互联网新股，并且属于占领整个年轻人生活生态的一家公司，在整个懒人时代，美团外卖着实帮助了很多年轻人，想着整体的价值逻辑和我的认知逻辑比较相符，所以也买卖了一波(50港币买入，60港币卖出，当前是111港元😓)。&lt;/p&gt;

&lt;p&gt;现在持仓的还有小米和呷哺呷哺，不要问我为什么那么快就轻易卖了前两只股票，当然和自己的认知有一定关系，但其实更多在于子弹不够吧，还是前面提到的逻辑，我比较看好智能时代，而小米的整个生态规划都是相当符合我的认知的，所以为了能够赶时机重仓小米，在前两只还不赔的情况下作了快速调仓，然而小米却一度让它的股民失望，其实原因还是在于智能时代的基础设施和条件不具备，导致当下的反应比较疲，不过从当前的状态来看，也算是还不错(目前持仓收益40%左右，而且我相信它会继续上涨)。&lt;/p&gt;

&lt;p&gt;呷哺呷哺，想必在北京的小伙伴都比较熟悉，一个时尚小火锅，当年没毕业时，就听一位老师说过呷哺呷哺，后来这几年也经常去吃，在时尚火锅里算是性价比比较高的，后来开始炒股后一直关注该股票，直到后来到达心里认为的底部价格后开始入仓(当前收益30%左右)。&lt;/p&gt;

&lt;p&gt;美股过去一年买卖的比较多，当然也赔的比较多，当前还持有的欧朋、趣店、蔚来、蘑菇街、如涵控股、京东，不过因为过程中的心理问题，现在几乎全部清仓。&lt;/p&gt;

&lt;p&gt;美股是最开始玩的，最早是因为在京东工作(讲真，当时看到京东做的很多事情，觉得都特别有价值)，就开始买卖自家的股票，但后来发生一些列乌龙事件，在去年年初市值暴跌(最低19刀)，不过到现在整个价值也算平稳(40刀)。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;蔚来&lt;/code&gt;是看好电动汽车，毕竟属于国产领域的特斯拉，个人觉得在电动车市场，还算是相当不错的。&lt;code&gt;如涵控股&lt;/code&gt;是看好整个网红电商经济，经济的本质是交易，而整个电商经济中除了品牌效益之外通过网红带货也是一个相当不错的模式(这个其实和当前的直播带货我认为是一套逻辑)，而这两只股票都因为曾经跌到太低，心里接受不了而在初涨时出仓，当前价格都远超于当时卖出价格。&lt;/p&gt;

&lt;p&gt;剩下的几只股票均为无脑买入，为啥叫无脑买入呢，就是关注了几天股票，发现跌了很多，个人感觉应该可以抄底了，但往往我们个人投资者是无法判断低点的，所以整个美股市场当前整体还是赔着。&lt;/p&gt;

&lt;p&gt;从过去一年的股票交易经历中，我也总结了几点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;永远不要抄底，因为散户永远不知道低点在哪里&lt;/li&gt;
&lt;li&gt;炒股过程中&lt;code&gt;逻辑&amp;gt;股票指标&amp;gt;股票相关数据&amp;gt;财报结论&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;要努力工作，先要保证有足够的资金池&lt;/li&gt;
&lt;li&gt;普通人炒股还是要关注价值投资&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，一句话总结就是&lt;code&gt;&amp;quot;你赚的前都是你对这个世界认知的变现；你赔的每一分钱，都是因为你还不太了解这个世界&amp;quot;.&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;过去的半年，不论是在工作、生活还是其他方面对我来说都算得上收获颇丰，希望把这些思考和感受写下来来不断鞭策自己，同时希望2020年能够更上一层路。&lt;/p&gt;

&lt;p&gt;也希望有志青年(技术从业者，理财爱好者，跑步爱好者)一起交流，一起学习，共同成长。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwgy1gb01r8pzz7j30u01h9qac.jpg&#34; alt=&#34;看到这了，领个红包再走吧&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang中的逃逸分析</title>
      <link>https://bgbiao.top/post/golang-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/golang-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;背景:说实话，使用Golang来作为日常的cmdline程序开发也有一两年了，之前作为一名Ops来说，会使用Golang去开发一些常用的工具来实现生产环境的各种常规操作以及日常运维管理，而对于整个Golang语言内部的一些细节都不甚了解。但随着对Ops要求的提高，以及向SRE理念转型的需要，我们越来越需要深入理解一些内部底层的原理，这样在我们去管理的我们的Kubernetes集群，或者其他的一些内部系统时才能真正做到游刃有余。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在Golang中，一个对象最终是分配到&lt;code&gt;堆&lt;/code&gt;还是&lt;code&gt;栈&lt;/code&gt;呢，接下来我们就一起通过&lt;code&gt;逃逸分析&lt;/code&gt;来一起学习学习。&lt;/p&gt;

&lt;h3 id=&#34;概念介绍&#34;&gt;概念介绍&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;逃逸分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;逃逸分析&lt;/code&gt;是编译器用来确定由程序创建的值所处位置的过程。具体来说，&lt;code&gt;编译器执行静态代码分析&lt;/code&gt;，以确定是否可以将值放在构造函数的&lt;code&gt;栈(帧)&lt;/code&gt;上，或者该值是否必须&lt;code&gt;逃逸&lt;/code&gt;到&lt;code&gt;堆&lt;/code&gt;上。&lt;/p&gt;

&lt;p&gt;所以，更通俗一点讲，逃逸分析就是确定一个对象是要放在&lt;code&gt;堆&lt;/code&gt;还是&lt;code&gt;栈&lt;/code&gt;上，一般遵循如下规则:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.是否有非局部调用(对象定义之外的调用).即:如果有可能被&lt;code&gt;引用&lt;/code&gt;，那通常会被分配到堆上，否则就在&lt;code&gt;栈上&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2.如果对象太大(即使没有被引用),无法放在栈区也是可能放到&lt;code&gt;堆&lt;/code&gt;上的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总结起来就是: &lt;code&gt;如果在函数外部引用，必定在堆中分配;如果没有外部引用，优先在栈中分配;如果一个函数返回的是一个（局部）变量的地址，那么这个变量就发生逃逸&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;避免逃逸的好处:&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.减少gc的压力，不逃逸的对象分配在栈上，当函数返回时就回收了资源，不需要gc标记清除&lt;/li&gt;
&lt;li&gt;2.逃逸分析完后可以确定哪些变量可以分配在栈上，栈的分配比堆快，性能好(系统开销少)&lt;/li&gt;
&lt;li&gt;3.减少动态分配所造成的内存碎片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;如何进行逃逸分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; Golang程序中是在编译阶段确定逃逸的，而非运行时，因此我们可以使用&lt;code&gt;go build&lt;/code&gt;的相关工具来进行逃逸分析.&lt;/p&gt;

&lt;p&gt;分析工具:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.通过编译工具查看详细的逃逸分析过程(&lt;code&gt;go build -gcflags &#39;-m -l&#39; main.go&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;2.通过反编译命令查看&lt;code&gt;go tool compile -S main.go&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;编译参数介绍(-gcflags):&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-N&lt;/code&gt;: 禁止编译优化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;: 禁止内联(可以有效减少程序大小)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;: 逃逸分析(最多可重复四次)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-benchmem&lt;/code&gt;: 压测时打印内存分配统计&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;堆&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;堆是除栈之外的第二个内存区域，用于存储值，&lt;code&gt;全局变量、内存占用大的局部变量、发生了逃逸的局部变量存在的地方就是堆&lt;/code&gt;，这块的内存没有特定的结构，也没有固定大小，可以根据需要进行调整(但也造成管理成本)，因此堆不像栈那样是自清理的，使用这个内存的成本更大(一般各个语言都会有自己的GC机制，在Golang中会使用&lt;code&gt;三色标记法&lt;/code&gt;来进行堆内存的垃圾回收)。&lt;/p&gt;

&lt;p&gt;首先，成本与垃圾收集器(GC)有关，垃圾收集器必须参与进来以保持该区域的清洁。当GC运行时，它将使用25%的可用CPU资源。此外，它可能会产生微秒级的“stop the world”延迟。拥有GC的好处是你不需要担心内存的管理问题，因为内存管理是相当复杂、也容易出错的。&lt;/p&gt;

&lt;p&gt;堆上的值构成Go中的内存分配。这些分配对GC造成压力，因为堆中不再被指针引用的每个值都需要删除。需要检查和删除的值越多，GC每次运行时必须执行的工作就越多。因此，GC算法一直在努力在堆的大小分配和运行速度之间寻求平衡。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;堆是进程级别的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;栈&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在程序中，每个函数块都会有自己的&lt;code&gt;内存区域&lt;/code&gt;用来存自己的&lt;code&gt;局部变量&lt;/code&gt;（内存占用少）、返回&lt;code&gt;地址、返回值&lt;/code&gt;之类的数据，这一块内存区域有特定的结构和寻址方式，&lt;code&gt;大小在编译时已经确定&lt;/code&gt;，寻址起来也十分迅速，开销很少。&lt;/p&gt;

&lt;p&gt;这块内存地址称为&lt;code&gt;栈&lt;/code&gt;，&lt;code&gt;栈是线程级别&lt;/code&gt;的，&lt;code&gt;大小在创建的时候已经确定&lt;/code&gt;，所以当数据太大的时候，就会发生&amp;rdquo;stack overflow&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;在Golang程序中，函数都是运行在&lt;code&gt;栈&lt;/code&gt;上的，在栈上声明临时变量分配内存，函数运行完成后回收该段栈空间，并且每个函数的栈空间都是独立的，其他代码不可访问的。但是在某些场景下，&lt;code&gt;栈上的空间&lt;/code&gt;需要在该函数被释放后依旧能访问到(函数外调用)，这时候就涉及到内存的逃逸了，而逃逸往往会对应对象的内存分配到堆上.&lt;/p&gt;

&lt;h3 id=&#34;逃逸分析示例&#34;&gt;逃逸分析示例&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.示例-参数泄露&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;测试代码&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 定义一个简单的结构体
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;webSite&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 获取用户信息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetUserInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 获取用户名称
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 初始化user结构体的指针对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;BGBiao&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://bgbiao.top&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;GetUserInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;GetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;使用&lt;code&gt;逃逸分析&lt;/code&gt;来进行内存分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ go build -gcflags &amp;#39;-m -m  -l&amp;#39; taoyi.go
# command-line-arguments
./taoyi.go:21:18: leaking param: u to result ~r1 level=0
./taoyi.go:25:14: leaking param: u to result ~r1 level=1
./taoyi.go:31:31: main &amp;amp;user literal does not escape&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;由上述输出的&lt;code&gt;leaking param&lt;/code&gt;可以看到，在&lt;code&gt;GetUserInfo&lt;/code&gt;和&lt;code&gt;GetName&lt;/code&gt;函数中的&lt;code&gt;指针变量u&lt;/code&gt;是一个泄露参数，在两个函数中均没有对&lt;code&gt;u&lt;/code&gt;进行变量操作，就直接返回了变量内容，因此最后的该变量&lt;code&gt;user&lt;/code&gt;并没有发生逃逸，&lt;code&gt;&amp;amp;user&lt;/code&gt;对象还是作用在了&lt;code&gt;main()&lt;/code&gt;函数中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.示例-未知类型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个时候，我们把上面的代码稍微改动一下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;....
....
func main() {
    user := &amp;amp;user{&amp;#34;BGBiao&amp;#34;,18,&amp;#34;https://bgbiao.top&amp;#34;}
    fmt.Println(GetUserInfo(user))
    fmt.Println(GetName(user))
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;再次进行逃逸分析:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ go build -gcflags &amp;#39;-m -m  -l&amp;#39; taoyi.go
# command-line-arguments
./taoyi.go:21:18: leaking param: u to result ~r1 level=0
./taoyi.go:25:14: leaking param: u to result ~r1 level=1
./taoyi.go:31:31: &amp;amp;user literal escapes to heap
./taoyi.go:32:16: main ... argument does not escape
./taoyi.go:32:28: GetUserInfo(user) escapes to heap
./taoyi.go:33:16: main ... argument does not escape
./taoyi.go:33:24: GetName(user) escapes to heap&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;由上可以发现我们的指针对象&lt;code&gt;&amp;amp;user&lt;/code&gt;在该程序中发生了逃逸，具体是在&lt;code&gt;GetUserInfo(user)&lt;/code&gt;和&lt;code&gt;GetName(user)&lt;/code&gt;发生了逃逸.&lt;/p&gt;

&lt;p&gt;这是为什么呢？怎么加了个&lt;code&gt;fmt.Println&lt;/code&gt;之后对象就发生了逃逸呢?&lt;/p&gt;

&lt;p&gt;其实主要原因为&lt;code&gt;fmt.Println&lt;/code&gt;函数的原因:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;func Println(a ...interface{}) (n int, err error)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;我们可以看到&lt;code&gt;fmt.Println(a)&lt;/code&gt;函数中入参为&lt;code&gt;interface{}&lt;/code&gt;类型，在编译阶段编译器无法确定其具体的类型。因此会产生逃逸，最终分配到堆上(最本质的原因是interface{}类型一般情况下底层会进行&lt;code&gt;reflect&lt;/code&gt;，而使用的&lt;code&gt;reflect.TypeOf(arg).Kind()&lt;/code&gt;获取接口类型对象的底层数据类型时发生了堆逃逸，最终就会反映为当入参是空接口类型时发生了逃逸)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.示例-指针&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;此时，我们再小改点代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;// 返回结构体对象的指针，此时就会产生逃逸
func GetUserInfo(u user) (*user) {
    return &amp;amp;u
}

func main() {
    user := user{&amp;#34;BGBiao&amp;#34;,18,&amp;#34;https://bgbiao.top&amp;#34;}
    GetUserInfo(user)
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;逃逸分析:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ go build -gcflags &amp;#39;-m -m  -l&amp;#39; taoyi.go
# command-line-arguments
./taoyi.go:21:18: moved to heap: u

# 查看汇编代码(可以看到有个CALL	runtime.newobject(SB)的系统调用)
$ go tool compile -S taoyi.go | grep taoyi.go:21
	0x0000 00000 (taoyi.go:21)	TEXT	&amp;#34;&amp;#34;.GetUserInfo(SB), ABIInternal, $40-48
	0x0000 00000 (taoyi.go:21)	MOVQ	(TLS), CX
	0x0009 00009 (taoyi.go:21)	CMPQ	SP, 16(CX)
	0x000d 00013 (taoyi.go:21)	JLS	147
	0x0013 00019 (taoyi.go:21)	SUBQ	$40, SP
	0x0017 00023 (taoyi.go:21)	MOVQ	BP, 32(SP)
	0x001c 00028 (taoyi.go:21)	LEAQ	32(SP), BP
	0x0021 00033 (taoyi.go:21)	FUNCDATA	$0, gclocals·fb57040982f53920ad6a8ad662a1594f(SB)
	0x0021 00033 (taoyi.go:21)	FUNCDATA	$1, gclocals·263043c8f03e3241528dfae4e2812ef4(SB)
	0x0021 00033 (taoyi.go:21)	FUNCDATA	$2, gclocals·9fb7f0986f647f17cb53dda1484e0f7a(SB)
	0x0021 00033 (taoyi.go:21)	PCDATA	$0, $1
	0x0021 00033 (taoyi.go:21)	PCDATA	$1, $0
	0x0021 00033 (taoyi.go:21)	LEAQ	type.&amp;#34;&amp;#34;.user(SB), AX
	0x0028 00040 (taoyi.go:21)	PCDATA	$0, $0
	0x0028 00040 (taoyi.go:21)	MOVQ	AX, (SP)
	0x002c 00044 (taoyi.go:21)	CALL	runtime.newobject(SB)
	0x0031 00049 (taoyi.go:21)	PCDATA	$0, $1
	0x0031 00049 (taoyi.go:21)	MOVQ	8(SP), AX
	0x0036 00054 (taoyi.go:21)	PCDATA	$0, $-2
	0x0036 00054 (taoyi.go:21)	PCDATA	$1, $-2
	0x0036 00054 (taoyi.go:21)	CMPL	runtime.writeBarrier(SB), $0
	0x003d 00061 (taoyi.go:21)	JNE	104
	0x003f 00063 (taoyi.go:21)	MOVQ	&amp;#34;&amp;#34;.u+48(SP), CX
	0x0044 00068 (taoyi.go:21)	MOVQ	CX, (AX)
	0x0047 00071 (taoyi.go:21)	MOVUPS	&amp;#34;&amp;#34;.u+56(SP), X0
	0x004c 00076 (taoyi.go:21)	MOVUPS	X0, 8(AX)
	0x0050 00080 (taoyi.go:21)	MOVUPS	&amp;#34;&amp;#34;.u+72(SP), X0
	0x0055 00085 (taoyi.go:21)	MOVUPS	X0, 24(AX)
	0x0068 00104 (taoyi.go:21)	PCDATA	$0, $-2
	0x0068 00104 (taoyi.go:21)	PCDATA	$1, $-2
	0x0068 00104 (taoyi.go:21)	MOVQ	AX, &amp;#34;&amp;#34;.&amp;amp;u+24(SP)
	0x006d 00109 (taoyi.go:21)	LEAQ	type.&amp;#34;&amp;#34;.user(SB), CX
	0x0074 00116 (taoyi.go:21)	MOVQ	CX, (SP)
	0x0078 00120 (taoyi.go:21)	MOVQ	AX, 8(SP)
	0x007d 00125 (taoyi.go:21)	LEAQ	&amp;#34;&amp;#34;.u+48(SP), CX
	0x0082 00130 (taoyi.go:21)	MOVQ	CX, 16(SP)
	0x0087 00135 (taoyi.go:21)	CALL	runtime.typedmemmove(SB)
	0x0091 00145 (taoyi.go:21)	JMP	89
	0x0093 00147 (taoyi.go:21)	NOP
	0x0093 00147 (taoyi.go:21)	PCDATA	$1, $-1
	0x0093 00147 (taoyi.go:21)	PCDATA	$0, $-1
	0x0093 00147 (taoyi.go:21)	CALL	runtime.morestack_noctxt(SB)
	0x0098 00152 (taoyi.go:21)	JMP	0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;由以上输出可以看到在&lt;code&gt;GetUserInfo(u user)&lt;/code&gt;函数中的对象u已经被移到&lt;code&gt;堆&lt;/code&gt;上了，这是因为该函数返回的是&lt;code&gt;指针对象&lt;/code&gt;，引用对象被返回到方法之外了(此时该引用对象可以在外部被调用和修改)，因此编译器会把该对象分配到堆上(否则方法结束后，局部变量被回收岂不是很惨)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.示例-综合案例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;BGBiao&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gcflags&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;does&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在上面第三个示例中我们提到，当返回对象是&lt;code&gt;指针类型&lt;/code&gt;(引用对象)时，就会发现逃逸，但上面的示例其实告诉我们虽然&lt;code&gt;*name&lt;/code&gt;是一个指针类型，但是并未发生逃逸，这是因为&lt;code&gt;该引用类型未被外部使用&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;但是又如第二个示例中所说，如果我们在上面的示例中增加&lt;code&gt;fmt.Println(name)&lt;/code&gt;后，会发现该实例又会出现逃逸.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;:虽然当使用fmt.Println的时候又会出现逃逸，但是当使用fmt.Println(*name)和fmt.Println(name)，也是不同的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;demo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;BGBiao&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gcflags&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;does&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;argument&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;does&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;escapes&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;heap&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;由上述输出可看到，当使用引用类型来获取底层的值时，在&lt;code&gt;fmt.Println&lt;/code&gt;的入参处&lt;code&gt;*name&lt;/code&gt;发生了逃逸.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;demo2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;BGBiao&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gcflags&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;escapes&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;heap&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;argument&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;does&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;taoyi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;escapes&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;heap&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;而这次我们使用&lt;code&gt;fmt.Println(name)&lt;/code&gt;来输出底层值，就会发现变量&lt;code&gt;name&lt;/code&gt;在初始化的时候就会出现逃逸&lt;code&gt;new(string)&lt;/code&gt;，&lt;/p&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;通过上面的概念和实例分析，我们基本知道了逃逸分析的概念和规则，并且大概知道何时，那种对象会被分配到堆或栈内存中，在实际情况中可能情况会更加复杂，需要具体分析。&lt;/p&gt;

&lt;p&gt;不过，有如下几点可能在我们实际使用过程中要注意下:
- 静态分配到栈上，性能一定比动态分配到堆上好
- 底层分配到堆，还是栈。实际上对你来说是透明的，不需要过度关心
- 每个 Go 版本的逃逸分析都会有所不同（会改变，会优化)
- 直接通过&lt;code&gt;go build -gcflags &#39;-m -l&#39;&lt;/code&gt; 就可以看到逃逸分析的过程和结果
- 到处都用&lt;code&gt;指针传递并不一定是最好的&lt;/code&gt;，要用对
- map &amp;amp; slice 初始化时，预估容量，避免由扩展导致的内存分配。但是如果太大（10000）也会逃逸，因为栈的空间是有限的&lt;/p&gt;

&lt;h3 id=&#34;思考&#34;&gt;思考&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;函数传递指针真的比传值效率高吗？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们知道传递指针可以减少底层值的拷贝，可以提高效率，但是如果拷贝的数据量小，由于指针传递会产生逃逸，可能会使用堆，也可能会增加GC的负担，所以传递指针不一定是高效的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;内存碎片化问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;实际项目基本都是通过 &lt;code&gt;c := make([]int, 0, l)&lt;/code&gt; 来申请内存，长度都是不确定的，自然而然这些变量都会申请到堆上面了.&lt;/p&gt;

&lt;p&gt;Golang使用的垃圾回收算法是『标记——清除』.&lt;/p&gt;

&lt;p&gt;简单得说，就是程序要从操作系统申请一块比较大的内存，内存分成小块，通过链表链接。&lt;/p&gt;

&lt;p&gt;每次程序申请内存，就从链表上面遍历每一小块，找到符合的就返回其地址，没有合适的就从操作系统再申请。如果申请内存次数较多，而且申请的大小不固定，就会引起内存碎片化的问题。&lt;/p&gt;

&lt;p&gt;申请的堆内存并没有用完，但是用户申请的内存的时候却没有合适的空间提供。这样会遍历整个链表，还会继续向操作系统申请内存。这就能解释我一开始描述的问题，申请一块内存变成了慢语句。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>深入Gin框架内幕2</title>
      <link>https://bgbiao.top/post/%E6%B7%B1%E5%85%A5gin%E6%A1%86%E6%9E%B6%E5%86%85%E5%B9%952/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/%E6%B7%B1%E5%85%A5gin%E6%A1%86%E6%9E%B6%E5%86%85%E5%B9%952/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;在上一篇文章&lt;a href=&#34;https://bgbiao.top/post/%E6%B7%B1%E5%85%A5gin%E6%A1%86%E6%9E%B6%E5%86%85%E5%B9%95/&#34;&gt;深入gin框架内幕(一)&lt;/a&gt;中，主要介绍了Gin框架中是如何创建一个HTTP服务以及内部的核心结构和常用的一些结构体方法，并在最后以一个简单的示例来详细讲解Gin框架内部具体是如何运行的，但是在最后我们会发现使用了一个&lt;code&gt;Context&lt;/code&gt;引用对象的一些方法来返回具体的HTTP响应数据，在本篇文章中，我们将继续学习和分析Gin框架内幕。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在开始分析之前，我们先简单回顾一下上一个章节中讲到的Gin框架中的几个核心的结构.&lt;/p&gt;

&lt;h3 id=&#34;gin框架中的几个核心结构&#34;&gt;Gin框架中的几个核心结构&lt;/h3&gt;

&lt;p&gt;Gin框架中的几个重要的模型:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Engine&lt;/code&gt;: 用来初始化一个&lt;code&gt;gin&lt;/code&gt;对象实例，在该对象实例中主要包含了一些框架的基础功能，比如日志，中间件设置，路由控制(组)，以及handlercontext等相关方法.&lt;a href=&#34;https://github.com/gin-gonic/gin/blob/master/gin.go#L54&#34;&gt;源码文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Router&lt;/code&gt;: 用来定义各种路由规则和条件，并通过HTTP服务将具体的路由注册到一个由context实现的handler中&lt;/li&gt;
&lt;li&gt;Context: &lt;code&gt;Context&lt;/code&gt;是框架中非常重要的一点，它允许我们在中间件间共享变量，管理整个流程，验证请求的json以及提供一个json的响应体. 通常情况下我们的业务逻辑处理也是在整个Context引用对象中进行实现的.&lt;/li&gt;
&lt;li&gt;Bind: 在Context中我们已经可以获取到请求的详细信息，比如HTTP请求头和请求体，但是我们需要根据不同的HTTP协议参数来获取相应的格式化
数据来处理底层的业务逻辑，就需要使用&lt;code&gt;Bind&lt;/code&gt;相关的结构方法来解析context中的HTTP数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;1-gin框架对http响应数据的处理&#34;&gt;1.Gin框架对HTTP响应数据的处理&lt;/h4&gt;

&lt;p&gt;我们在&lt;a href=&#34;https://bgbiao.top/post/%E6%B7%B1%E5%85%A5gin%E6%A1%86%E6%9E%B6%E5%86%85%E5%B9%95/&#34;&gt;深入Gin框架内幕(一)&lt;/a&gt;中，以一个简单的Gin实例来具体讲解它内部是如何创建一个Http服务，并且注册一个路由来接收用户的请求，在示例程序中我们使用了&lt;code&gt;Context&lt;/code&gt;引用对象的&lt;code&gt;String&lt;/code&gt;方法来处理HTTP服务的数据响应，所以在整个Gin框架中紧跟&lt;code&gt;Router&lt;/code&gt;模型结构的就要属&lt;code&gt;Context&lt;/code&gt;结构了，该结构体主要用来处理整个HTTP请求的上下文数据，也是我们在开发HTTP服务中相对比较重要的一个结构体了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# 深入Gin框架内幕(一)中的示例
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;$ cat case1.go
package main
import (
    &amp;#34;net/http&amp;#34;

    &amp;#34;github.com/gin-gonic/gin&amp;#34;
)
func main() {
    ginObj := gin.Default()
    ginObj.Any(&amp;#34;/hello&amp;#34;,func(c *gin.Context){
        c.String(http.StatusOK,&amp;#34;Hello BGBiao.&amp;#34;)
    })
    ginObj.Run(&amp;#34;localhost:8080&amp;#34;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;我们可以看到，在使用Gin框架后，我们只需要很简单的代码，即可以快速运行一个返回&lt;code&gt;Hello BGBiao.&lt;/code&gt;的HTTP服务，而在&lt;code&gt;ginObj.Any&lt;/code&gt;方法中，我们传入了一个参数为&lt;code&gt;Context&lt;/code&gt;引用类型的匿名函数，并在该函数内部采用&lt;code&gt;String(code,data)&lt;/code&gt;方法来处理HTTP服务的响应数据(返回Hello BGBiao字符串)，这个时候，你可能会想，我们在企业内部都是前后端分离，通常情况下后端仅会提供&lt;code&gt;RESTful API&lt;/code&gt;，并通过&lt;code&gt;JSON&lt;/code&gt;格式的数据和前端进行交互，那么Gin是如何处理其他非字符串类型的数据响应呢，这也是我们接下来要主要讲的&lt;code&gt;Context&lt;/code&gt;结构模型。&lt;/p&gt;

&lt;h4 id=&#34;2-gin框架中的context结构体&#34;&gt;2.Gin框架中的Context结构体&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 在Gin框架中由&lt;code&gt;Router&lt;/code&gt;结构体来负责路由和方法(URL和HTTP方法)的绑定，内的Handler采用&lt;code&gt;Context&lt;/code&gt;结构体来处理具体的HTTP数据传输方式，比如HTTP头部，请求体参数，状态码以及响应体和其他的一些常见HTTP行为。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Context结构体&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;type Context struct {
    // 一个包含size,status和ResponseWriter的结构体
    writermem responseWriter
    // http的请求体(指向原生的http.Request指针)
    Request   *http.Request
    // ResonseWriter接口
    Writer    ResponseWriter

    // 请求参数[]{&amp;#34;Key&amp;#34;:&amp;#34;Value&amp;#34;}
    Params   Params
    handlers HandlersChain
    index int8
    // http请求的全路径地址
    fullPath string
    // gin框架的Engine结构体指针
    engine   *Engine
    // 每个请求的context中的唯一键值对
    Keys map[string]interface{}
    // 绑定到所有使用该context的handler/middlewares的错误列表
    Errors errorMsgs
    // 定义了允许的格式被用于内容协商(content)
    Accepted []string
    // queryCache 使用url.ParseQuery来缓存参数查询结果(c.Request.URL.Query())
    queryCache url.Values
    // formCache 使用url.ParseQuery来缓存PostForm包含的表单数据(来自POST,PATCH,PUT请求体参数)
    formCache url.Values
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Context结构体常用的一些方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;基本方法&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy(): 返回当前正在使用的context的拷贝(context指针)，当这个context必须在goroutine中用时，该方法比较有用&lt;/li&gt;
&lt;li&gt;HandlerName(): 返回当前主handler的名称(比如:handler为handleGetUsers(),该方法将返回&amp;rdquo;main.handleGetUsers&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;HandlerNames(): 返回所有注册的handler的名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Handler()&lt;/code&gt;: 返回当前的主handler(&lt;code&gt;func (c *Context) Handler() HandlerFunc&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;FullPath(): 返回一个匹配路由的全路径(uri: &amp;ldquo;/user/:id&amp;rdquo;,c.FullPath() == &amp;ldquo;/user/:id&amp;rdquo; )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;http常用方法&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ClientIP() string: 返回客户端ip(该方法会解析&lt;code&gt;X-Real-IP&lt;/code&gt;,&lt;code&gt;X-Forwarded-For&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ContentType() string: 返回HTTP的Content-Type头&lt;/li&gt;
&lt;li&gt;IsWebsocket() bool: 返回是否为ws链接&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;流控相关的方法:&lt;/code&gt;
- Next(): 该方法仅被使用在middleware中，它会在被调用的handler链内部执行pending handler
- IsAborted(): 如果当前的context被终止了，该方法返回true
- Abort(): 该函数可以从正在被调用中保护pending handler. 该方法停止后不会停止当前正在执行的handler. 比如我们有一个鉴权的中间件来验证请求是否有权限，如果认证失败了(用户信息异常等)，此时调用Abort()来确保后面的handler不再被调用
- AbortWithStatus(code int): 同上，在会写入状态码。context.AbortWithStatus(401)即可表示上述的鉴权失败
- AbortWithStatusJSON(code int, jsonObj interface{}): 同上，会再加响应数据.该方法会停止整个handler链，再写入状态码和json的响应体，同时也会设置Content-Type=&amp;ldquo;application/json&amp;rdquo;
- AbortWithError(code int, err error) *Error: 同上返回错误信息&lt;/p&gt;

&lt;p&gt;&lt;code&gt;错误管理&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error(err error) *Error: 返回一些错误对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;元数据管理&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set(key string, value interface{}): 给当前这个context设置一个新的键值对&lt;/li&gt;
&lt;li&gt;Get(key string) (value interface{}, exists bool): 返回指定的key的值,以及是否存在&lt;/li&gt;
&lt;li&gt;MustGet(key string) interface{}: 返回指定key的值，不存在则panic&lt;/li&gt;
&lt;li&gt;GetString(key string) (s string): 以string类型返回指定的key&lt;/li&gt;
&lt;li&gt;GetBool(key string) (b bool): 返回分配给该key的值(bool类型)&lt;/li&gt;
&lt;li&gt;GetInt(key string) (i int):&lt;/li&gt;
&lt;li&gt;GetStringSlice(key string) (ss []string): 返回key的slice类型&lt;/li&gt;
&lt;li&gt;GetStringMap(key string) (sm map[string]interface{}): 返回interface{}类型的map结构&lt;/li&gt;
&lt;li&gt;GetStringMapString(key string) (sms map[string]string): 返回string类型的map结构&lt;/li&gt;
&lt;li&gt;GetStringMapStringSlice(key string) (smss map[string][]string): 同理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;输入数据&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Param(key string) string: 返回URL的参数值(uri_patten: &amp;ldquo;/user/:id&amp;rdquo;,url: &amp;ldquo;/user/john&amp;rdquo;,c.Param(&amp;ldquo;id&amp;rdquo;) = &amp;ldquo;john&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Query(key string) string: 返回url中的查询参数值(url: &amp;ldquo;/path?id=1234&amp;amp;name=Manu&amp;amp;value=&amp;ldquo;,c.Query(&amp;ldquo;id&amp;rdquo;)为1234,c.Query(&amp;ldquo;name&amp;rdquo;)为Manu,c.Query(&amp;ldquo;value&amp;rdquo;)为空)&lt;/li&gt;
&lt;li&gt;DefaultQuery(key, defaultValue string) string: 返回url中的查询参数的默认值(同上，但是c.Query(&amp;ldquo;value&amp;rdquo;)就没有值，该方法可以设置默认值)&lt;/li&gt;
&lt;li&gt;GetQuery(key string) (string, bool): 同Query()方法，并且会返回状态，如果对应的key不存在，返回(&amp;ldquo;&amp;rdquo;,false)&lt;/li&gt;
&lt;li&gt;QueryArray(key string) []string: 返回指定key的对应的array(slice的长度取决于给定key的参数的数量)&lt;/li&gt;
&lt;li&gt;GetQueryArray(key string) ([]string, bool): 同上，会返回状态&lt;/li&gt;
&lt;li&gt;QueryMap(key string) map[string]string: 返回指定key对应map类型&lt;/li&gt;
&lt;li&gt;GetQueryMap(key string) (map[string]string, bool): 同上，并且会返回状态&lt;/li&gt;
&lt;li&gt;PostForm(key string) string: 该方法返回一个从POST 请求的urlencode表单或者multipart表单数据，不存在时返回空字符串&lt;/li&gt;
&lt;li&gt;DefaultPostForm(key, defaultValue string) string: 同上，key不存在时返回默认值&lt;/li&gt;
&lt;li&gt;GetPostForm(key string) (string, bool): 同PostForm()方法，并且会返回状态&lt;/li&gt;
&lt;li&gt;PostFormArray(key string) []string: 该方法返回指定key的字符串类型的slice&lt;/li&gt;
&lt;li&gt;GetPostFormArray(key string) ([]string, bool): 同上，并返回状态&lt;/li&gt;
&lt;li&gt;PostFormMap(key string) map[string]string: 返回指定key的map类型&lt;/li&gt;
&lt;li&gt;GetPostFormMap(key string) (map[string]string, bool): 同上，并返回状态&lt;/li&gt;
&lt;li&gt;FormFile(name string) (*multipart.FileHeader, error): 返回指定key的第一个文件(用作文件上传)&lt;/li&gt;
&lt;li&gt;MultipartForm() (*multipart.Form, error): 该方法解析multipart表单，包含file文件上传&lt;/li&gt;
&lt;li&gt;SaveUploadedFile(file *multipart.FileHeader, dst string) error: 该方法用来上传指定的文件头到目标路径(dst)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Bind家族相关方法&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bind(obj interface{}) error: 自动解析&lt;code&gt;Content-Type&lt;/code&gt;并绑定到指定的binding引擎&lt;/li&gt;
&lt;li&gt;BindJSON(obj interface{}) error: 同上，binding引擎为&lt;code&gt;binding.JSON&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BindXML(obj interface{}) error:&lt;/li&gt;
&lt;li&gt;BindQuery(obj interface{}) error:&lt;/li&gt;
&lt;li&gt;BindYAML(obj interface{}) error:&lt;/li&gt;
&lt;li&gt;BindHeader(obj interface{}) error:&lt;/li&gt;
&lt;li&gt;BindUri(obj interface{}) error: 使用&lt;code&gt;binding.Uri&lt;/code&gt;来绑定传递的结构体指针&lt;/li&gt;
&lt;li&gt;MustBindWith(obj interface{}, b binding.Binding) error: 使用指定的binding引擎来绑定传递的结构体指针(当有任何错误时，终止请求并返回400)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ShouldBind家族相关方法&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ShouldBind(obj interface{}) error: 同上述的Bind()方法，但是该方法在json结构无效时不会返回400&lt;/li&gt;
&lt;li&gt;ShouldBindJSON(obj interface{}) error:&lt;/li&gt;
&lt;li&gt;ShouldBindXML(obj interface{}) error:&lt;/li&gt;
&lt;li&gt;ShouldBindQuery(obj interface{}) error:&lt;/li&gt;
&lt;li&gt;ShouldBindYAML(obj interface{}) error:&lt;/li&gt;
&lt;li&gt;ShouldBindHeader(obj interface{}) error:&lt;/li&gt;
&lt;li&gt;ShouldBindUri(obj interface{}) error:&lt;/li&gt;
&lt;li&gt;ShouldBindWith(obj interface{}, b binding.Binding) error: 等同于MustBindWith()方法&lt;/li&gt;
&lt;li&gt;ShouldBindBodyWith(obj interface{}, bb binding.BindingBody) (err error): 和ShouldBindWith()方法相似，但是他会存储请求体到context中，当下次调用时可以重用(因为该方法是在binding之前读取body，因此在你只使用一次时，为了更好的性能还是使用ShouldBindWith会比较好)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;HTTP响应相关的方法&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Status(code int): 设置http的响应码&lt;/li&gt;
&lt;li&gt;Header(key, value string): 是&lt;code&gt;c.Writer.Header().Set(key, value)&lt;/code&gt;的简单实现，在响应体重写入一个header，如果value为空，则相当于调用了&lt;code&gt;c.Writer.Header().Del(key)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GetHeader(key string) string: 返回请求体重的header&lt;/li&gt;
&lt;li&gt;GetRawData() ([]byte, error): 返回流式数据&lt;/li&gt;
&lt;li&gt;SetCookie(name, value string, maxAge int, path, domain string, secure, httpOnly bool): 该方法将设置一个Set-Cookie到ResponseWriter的头中(注意:name必须是一个合法可用的名称,无效的coookie可能会被丢弃)&lt;/li&gt;
&lt;li&gt;Cookie(name string) (string, error): 返回名称为name的cookie&lt;/li&gt;
&lt;li&gt;Render(code int, r render.Render): 该方法写入响应头并调用render.Render去渲染数据&lt;/li&gt;
&lt;li&gt;HTML(code int, name string, obj interface{}): 该方法使用指定文件模板名称去渲染http模板(同时会更新状态码并设置Content-Type as &amp;ldquo;text/html&amp;rdquo;.)&lt;/li&gt;
&lt;li&gt;IndentedJSON(code int, obj interface{}): 该方法会序列化对象obj为一个pretty JSON 数据到响应体中，同时设置Content-Type as &amp;ldquo;application/json&amp;rdquo;(pretty JSON需要消耗cpu和带宽，强烈建议生产使用&lt;code&gt;Context.JSON()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;SecureJSON(code int, obj interface{}): 同上，会序列化成&lt;code&gt;Secure Json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JSONP(code int, obj interface{}):&lt;/li&gt;
&lt;li&gt;JSON(code int, obj interface{}): 序列化为JSON,并写Content-Type:&amp;ldquo;application/json&amp;rdquo;头&lt;/li&gt;
&lt;li&gt;AsciiJSON(code int, obj interface{}):&lt;/li&gt;
&lt;li&gt;PureJSON(code int, obj interface{}):&lt;/li&gt;
&lt;li&gt;XML(code int, obj interface{}): 序列化成&lt;code&gt;xml&lt;/code&gt;格式,并写Content-Type:&amp;ldquo;application/xml&amp;rdquo;&lt;/li&gt;
&lt;li&gt;YAML(code int, obj interface{}): 序列化成&lt;code&gt;yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ProtoBuf(code int, obj interface{}): 序列化成&lt;code&gt;probuf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;String(code int, format string, values &amp;hellip;interface{}): 将制定的string写入响应体&lt;/li&gt;
&lt;li&gt;Redirect(code int, location string): 重定向&lt;/li&gt;
&lt;li&gt;Data(code int, contentType string, data []byte): 写一些数据到响应体重，并更新响应码&lt;/li&gt;
&lt;li&gt;DataFromReader(code int, contentLength int64, contentType string, reader io.Reader, extraHeaders map[string]string): 写一些制定模板的数据到响应体中，并更新状态码&lt;/li&gt;
&lt;li&gt;File(filepath string): 以一种高效方式将制定文件写入响应体数据中&lt;/li&gt;
&lt;li&gt;FileAttachment(filepath, filename string): 同上，但是在客户端文件会被直接下载下来&lt;/li&gt;
&lt;li&gt;SSEvent(name string, message interface{}): 写Server-Sent Event到响应数据中&lt;/li&gt;
&lt;li&gt;Stream(step func(w io.Writer) bool) bool: 发送一个流式的响应数据并返回状态&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-gin实例示例&#34;&gt;3.Gin实例示例&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;3.1返回json格式的数据&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了解决我们在开头提到的问题，我们将使用context引用对象的JSON家族方法来处理该需求&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# 使用context来返回json格式的数据
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;$ cat case2.go
package main

import (
    &amp;#34;github.com/gin-gonic/gin&amp;#34;
)

// 我们定义一个通用的格式化的响应数据
// 在Data字段中采用空接口类型来实际存放我们的业务数据
type restData struct {
    Data        interface{}   &lt;span class=&#34;sb&#34;&gt;`json:&amp;#34;data&amp;#34;`&lt;/span&gt;
    Message     string        &lt;span class=&#34;sb&#34;&gt;`json:&amp;#34;message&amp;#34;`&lt;/span&gt;
    Status      bool          &lt;span class=&#34;sb&#34;&gt;`json:&amp;#34;status&amp;#34;`&lt;/span&gt;
}

func main() {
    // mock一个http响应数据
    restdata := &amp;amp;restData{&amp;#34;Hello,BGBiao&amp;#34;,&amp;#34;&amp;#34;,true}
    restdata1 := &amp;amp;restData{map[string]string{&amp;#34;name&amp;#34;:&amp;#34;BGBiao&amp;#34;,&amp;#34;website&amp;#34;:&amp;#34;https://bgbiao.top&amp;#34;},&amp;#34;&amp;#34;,true}

    // 使用Gin框架启动一个http接口服务
    ginObj := gin.Default()
    ginObj.GET(&amp;#34;/api/test&amp;#34;,func(c &lt;span class=&#34;ge&#34;&gt;*gin.Context){
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;       // 我们的handlerFunc中入参是一个Context结构的引用对象c
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;       // 因此我们可以使用Context中的JSON方法来返回一个json结构的数据
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;       // 可用的方法有如下几种，我们可以根据实际需求进行选择
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;       /*&lt;/span&gt;
          IndentedJSON(code int, obj interface{}): 带缩进的json(消耗cpu和mem)
          SecureJSON(code int, obj interface{}): 安全化json
          JSONP(code int, obj interface{})
          JSON(code int, obj interface{}): 序列化为JSON,并写Content-Type:&amp;#34;application/json&amp;#34;头
       */
       c.JSON(200,restdata)
    })
    ginObj.GET(&amp;#34;/api/test1&amp;#34;,func(c *gin.Context){
        c.IndentedJSON(200,restdata1)
    })

    ginObj.Run(&amp;#34;localhost:8080&amp;#34;)
}


&lt;span class=&#34;gh&#34;&gt;# 实例运行(这里成功将我们写的两个api接口进行对外暴露)
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;$ go run case2.go
....
....
[GIN-debug] GET    /api/test                 --&amp;gt; main.main.func1 (3 handlers)
[GIN-debug] GET    /api/test1                --&amp;gt; main.main.func2 (3 handlers)

&lt;span class=&#34;gh&#34;&gt;# 接口测试访问
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;$ curl localhost:8080/api/test
{&amp;#34;data&amp;#34;:&amp;#34;Hello,BGBiao&amp;#34;,&amp;#34;message&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;status&amp;#34;:true}
$ curl localhost:8080/api/test1
{
    &amp;#34;data&amp;#34;: {
        &amp;#34;name&amp;#34;: &amp;#34;BGBiao&amp;#34;,
        &amp;#34;website&amp;#34;: &amp;#34;https://bgbiao.top&amp;#34;
    },
    &amp;#34;message&amp;#34;: &amp;#34;&amp;#34;,
    &amp;#34;status&amp;#34;: true
}% &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;当然上面我们仅以JSON格式来示例，类似的方式我们可以使用&lt;code&gt;XML&lt;/code&gt;,&lt;code&gt;YAML&lt;/code&gt;,&lt;code&gt;ProtoBuf&lt;/code&gt;等方法来输出指定格式化后的数据。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.2其他常用的基本方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;在其他基本方法中我们仍然使用上述示例代码中的主逻辑，主要用来测试基本的方法.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# 我们在/api/test这个路由中增加如下两行代码
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;// 设置响应体中的自定义header(通常我们可以通过自定义头来实现一个内部标识)
c.Header(&amp;#34;Api-Author&amp;#34;,&amp;#34;BGBiao&amp;#34;)
// GetHeader方法用来获取指定的请求头，比如我们经常会使用请求中的token来进行接口的认证和鉴权
// 这里由于我们使用的restdata的指针，通过GetHeader方法获取到token赋值给Message
// ClientIP()方法用于获取客户端的ip地址
restdata.Message = fmt.Sprintf(&amp;#34;token:%s 当前有效，客户端ip:%s&amp;#34;,c.GetHeader(&amp;#34;token&amp;#34;),c.ClientIP())

&lt;span class=&#34;gh&#34;&gt;# 访问接口示例(我们可以看到在响应体中多了一个我们自定义的Api-Author头，并且我们将请求头token的值)
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;$ curl -H &amp;#39;token:xxxxxxxx&amp;#39; localhost:8080/api/test -i
HTTP/1.1 200 OK
Api-Author: BGBiao
Content-Type: application/json; charset=utf-8
Date: Sun, 12 Jan 2020 14:41:01 GMT
Content-Length: 66

{&amp;#34;data&amp;#34;:&amp;#34;Hello,BGBiao&amp;#34;,&amp;#34;message&amp;#34;:&amp;#34;token:xxxxxxxx 当前有效，客户端ip:127.0.0.1&amp;#34;,&amp;#34;status&amp;#34;:true}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.3用户数据输入&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当然到这里后，你可能还会有新的疑问，就是通常情况下，我们开发后端接口会提供一些具体的参数，通过一些具体数据提交来实现具体的业务逻辑处理，这些参数通常会分为如下三类:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用HTTP GET方法获取到的url中的一些查询参数来执行更具体的业务逻辑(比如我们查询数据的指定条数之类的)&lt;/li&gt;
&lt;li&gt;使用HTTP POST GET等其他方式以form表单方式提交的数据来验证和处理用户数据&lt;/li&gt;
&lt;li&gt;在URL中获取一些可变参数(比如通常我们的url会定义为&amp;rdquo;/api/uid/:id&amp;rdquo;来表示用户id相关的接口，这个时候通常需要获取到url中的id字段)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上的基本需求，几乎都可以在Context结构体的&lt;code&gt;输入数据&lt;/code&gt;中找到响应的方法.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;  1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;108
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;109
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;110
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;111
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;112
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;113
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;114
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;115
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;116
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;117
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# 接下来，我们依然在上述的代码中进行修改，增加如下路由
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;$ cat case2.go
....
....
    // 比如我们该接口时用来获取全部数据，但是我们希望在url中增加参数来限制数据条数
    datas := []string{&amp;#34;Golang&amp;#34;,&amp;#34;Python&amp;#34;,&amp;#34;Docker&amp;#34;,&amp;#34;Kubernetes&amp;#34;,&amp;#34;CloudNative&amp;#34;,&amp;#34;DevOps&amp;#34;}
    ginObj.GET(&amp;#34;/api/testdata&amp;#34;,func(c &lt;span class=&#34;ge&#34;&gt;*gin.Context){
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        limit := c.Query(&amp;#34;limit&amp;#34;)
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        // 其实既然这里我们已经确定需求了，当用户没有输入limit参数时我们就可以设置默认值
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        // DefaultQuery(&amp;#34;limit&amp;#34;,&amp;#34;1&amp;#34;)
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        // 同时我们其实也可以使用GetQuery方法来获取参数解析状态，即是否有对应的参数
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        // 还有QueryArray和GetQueryArray类似的方法
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        if limit != &amp;#34;&amp;#34; {
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;            num,_&lt;/span&gt; := strconv.Atoi(limit)
            restdata1.Data = datas[:num]
        }else {
            restdata1.Data = datas
        }
        c.IndentedJSON(200,restdata1)

    })

    // 使用form表单方式提交数据
    ginObj.POST(&amp;#34;/api/testdata&amp;#34;,func(c &lt;span class=&#34;ge&#34;&gt;*gin.Context){
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        // 使用c.PostForm方法来提交一个data数据
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        // 同时我们可以使用DefaultPostForm方法来给提交数据一个默认值，比如我们有些参数是希望有默认值的
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        // 当然也可以使用GetPostForm，PostFormArray，PostFormArray方法来获取多个数据和状态
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        // data := c.PostForm(&amp;#34;data&amp;#34;)
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        // datas = append(datas,data)
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        /*&lt;/span&gt; 这里可能会有个问题就是同时提交多个数据时，使用PostForm方法就会不那么好使了
        通常情况下回使用PostFormArray方法
        */
        data := c.PostFormArray(&amp;#34;data&amp;#34;)
        datas = append(datas,data...)
        restdata1.Data = datas
        c.IndentedJSON(200,restdata1)
    })

    // 获取url中的路径参数
    ginObj.GET(&amp;#34;/api/testdata/:data&amp;#34;,func(c &lt;span class=&#34;ge&#34;&gt;*gin.Context){
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        data := c.Param(&amp;#34;data&amp;#34;)
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;        for _&lt;/span&gt;,rawData := range datas {
            if data == rawData {
                restdata1.Data = data
                break
            }
        }
        if restdata1.Data != data {
            restdata1.Data = &amp;#34;&amp;#34;
            restdata1.Message = fmt.Sprintf(&amp;#34;%v 不存在&amp;#34;,data)
            restdata1.Status = false
        }
        c.IndentedJSON(200,restdata1)
    })
....
....



&lt;span class=&#34;gh&#34;&gt;# 请求示例接口
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;# 我们可以看到使用GET方法默认会获取到全部数据，但是如果有了limit参数后，我们就可以限制数据的条数
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;$ curl -H &amp;#39;token:xxxxxxxx&amp;#39; localhost:8080/api/testdata
{
    &amp;#34;data&amp;#34;: [
        &amp;#34;Golang&amp;#34;,
        &amp;#34;Python&amp;#34;,
        &amp;#34;Docker&amp;#34;,
        &amp;#34;Kubernetes&amp;#34;,
        &amp;#34;CloudNative&amp;#34;,
        &amp;#34;DevOps&amp;#34;
    ],
    &amp;#34;message&amp;#34;: &amp;#34;&amp;#34;,
    &amp;#34;status&amp;#34;: true
}%
$ curl -H &amp;#39;token:xxxxxxxx&amp;#39; &amp;#34;localhost:8080/api/testdata?limit=2&amp;#34;
{
    &amp;#34;data&amp;#34;: [
        &amp;#34;Golang&amp;#34;,
        &amp;#34;Python&amp;#34;
    ],
    &amp;#34;message&amp;#34;: &amp;#34;&amp;#34;,
    &amp;#34;status&amp;#34;: true
}%

&lt;span class=&#34;gh&#34;&gt;# 当我们使用post接口往服务提交数据时，就可以让服务端按照需求进行数据处理
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;curl -X POST  -d data=&amp;#34;vue&amp;#34; &amp;#34;localhost:8080/api/testdata&amp;#34;
{
    &amp;#34;data&amp;#34;: [
        &amp;#34;Golang&amp;#34;,
        &amp;#34;Python&amp;#34;,
        &amp;#34;Docker&amp;#34;,
        &amp;#34;Kubernetes&amp;#34;,
        &amp;#34;CloudNative&amp;#34;,
        &amp;#34;DevOps&amp;#34;,
        &amp;#34;vue&amp;#34;
    ],
    &amp;#34;message&amp;#34;: &amp;#34;&amp;#34;,
    &amp;#34;status&amp;#34;: true
}%

&lt;span class=&#34;gh&#34;&gt;# 当我们同时需要提交多份数据时，可以使用PostFormArray方法，同时提交多份数据(可以理解为批量提交)
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;$ curl -X POST -d data=&amp;#34;vue&amp;#34; -d data=&amp;#34;Rust&amp;#34; &amp;#34;localhost:8080/api/testdata&amp;#34;

&lt;span class=&#34;gh&#34;&gt;# 获取URL中的参数值
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;$ curl &amp;#34;localhost:8080/api/testdata/Golang&amp;#34;
{
    &amp;#34;data&amp;#34;: &amp;#34;Golang&amp;#34;,
    &amp;#34;message&amp;#34;: &amp;#34;&amp;#34;,
    &amp;#34;status&amp;#34;: true
}%

$ curl &amp;#34;localhost:8080/api/testdata/Java&amp;#34;
{
    &amp;#34;data&amp;#34;: &amp;#34;&amp;#34;,
    &amp;#34;message&amp;#34;: &amp;#34;Java 不存在&amp;#34;,
    &amp;#34;status&amp;#34;: false
}%&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>深入Gin框架内幕1</title>
      <link>https://bgbiao.top/post/%E6%B7%B1%E5%85%A5gin%E6%A1%86%E6%9E%B6%E5%86%85%E5%B9%951/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/%E6%B7%B1%E5%85%A5gin%E6%A1%86%E6%9E%B6%E5%86%85%E5%B9%951/</guid>
      
        <description>&lt;h3 id=&#34;gin框架介绍&#34;&gt;Gin框架介绍&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin&lt;/a&gt;是一个用 Go (Golang) 编写的 web 框架。它是一个类似于&lt;a href=&#34;https://github.com/go-martini/martini&#34;&gt;martini&lt;/a&gt;但性能更好的API框架，不同于谢大主导的&lt;a href=&#34;https://beego.me/&#34;&gt;Beego&lt;/a&gt;web框架，后者更像是Python语言中的&lt;code&gt;Django&lt;/code&gt;框架，内部包含了开发一个web程序所需的各种组件。&lt;/p&gt;

&lt;p&gt;如果你是性能和高效的追求者，我相信你会像我一样爱上Gin。&lt;/p&gt;

&lt;p&gt;同时，不同于其他Golang语言的API框架，该框架社区十分活跃，并且主程仍然在不断更新和改进，我们知道通常情况下在选择一个开源的软件或者相关库时，社区的活跃度以及项目的更新情况会非常重要(考虑到后期的维护和性能和特性问题)。&lt;/p&gt;

&lt;p&gt;另外一方面，该框架官方提供了很多简单的示例来供我们快速运行一个期望的http服务，这对于一个刚转入Golang进行业务开发的同学来说是一个非常好的开始。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gin-gonic/gin#api-examples&#34;&gt;Gin官方提供的各种HTTP服务示例&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当然我在很长一段时间也仅是去看官方示例来快速熟悉并实现自己的业务需求，但当有一些特殊的需求时通常去查看官方的具体实现来满足需求，长期如此，不仅耗时且效率极低，因此我产生了将核心源码探究一番的兴趣，希望能通过源码方式来对Gin框架有个深入的学习。&lt;/p&gt;

&lt;h3 id=&#34;gin框架中的几个核心结构&#34;&gt;Gin框架中的几个核心结构&lt;/h3&gt;

&lt;p&gt;我们都知道开发一个HTTP服务，首先需要启动一个TCP监听，然后需要有一些列的handler来处理具体的业务逻辑，最后在再将具体的业务逻辑通过HTTP协议约定和相关的Method和URL进行绑定，以此来对外提供具体功能的HTTP服务。那么在Gin框架对应的就是如下几个模型，我们将一起学习Gin的实现。&lt;/p&gt;

&lt;p&gt;Gin框架中的几个重要的模型:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Engine: 用来初始化一个&lt;code&gt;gin&lt;/code&gt;对象实例，在该对象实例中主要包含了一些框架的基础功能，比如日志，中间件设置，路由控制(组)，以及handlercontext等相关方法.&lt;a href=&#34;https://github.com/gin-gonic/gin/blob/master/gin.go#L54&#34;&gt;源码文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Router: 用来定义各种路由规则和条件，并通过HTTP服务将具体的路由注册到一个由context实现的handler中&lt;/li&gt;
&lt;li&gt;Context: &lt;code&gt;Context&lt;/code&gt;是框架中非常重要的一点，它允许我们在中间件间共享变量，管理整个流程，验证请求的json以及提供一个json的响应体. 通常情况下我们的业务逻辑处理也是在整个Context引用对象中进行实现的.&lt;/li&gt;
&lt;li&gt;Bind: 在Context中我们已经可以获取到请求的详细信息，比如HTTP请求头和请求体，但是我们需要根据不同的HTTP协议参数来获取相应的格式化数据来处理底层的业务逻辑，就需要使用&lt;code&gt;Bind&lt;/code&gt;相关的结构方法来解析context中的HTTP数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;1-gin框架中的engine结构体&#34;&gt;1.Gin框架中的Engine结构体&lt;/h4&gt;

&lt;p&gt;当我们在使用框架&lt;code&gt;[Gin](https://github.com/gin-gonic/gin)&lt;/code&gt;来创建一个HTTP服务时，首先我们需要初始化一个实例，在&lt;code&gt;Engine&lt;/code&gt;结构体中就包含了实例的一些基本属性和实例化的一些方法。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Engine结构体&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;type Engine struct {
    // 路由组，在实际开发过程中我们通常会使用路由组来组织和管理一些列的路由. 比如: /apis/,/v1/等分组路由
    RouterGroup
    // 开启自动重定向。如果当前路由没有匹配到，但是存在不带/开头的handler就会重定向. 比如: 用户输入/foo/但是存在一个/foo 就会自动重定向到该handler，并且会向客户端返回301或者307状态码(区别在于GET方法和其他方法)
    RedirectTrailingSlash bool
    // 如果开启该参数，没有handler注册时，路由会尝试自己去修复当前的请求地址. 
    // 修复流程:
    // 1.首位多余元素会被删除(../ or //); 2.然后路由会对新的路径进行不区分大小写的查找;3.如果能正常找到对应的handler，路由就会重定向到正确的handler上并返回301或者307.(比如: 用户访问/FOO 和 /..//Foo可能会被重定向到/foo这个路由上)
    RedirectFixedPath bool
    // 如果开启该参数，当当前请求不能被路由时，路由会自己去检查其他方法是否被允许.在这种情况下会响应&amp;#34;Method Not Allowed&amp;#34;，并返回状态码405; 如果没有其他方法被允许，将会委托给NotFound的handler
    HandleMethodNotAllowed bool
    // 是否转发客户端ip
    ForwardedByClientIP    bool
    // 如果开启将会在请求中增加一个以&amp;#34;X-AppEngine...&amp;#34;开头的header
    AppEngine bool
    // 如果开启将会使用url.RawPath去查找参数(默认:false)
    UseRawPath bool
    // 如果开启，请求路径将不会被转义. 如果UseRawPath为false，该参数实际上就为true(因为使用的是url.Path)
    UnescapePathValues bool
    // maxMemory参数的值(http.Request的ParseMultipartForm调用时的参数)
    MaxMultipartMemory int64
    // 是否删除额外的反斜线(开始时可解析有额外斜线的请求)
    RemoveExtraSlash bool
    // 分隔符(render.Delims表示使用HTML渲染的一组左右分隔符,具体可见html/template库)
    delims           render.Delims
    // 设置在Context.SecureJSON中国的json前缀
    secureJsonPrefix string
    // 返回一个HTMLRender接口(用于渲染HTMLProduction和HTMLDebug两个结构体类型的模板)
    HTMLRender       render.HTMLRender
    // html/template包中的FuncMap map[string]interface{} ,用来定义从名称到函数的映射
    FuncMap          template.FuncMap
    // 以下是gin框架内部定义的一些属性 
    // HandlersChain 是一个HandlerFunc 的数组(HandlerFunc其实就是一个Context的指针,Context会在下一节讲解)
    allNoRoute       HandlersChain
    allNoMethod      HandlersChain
    noRoute          HandlersChain
    noMethod         HandlersChain
    // 这里定义了一个可以临时存取对象的集合(sync.Pool是线程安全的，主要用来缓存为使用的item以减少GC压力，使得创建高效且线程安全的空闲队列)
    pool             sync.Pool
    // methodTrees是methodTree的切片(methodTree是一个包含请求方法和node指针的结构体,node是一个管理path的节点树)
    trees            methodTrees
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;HandlerFunc定义&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;// 定义了一个可以被中间件使用的handler
type HandlerFunc func(*Context)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;初始化Engine的方式&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;New()&lt;/code&gt;: 该函数返回一个默认的Engine引用实例(开启了自动重定向,转发客户端ip和禁止请求路径转义)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Default()&lt;/code&gt;: 内部调用&lt;code&gt;New()&lt;/code&gt;函数，但是增加了Logger和Recovery两个中间件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Engine对外常用的方法&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Delims(left, right string) *Engine&lt;/code&gt;: 给创建好的gin实例指定模板引擎的左右分割符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SecureJsonPrefix(prefix string) *Engine&lt;/code&gt;: 给创建好的gin实例设置secureJsonPrefixi&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SetHTMLTemplate(templ *template.Template)&lt;/code&gt;: 该方法会gin实实例绑定一个模板引擎(内部其实是设置了engine的HTMLRender属性)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LoadHTMLGlob(pattern string)&lt;/code&gt;: 该方法用来加载glob模式(类似于shell中的正则)的html模板文件，然后将结果和HTML模板引擎关联(内部调用&lt;code&gt;SetHTMLTemplate&lt;/code&gt;方法将全部匹配到模板注册进去)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LoadHTMLFiles(files ...string)&lt;/code&gt;: 该方法用上，需要指定一组模板文件名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SetFuncMap(funcMap template.FuncMap)&lt;/code&gt;: 该方法会设置一个FuncMap给template.FuncMap使用(内部其实设置了engine的FuncMap)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NoRoute(handlers ...HandlerFunc)&lt;/code&gt;: 该方法为NoRoute增加一些handler，它默认会返回404(通常在企业里，404我们会处理的比较优雅一些，比如给一些企业的静态页啥的)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NoMethod(handlers ...HandlerFunc)&lt;/code&gt;: 同上，该方法用于给NoMethod增加handler，默认返回405&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Use(middleware ...HandlerFunc) IRoutes&lt;/code&gt;: 该方法用于绑定一个全局的中间件给router. 通过该方法注册的中间件将包含在每个请求的handler chain中(比如可以在这里使用一些logger或者error相关的中间件). 在上面初始化实例的&lt;code&gt;Default()&lt;/code&gt;函数中其实内部使用了&lt;code&gt;engine.Use(Logger(), Recovery())&lt;/code&gt;来加载logger和recovery中间件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Routes() (routes RoutesInfo)&lt;/code&gt;: 该方法用来返回一个路由列表信息&lt;a href=&#34;https://github.com/gin-gonic/gin/blob/master/gin.go#L50&#34;&gt;RoutesInfo&lt;/a&gt;(一个路由信息RouteInfo中包含Method,Path,Handler,HandlerFunc)，该方法底层调用engine的trees来获取一些router必要的信息.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Run(addr ...string) (err error)&lt;/code&gt;: 该方法会绑定router到http.Server中并开启一个http监听来接收http请求. 该方法其实是&lt;code&gt;http.ListenAndServe(addr, engine)&lt;/code&gt;的简单实现. 注意:该方法除非出现错误，否则会无期限阻塞调用goroutine来接收请求(engine内部只要实现了http.ServeHTTP方法即可)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RunTLS(addr, certFile, keyFile string) (err error)&lt;/code&gt;: 同上，以https方式运行服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RunUnix(file string) (err error)&lt;/code&gt;: 同&lt;code&gt;Run(addr)&lt;/code&gt;方法，通过指定的unix socket文件运行服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RunFd(fd int) (err error)&lt;/code&gt;: 同&lt;code&gt;Run(addr)&lt;/code&gt;方法，通过指定的文件描述符(fd)来运行服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RunListener(listener net.Listener) (err error)&lt;/code&gt;: 同&lt;code&gt;Run(addr)&lt;/code&gt;，通过制定的&lt;code&gt;net.Listener&lt;/code&gt;来运行服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServeHTTP(w http.ResponseWriter, req *http.Request)&lt;/code&gt;: 该方法遵循了&lt;code&gt;http.Handler&lt;/code&gt;的接口规范，可使gin内部调用&lt;code&gt;http.ListenAndServe&lt;/code&gt;来启动一个http服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HandleContext(c *Context)&lt;/code&gt;: 该方法会重新确认一个被重写的context(可以通过c.Request.URL.Path来实现). 需要注意的是该方法可能造成context的循环使用(会绕死你,谨慎使用)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-gin框架中的router&#34;&gt;2.Gin框架中的Router&lt;/h4&gt;

&lt;p&gt;使用&lt;code&gt;Engine&lt;/code&gt;结构体中提供的相关方法，我们就可以快速的启动一个HTTP服务了，但是如何对外暴露一个URL来简单实现一个HTTP的数据传输呢，这个时候就需要使用Router中的方法了。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Gin框架中Router相关的结构体&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RouterGroup&lt;/code&gt;: 该结构体被用来在Gin内部配置一个路由，一个RouterGroup被用来关联URL前缀和一组具体的handler业务逻辑&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IRoutes&lt;/code&gt;: IRoutes是一个定了了所有路由处理的接口(包含一些常用的HTTP方法)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IRouter&lt;/code&gt;: IRouter则是一个包含单个路由和路由组的所有路由处理的接口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;RouterGroup相关结构定义&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;// RouterGroup 结构体
type RouterGroup struct {
	Handlers HandlersChain
	basePath string
	engine   *Engine
	root     bool
}

// IRoutes 接口
type IRoutes interface {
	Use(...HandlerFunc) IRoutes

	Handle(string, string, ...HandlerFunc) IRoutes
	Any(string, ...HandlerFunc) IRoutes
	GET(string, ...HandlerFunc) IRoutes
	POST(string, ...HandlerFunc) IRoutes
	DELETE(string, ...HandlerFunc) IRoutes
	PATCH(string, ...HandlerFunc) IRoutes
	PUT(string, ...HandlerFunc) IRoutes
	OPTIONS(string, ...HandlerFunc) IRoutes
	HEAD(string, ...HandlerFunc) IRoutes

	StaticFile(string, string) IRoutes
	Static(string, string) IRoutes
	StaticFS(string, http.FileSystem) IRoutes
}

// IRouter接口
type IRouter interface {
	IRoutes
	Group(string, ...HandlerFunc) *RouterGroup
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;还记得在上一节中我们的&lt;code&gt;Engine&lt;/code&gt;结构体中有一个&lt;code&gt;RouterGroup&lt;/code&gt;字段吗，该字段会在我们创建一个&lt;code&gt;Engine&lt;/code&gt;的gin实例后帮助我们初始化一个默认的&lt;code&gt;RouterGroup&lt;/code&gt;实例。&lt;/p&gt;

&lt;p&gt;比如在&lt;code&gt;Engine&lt;/code&gt;结构体的中的&lt;code&gt;New()&lt;/code&gt;函数，会初始化一个带有如下&lt;code&gt;RouterGroup&lt;/code&gt;的gin实例，并将gin实例注册到RouterGroup的&lt;code&gt;engine&lt;/code&gt;字段.&lt;a href=&#34;https://github.com/gin-gonic/gin/blob/master/gin.go#L126&#34;&gt;源码文件&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;// https://github.com/gin-gonic/gin/blob/master/gin.go#L129
		RouterGroup: RouterGroup{
			Handlers: nil,
			basePath: &amp;#34;/&amp;#34;,
			root:     true,
		},&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;RouterGroup结构体对外暴露的常用方法&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Use(middleware ...HandlerFunc) IRoutes&lt;/code&gt;: 注册一个中间件并返回Iroutes接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Group(relativePath string, handlers ...HandlerFunc) *RouterGroup&lt;/code&gt;: Group方法会创建一个新的路由组。通常我们会创建一个公共的中间件或者是具有相同前缀的路由，来归并到一个路由组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasePath() string&lt;/code&gt;: 该方法用来返回一个路由组初始路径(比如 v := router.Group(&amp;ldquo;/rest/n/v1/api&amp;rdquo;)，则v.BasePath()就是&amp;rdquo;/rest/n/v1/api&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Handle(httpMethod, relativePath string, handlers ...HandlerFunc) IRoutes&lt;/code&gt;: 该方法会使用给定的HTTP方法和URL来注册一个新的handler。(最后一个handler应该是真正的处理程序，其他的应该是在不同的路由之间共享的中间件)。&lt;code&gt;注意:内部调用了一个handle(httpMethod, relativePath string, handlers HandlersChain)的私有方法来处理核心逻辑&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST(relativePath string, handlers ...HandlerFunc) IRoutes&lt;/code&gt;: 该方法是&lt;code&gt;router.Handle(&amp;quot;POST&amp;quot;, path, handle)&lt;/code&gt;的快速实现，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET(relativePath string, handlers ...HandlerFunc) IRoutes&lt;/code&gt;: 同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE(relativePath string, handlers ...HandlerFunc) IRoutes&lt;/code&gt;: 同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATCH(relativePath string, handlers ...HandlerFunc) IRoutes&lt;/code&gt;: 同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT(relativePath string, handlers ...HandlerFunc) IRoutes&lt;/code&gt;: 同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OPTIONS(relativePath string, handlers ...HandlerFunc) IRoutes&lt;/code&gt;: 同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD(relativePath string, handlers ...HandlerFunc) IRoutes&lt;/code&gt;: 同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Any(relativePath string, handlers ...HandlerFunc) IRoutes&lt;/code&gt;: 同上，会将HTTP的所有方法都注册上去&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StaticFile(relativePath, filepath string) IRoutes&lt;/code&gt;: 该方法用来注册一台路由来服务本地文件系统的单个文件，比如:&lt;code&gt;router.StaticFile(&amp;quot;favicon.ico&amp;quot;, &amp;quot;./resources/favicon.ico&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Static(relativePath, root string) IRoutes&lt;/code&gt;: 该方法用来提供一个指定文件系统根路径的的路由，内部调用&lt;code&gt;group.StaticFS(path,Dir(root,false))&lt;/code&gt;来提供服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StaticFS(relativePath string, fs http.FileSystem) IRoutes&lt;/code&gt;: 指定文件系统(http.FileSystem)来创建一个服务&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-gin实例示例&#34;&gt;3.Gin实例示例&lt;/h4&gt;

&lt;p&gt;有了上面两个核心模型&lt;code&gt;Engine&lt;/code&gt;和&lt;code&gt;RouteGroup&lt;/code&gt;的了解，此时我们就可以通过Gin框架快速来创建一个简单HTTP服务了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.默认路由&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;测试示例&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;case1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 使用Default()函数来初始化一个gin实例(engine结构体的引用对象)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Default函数内部调用New()函数来初始化一个gin实例，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 同时使用Use(middleware ...HandlerFunc) IRoutes 方法注册了Logger和Recovery两个中间件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 在New()初始化gin实例的过程中还默认初始化了一个bathPath为&amp;#34;/&amp;#34;的RouterGroup，其实就是一个router实例
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;ginObj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 由于RouterGroup在engine结构体中是一个匿名对象，因此实例化的engine引用对象就可以直接操作RouterGroup结构体里对外暴露的所有方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 这里我们尝试注册一个包含所有HTTP方法的路由
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// https://github.com/gin-gonic/gin/blob/master/routergroup.go#L133
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 而在RouterGroup的各种对外暴露的方法中，底层调用了 Handle(httpMethod, relativePath string, handlers ...HandlerFunc) IRoutes方法，后面可以传入多个handler来处理具体的业务逻辑，当handler有多个时最后一个处理实际的业务请求，前面的handler来处理中间件和共享的组件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 而HandlerFunc 其实就是一个func(*Context)的匿名函数.Context会在下一节具体分析
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;ginObj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// context结构体相关的方法下一节会具体分析，这里是一个简单的示例
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;StatusOK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello BGBiao.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;


    &lt;span class=&#34;c1&#34;&gt;// 当所有的路由注册之后，我们可以使用gin的结构体方法(engine结构体的引用对象)来实际运行HTTP服务，以接收用户的http请求
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 我们前面说过该方法除非出现错误，否则会无期限阻塞调用goroutine来接收请求
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;ginObj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;localhost:8080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;




&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;运行实例&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;case1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WARNING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Creating&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;an&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Engine&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Logger&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Recovery&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;middleware&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;already&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attached&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WARNING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Running&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;debug&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Switch&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;release&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mode&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;production&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GIN_MODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;release&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReleaseMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GET&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;                    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;POST&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;                    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PUT&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;                    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PATCH&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;                    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAD&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;                    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;OPTIONS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;                    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;                    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CONNECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;                    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;TRACE&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;                    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Listening&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serving&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HTTP&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;localhost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;模拟请求&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;因为我们注册了全部的HTTP方法的路由&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;localhost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BGBiao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;                                                                                        
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;POST&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;localhost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BGBiao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;                                                                                        
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DELETE&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;localhost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BGBiao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;                                                                                        
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;TRACE&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;localhost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BGBiao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>关于如何挣钱的35条建议</title>
      <link>https://bgbiao.top/post/%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E6%8C%A3%E9%92%B1%E7%9A%8435%E6%9D%A1%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E6%8C%A3%E9%92%B1%E7%9A%8435%E6%9D%A1%E5%BB%BA%E8%AE%AE/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;这篇《关于如何挣钱的35条建议》，是波波从《How to Get Rich : Every Episode》[附录1]这篇长文(超过3.6万英文单词)翻译整理而来。波波非常认同原文作者Naval关于挣钱和财富的理念，有种强烈的得道恨晚的感觉～要是早十年就懂这些道理就好了，所以专门花时间翻译整理，并且放在自己的公众号里头。期望以后可以经常回顾，加深理解，并最终深入自己的mindset.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;注:&lt;/code&gt;本篇文章转自公众号&amp;rdquo;程序新视界&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.追寻财富，而不是金钱和地位(Seek Wealth, Not Money or Status)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wealth is assets that earn while you sleep.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;财富是你睡觉时都能挣钱的资产。诸如工厂，机器人，计算机软件，作家的著作，被租赁的房产，被投资进入其它领域的钱等等&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wealth buys your freedom&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;财富的目标就是换取自由，你不必在不喜欢的地方呆着，不必在不喜欢的工作上消磨人生，仅此而已。它并不是让你能够买高级外套，或者开法拉利，或者开游艇，或者周游世界。这些物质享受会让你很快产生厌倦和愚蠢感。财富只是让你成为你自己的主宰。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Money is how we transfer wealth&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;金钱是可以转换成资产财富的媒介。金钱是一种社会信用，它代表可以使用他人时间的一种能力。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Status is your rank in the social hierarchy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;社会中有两大游戏，几乎每个人都参与其中。一个是金钱游戏，另外一个是身份地位游戏。在地位和财富之间始终上演着一种微妙的竞争，玩身份地位的人，经常会攻击或利用创造财富的人。
创造财富是一种正和游戏(positive-sum)，你拥有一个房子，不会妨碍我也拥有一个房子。身份地位则是一种零和游戏(zero-sum)，老三要爬到老二的位置，那么老二的位子就必须让出来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.挣钱和运气无关(Making Money Isn&amp;rsquo;t About Luck)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Making money isn&amp;rsquo;t about luck. It&amp;rsquo;s about becoming the kind of person who makes moeny.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;挣钱和运气无关，它是关于如何让自己变成注定挣钱的人。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Four kinds of luck: 1). Blind Luck, 2). Luck from hustling, 3). Luck from preparation, 4). Luck from your unique character&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;运气的四种分类：
- &lt;code&gt;撞大运&lt;/code&gt;，纯运气
- &lt;code&gt;奋力争取带来的好运&lt;/code&gt;，俗语：幸运眷顾勇敢的人，也就是积极行动大量做事后获得好运，经常折腾的人也会有好运。
- &lt;code&gt;积极准备带来的好运&lt;/code&gt;，俗语：机会永远只给有准备的人。当你在某个领域积累很深，当大多数对这个领域不熟的人还没有觉察到的时候，你可以提前洞察这个领域的机会。
- &lt;code&gt;独特个性带来的好运&lt;/code&gt;，你塑造了一个独特的个性，独特的品牌，独特的思维模式，然后运气就盯上了你(运气变成确定的事)。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In 1,000 parallel universes, you want to be wealthy in 999 of them&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在1000个平行宇宙中，你应该期望在其中的999个都是富有的，而不是只在其中的50个，靠运气才富有。通过追寻第四种运气，你可以消除运气因素。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.让运气变成你的命运(Make Luck Your Destiny)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Build your character in a way so luck becomes deterministic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以特定方式塑造你的个性，让运气成为注定的事&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Build your character so opportunity finds you&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;塑造你的独特个性(专业，可信赖，正直诚实，勇于担责，具有长线思维)，让机会自己来找你&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have to be a little eccentric to be out on the frontier by yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第四种运气大都源于古怪的行事方式。想要非常收获，你必须要有非常表现。世界是一个高效场所，所有明显的地方都已经被挖掘过，为了找到新奇的尚未发现的事物，你必须要以非常规方式行事，你要有强烈意愿和兴趣，要比别人挖得更深，深到让人感觉非理性的地步。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Extreme people get extreme results ~ Sam Altman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;极端的人获得极端的结果&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can&amp;rsquo;t be normal and expect abnormal returns ~ Jeffrey Pfeffer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你不可能表现平凡，但却期望不平凡的回报&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Play stupid games win stupid prizes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;玩愚蠢的游戏，只会赢得愚蠢的奖励。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.通过出租时间的方式，你不太可能致富(You Won&amp;rsquo;t Get Rich Renting Out Your Time)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You won&amp;rsquo;t get rich renting out your time, because you can&amp;rsquo;t earn non-linearly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过出租时间(比如打工)的方式，你不太可能致富，因为你的输入(时薪)和输出(工作产出)高度相关，你无法以非线性方式挣钱。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Renting out your time means you&amp;rsquo;re essentially replacable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;出租你的时间意味着你根本上是可以被替代的。大部分输入和输出高度相关的工作，会逐步被机器人或AI所取代。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You must own equity to gain your financial freedom.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你必须拥有资产(生意的一部分，如产品，生意，知识产权，股票期权等)，才可能以非线性方式挣钱，并赢得财务自由。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You want a career where your inputs don&amp;rsquo;t match your outputs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你需要选择输入和输出不严格相关的，能以非线性方式挣钱的行业。要找高度创新，能够利用工具和杠杆的行业。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.通过量入为出获得自由(Live Below Your Means for Freedom)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People living far below their means enjoy a freedom that people busy upgrading their lifestyles just can&amp;rsquo;t fathom&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;量入为出的人能够体会到的自由，是那些忙于升级生活方式的人所无法理解的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The most dangerous things are heroin and a monthly salary&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最危险的东西是海洛因和月光族。真正的致富之道是甘于朴素的生活+持续不断的努力积累。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ideally, you&amp;rsquo;ll make your money in discret lumps&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以逐步增量的方式挣钱(而非暴发户)是最理想的。财富来得太快去得也快。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.为社会创造它想要但是还不知道如何获取的东西(Give Society What It Doesn&amp;rsquo;t Know How to Get)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Society will pay you for creating what it wants, but doen&amp;rsquo;t know how to get, and delivering it at scale.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你能够规模化创造和交付社会想要，但是还不知道如何获得的东西，那么社会就会回报你。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure out what product you can provide and then figure out how to scale it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;基于你的特质/能力，思考你能够提供什么产品，然后思考如何能够规模化地交付这种产品。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Entrepreneur&amp;rsquo;s job is to try to bring the high end to the mass market&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;企业家的工作就将高端产品普及大众化。创造新事物 -&amp;gt; 预测社会需要这个新事物 -&amp;gt; 规模化生产 -&amp;gt; 普及到大众 -&amp;gt; 可盈利可持续&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.互联网极大扩展了职业的可能性(The Internet Has Massively Broadened Career Possibilities)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Internet has massively broadened the possible space of careers, by allowing you to scale any niche obsession.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;互联网极大的扩展了可能的职业空间，它让你可以规模化任何你擅长和痴迷的细分市场。每个人都独一无二，互联网连接每一个人，通过它，你可以为你的产品/天赋/技能，找到足够听众，不管距离多么遥远。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Escape competition through authenticity. No one can compete with you on being you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过真诚避开竞争。不要模仿，不要复制，每个人都不同，每个人都各有所长，做你自己擅长的事，没有人可以和做自己的人竞争。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8.和具有长线思维的人玩长线游戏(Play Long-term Games With Long-term People)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pick an industry where you can play long-term games with long-term people. All returns in life come from compound interest over many turns of the game.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;选择一个你能够和具有长线思维的人玩长线游戏的行业。生命中所有的回报(关系/挣钱/学习)都来自于反复游戏后产生的复利效应。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you switch industries, you&amp;rsquo;re starting over from scratch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你频繁换行业，那们你就要每次从零开始。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Long-term players make each other rich. In short-term game, it seems like everybody is making themselves rich.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;长期玩家让彼此都致富，短期玩家只顾自己挣钱。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9.选择聪明，精力充沛和正直的合伙人(Pick Partners With Intelligence, Energy and Integrity)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Picking partners with high intelligence, energy and integrity is the three-part checklist that you can&amp;rsquo;t compromise on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;选择合伙人如下三点是你不能将就的:
- &lt;code&gt;聪明&lt;/code&gt;: 保证做事的方向正确，勤奋的蠢人很多
- &lt;code&gt;精力充沛&lt;/code&gt;: 聪明的懒人也非常多
- &lt;code&gt;正直&lt;/code&gt;: 这点最重要，没有这点上面两点归零&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Motivation has to come intrinsically. If you&amp;rsquo;re trying to keep someone motivated for the long-term, that motivation has to come intrinsically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;必须是自激励和自驱动的人。如果你想让某人对某事长期处于激励状态，那么这种激励必须是发自内在的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Integrity is what someone does, despite what they say they do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;考察一个人是否正直，主要看他真正做了什么，而不是他说了什么。注意细微的细节(subtle signals)，当他认为周围没人在看的时候，他的所言所行。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People are oddly consistent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然可以短期隐瞒，但人的本性极具有一致性。如果一个人在餐厅对服务员不礼貌，那么他对你不礼貌只是时间问题。如果一个人有报复敌人倾向，那么他把你从朋友重新定义为敌人只是时间问题，你早晚会感受到&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Status Signalling: If you overtly bid for status, if you overtly talk about being high status, that is a low status move.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你过度看重和强调身份地位，你越可能内心自卑。你越讲自己诚实/可靠/正直，情况越可能相反。已有的实在的东西没必要强调，缺乏的虚的东西才需要强调。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10.和理性乐观者为伍(Partner With Rational Optimists)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t partner with cynics and pessimists. Their beliefs are self-fulfilling.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不要和愤世嫉俗和悲观者为伍，他们的信条是自证预言。自证预言者：如果别人失败了，他会说我早就预言会失败，如果别人成功了，他会说这是撞大运。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Either lead, follow, or get out of the way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要么领导大家，要么跟随领导，要么让开。愤世嫉俗和悲观者，他们不想领导，不想跟随，也不想让开，他们只是无休止散布悲观言论。所有的成功人士都是行动导向的，判断某事是否可行的最简单方式就是行动。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Partner with rational optimists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;乐观但是要理性，要清楚知道事物的艰难和不利面，但是依然乐观前行&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11.用特长知识武装自己(Arm Yourself With Specific Knowledge)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Arm yourself with specific knowledge. It can&amp;rsquo;t be trained but it can be found by pursuing your genuine curiosity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用特长知识武装自己。特长知识无法通过培训获得，它只能通过追寻你的单纯的好奇而获得。对特长领域的好奇可能源于先天基因，也可能在儿童时期养成，它构成你后续职业的核心竞争。特长知识几乎无法后天培养，大致20岁以后，个人的特长领域已经初步显现，你需要意识到自己的特长领域，并基于它构建你的职业。很多时候，个人其实并不能清楚认识到自己的特长领域，周围亲近的人反而更清楚。特长知识无法通过培训简单获得，如果社会能够培训你，那么它也能培训其他人，然后取代你&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12.特长知识具有高度创新和技术性(Specific Knowledge Is Highly Creative or Technical)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Specific knowledge tends to be creative or technical. It&amp;rsquo;s on the bleeding edge of technology, art and communication.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;特长知识具有高度创新和技术性。它存在于技术/艺术/沟通的前沿。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Specific knowledge can be taught through apprenticeships.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过学徒关系可以获得特长知识。巴菲特(Warren Buffett)和格雷厄姆(Benjamin Graham)是一个典型例子。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Specific knowledge is highly specific to the situation, it’s specific to the individual, it’s specific to the problem, and it can only be built as part of a larger obsession, interest, and time spent in that domain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;特长知识和情景/个体/问题领域高度相关。它只能通过对某个领域的痴迷/兴趣和大量时间的投入才能获得。简单读一本书，上一门课无法获取特长知识，特长知识也无法被编程为一个算法(无法自动化)。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can&amp;rsquo;t be too deliberate about assembling specific knowledge. Build specific knowledge where you are a natural。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不要刻意追求特长知识(过于目标导向)，找到你内在真正擅长和喜欢的事(你天生就是干这个的料)，然后基于此构建特长知识。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13.学习销售，学习制造(Learn to Sell, Learn to Build)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn to sell. Learn to build. If you can do both, you will be unstoppable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;学习销售，学习制造。如果你两样都会，你将不可阻挡。制造范畴：开发，制造，物流，采购，设计和运营服务。销售范畴：售卖，市场，沟通，招聘，筹钱，激励员工，公关&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Silicon Valley model is a builder and seller&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;硅谷模式=世界级销售+世界级制造。例子，苹果创始人Steve Jobs + Steve Wozniak，微软创始人Gates + Allen，谷歌创始人Larry + Sergey。CEO + CTO组合。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you can do both you will be unstoppable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;两者兼备可创造整个行业。例子埃隆·马斯克(Elon Musk)，史蒂夫·乔布斯(Steve Jobs), 拉里·埃里森(Larry Ellison/Oracle)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;d rather teach an engineer marketing than a marketer engineering&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;制造者容易转行为销售者(前提沟通能力好)，销售者不易转成制造者。职业早期建议从制造者开始(打下基础)，后期可转行为销售者。制造者需要大量聚焦时间的投入，而且新人新产品始终会推陈出新，所以制造技能难以规模化和保持前沿，销售技能则长期更易于规模化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14.从读你喜欢的书开始，一直到你喜欢上阅读(Read What You Love Until You Love to Read)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;培养大量阅读和终身学习习惯。早期要读原创经典(基础+第一性原理)，以后各类学科都要广泛涉猎&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15.基础是数学和逻辑(The Foundations Are Math and Logic)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现代最重要五项基础技能：&lt;code&gt;阅读&lt;/code&gt;，&lt;code&gt;写作&lt;/code&gt;，&lt;code&gt;算术&lt;/code&gt;，&lt;code&gt;沟通(说服力)&lt;/code&gt;，&lt;code&gt;计算机编程&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;16.没有所谓“商业&amp;rdquo;技能(There&amp;rsquo;s No Actual Skill Called &amp;ldquo;Business&amp;rdquo;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过实践锻炼你的做生意能力，而非纯理论学习。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The number of &amp;ldquo;doing&amp;rdquo; iterations drives the learning curve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;试错迭代才能快速驱动学习曲线，迭代是不断尝试新的方法，而非重复劳动。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;are willing to bleed a little every day, you may win big later&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;普通大众期望每天能挣一点，企业家则相反，他们愿意承受每天出一点血(比如损失金钱)，但最终可能会赢得更多。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;17.通过勇于承担风险来获得杠杆(Embrace Accountability to Get Leverage)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Embrace accountability. Society will reward you with leverage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;致富需要杠杆(人力/资金等)。只有建立勇于承担责任和风险的信誉，社会才会回报杠杆予你。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People who can fail in public have a lot of power.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;敢于公开承担失败的人其实非常强大。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;18.通过勇于承担风险来赢得资产(Take Accountability to Earn Equity)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have high accountability, you&amp;rsquo;re less replaceable and you can get a piece of the business.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你具有勇于承担风险的信誉，别人才会觉得你不可替代，才会把生意/资产交给你。位置越高，承担风险越大，同样受益也可能越大。船要沉没的时候，船长必须最后一个离开。公司破产的时候，员工最先得到工资补偿，然后是银行，最后才是资产投资人(风险最大，收益也可能越大)。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Accountability is reputational skin in the game&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;skin in the game是风险共担意思，来自黑天鹅的作者塔勒布的新书《非对称风险》。回报要和风险承担成正比，敢于压上你的声誉。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;19.劳动力和资本是老式杠杆(Labor and Capital Are Old Leverage)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wealth requires leverage. Labor and capital are older forms of leverage that everyone is fighting for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;获得财富需要利用杠杆。劳动力和资本是几乎每个人都在竞争的老式杠杆。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Society overvalues labor leverage&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当前社会过度看重劳动力杠杆。看职位高低，就看带多少人，看公司实力，就看公司有多少人，实际上看的是能用多大的人力杠杆。
&amp;gt; You want the minimum amount of labor that allows you to use the other forms of leverage.&lt;/p&gt;

&lt;p&gt;劳动力杠杆的劣势：管人并不容易，需要很强领导管理技能；劳动力杠杆竞争非常激烈，一不小心会成为政治斗争或政变中的牺牲品(历史上资本和劳动力之间的斗争从未停止)。所以应该尽量减少劳动力杠杆的使用，你只需少量劳动力，能够支持你使用其它形式的杠杆即可。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Capital has been the dominant form of leverage in the last century.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;资本是上个世纪以来的一种主要的杠杆形式，少数人靠它获得巨量财富，大部分甚至还不懂如何利用它。资本是一种很强大的杠杆，可以转换成其它形式的杠杆(比如劳动力)，资本也易于规模化。运用好资本需要好的资本管理能力和分析技能&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You need specific knowledge and accountability to obtain capital&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你需要有特长知识和良好的信誉记录，社会才会放心把资本交到你手，以此作为杠杆，让你帮忙挣取更多资本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;20.产品和媒体是新杠杆(Product and Media are New Leverage)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Product and media are the leverage of new wealth. Create software and media that work for you while you sleep.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;产品和媒体几乎没有边际复制成本，是新财富的杠杆。从印刷出版开始 -&amp;gt; 到广播电视媒体开始加速 -&amp;gt; 互联网+代码大爆发。现在，你甚至可以不靠(或只是少量依靠)人力和资本杠杆，就可以放大你的努力。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Product leverage is where the new fortunes are made&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上一代财富主要靠资本杠杆，典型例子是巴菲特。新一代的财富主要靠代码和媒体杠杆，典型例子杰夫·贝佐斯(亚马逊创始人)，马克·艾略特·扎克伯格(Facebook创始人)，拉里·佩奇(谷歌创始人)，比尔·盖茨(微软创始人)，斯蒂夫·乔布斯(苹果创始人)。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Combining all three forms of leverage is a magic combination&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;1.劳动力杠杆：工程师+设计师+产品开发。&lt;/li&gt;
&lt;li&gt;2.资本杠杆: 市场，广告，规模化&lt;/li&gt;
&lt;li&gt;3.代码+媒体杠杆&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三者结合可以产生巨大杠杆效应&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Product and media leverage are permissionless&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于劳动力杠杆，别人要愿意跟你才行。对于资本杠杆，要有人愿意投资给你才行。编程/写书/录制播客视频/写博客，所有这些都是不需要许可的，所以说它们是最公平的杠杆。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;21.产品杠杆人人平等(Product Leverage is Egalitarian)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Labor and capital are limited to the people who control those resources. But products reach global markets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;劳动力和资本仅限于控制这些资源的人，但是产品可以触达全球市场。产品杠杆是一种正和游戏，如果你在乎要以道德的方式获取财富，你最好使用代码和媒体来创造财富，因为这类产品任何人都可以使用(具有平等属性)，而劳动力和资本则只有少数人能够使用(不平等)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;22.寻找一个能够利用杠杆的生意(Pick a Business Model With Leverage)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ideally, you should pick a business model with network effects, low marginal costs and scale economies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你最好选择一个具有&lt;code&gt;网络效应&lt;/code&gt;的业务，&lt;code&gt;低边际成本&lt;/code&gt;，并且是&lt;code&gt;经济地规模化&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scale economies: the more you produce, the cheaper it gets&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;规模经济&lt;/code&gt;: 生产越多，越便宜。造第12个产品比造第5个产品便宜，造第10000个产品比造前一个要便宜很多，这种方式易于商品化，并且能够自动给竞争者制造障碍&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Zero marginal cost of reproduction: producing more is free&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;零边际复制成本&lt;/code&gt;: 生产更多是免费的，典型例子是媒体产品。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Network effects: value grows as the square of the customers. Network effect business are natual monopolies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;网络效益&lt;/code&gt;: 价值以客户的平方增长。典型例子: Facebook/Uber/Google/Twitter/YouTube。具有网络效应的业务具有天然垄断(natual monopolies)和赢者通吃(winner-take-all)特性。语言具有网络效应，未来世界可能只有英语和中文两种语言。货币也具有网络效应，未来世界可能只有一种储备货币(目前是美元)。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Zero marginal cost business can pivot into network effect business.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;零边际成本的产品-&amp;gt;易于规模化-&amp;gt;易于产生网络效益-&amp;gt;每增加一个用户都会增加整个网络的价值。网络效应是终极杠杆，你选择业务模式的时候一定要思考每增加一个客户，客户之间如何彼此增加价值，然后你躺在海滩上旅游的时候，客户都会自动增加价值。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;23.从劳工到企业家的案例(Example: From Laborer to Entrepreneur)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The continuum from laborer to real estate tech company goes from low to high specific knowledge, accountability and leverage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从建筑工人到房地产技术公司的案例，展示特长知识、职责风险承担和杠杆，从低到高的发展历程。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Laborers get paid hourly and have low accountability&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;底层是建筑工人/水电工等，他们按小时计薪，但承担职责风险最小，社会地位低。他们需要掌握的特长知识很少，除了手头工具没有多少杠杆可用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;General contractors get equity, but they&amp;rsquo;re also taking risk.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第二层是总承包商，他们拥有资产，可以利用人力杠杆(承包工队)，可以获得项目收入的大头，但同时承担职责和风险也更多，如果项目失败，他们也要承担大头。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Property developers pocket the profit by applying capital leverage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第三层是房地产开发商，他们利用资本杠杆获取利润。经验丰富的承包商可能转型为房地产开发商，他们发展出了地产领域的商业敏锐性（知道哪块地皮会增值，政策经济层面因素等)，然后他们有能力找到资本投资(自己也可投资)。这层需要更多特长知识，风险承担和利用资本杠杆的能力。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Architects, large developers and REITs are even higher in the stack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;建筑师，大开发商由于之前的成功带来的声誉，会让他们更加增值。也有部分转做房地产投资信托，他们同时熟悉房地产和金融/资本市场，他们不用去真正开发房地产，也不用管理很多人，他们可以充分利用资本杠杆。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Real estate tech companies apply the maximum leverage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最上层是房地产技术公司(类似美国Trulia/RedFin/Zillow这样的公司)，他们可以最大程度利用杠杆。需要同时具备房地产、技术、投资领域的特长知识(一般需要互补团队)，承担职责和风险很高，可以利用的杠杆最大，同时潜在收益也可能最高。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;24.判断就是决断技能(Judgment Is the Decisive Skill)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In an age of infinite leverage, judgment becomes the most important skill。Leverage is a force multipler for your judgment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在杠杆几乎无限的时代，判断力成为最重要的技能。判断力是基础，杠杆则是判断力的倍增器。职业早期你忙于追逐杠杆，一旦获得杠杆，你需要歇一歇，因为这个时候判断力就更加重要了(因为风险也更大了)。巴菲特如此富有主要是因为他的判断力，即便你把他的钱全部拿走，明天投资者仍然会給他1千亿，因为他的判断力还在&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Without experience, judgment is often less than useless.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;光有高智商还不够，判断力源于快速迭代+实战体验。需要切身投入和切肤之痛(skin in the game)才会产生真正的判断力。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The people with the best judgment are among the least emotional&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;具有最好判断力的人是最不情绪化的。很多最好的投资人/企业家是近乎毫无情绪的机器人。情绪是真正阻碍你看清事物真相的东西。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The more outraged someone is, the worse their judgment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个人越愤怒，他们的判断就越糟糕。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;25.给自己设定一个超高时薪(Set an Aspirational Hourly Rate)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If outsourcing a task will cost less than your hourly rate, outsource it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果外包某项工作所需费用比你的时薪少，那么就外包。对于大部分要花时间的事情，都要和你的时薪比较，再决定是否自己去做。如果致富你是的首要目标，那么你的主要时间都应该投在这件事情上。花费时间和别人争吵，买错小东西自己亲自去退货，都是浪费时间的蠢事。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can&amp;rsquo;t penny pinch your way to wealth&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于基本的生活所需，你可以节俭，你也可以始终保持低开销，但是对于致富这件事情，你无法通过吝啬来实现。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My aspirational rate was $5,000/hr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我(原文作者)给自己设定的超高时薪是每小时5000美金。如果你给自己设定的超高时薪，看起来还没有到荒谬的程度，那么你设得还不够高。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You should be working on your product and getting product-market fit. And you should be exercising and eating healthy. That&amp;rsquo;s all you have time for while you&amp;rsquo;re on wealth creation mission. ~ Paul Graham(保罗·格雷厄姆)，美国著名程序员、风险投资家、博客和技术作家。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;创业者只应该关注和花费时间在：产品，产品和市场契合，锻炼，健康饮食。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;26.奋力工作(Work As hard As You Can)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Work as hard as you can. Even Though what you work on and who you work with are more important.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果致富是你的目标(如果只是朝九晚五的上班则另当别论)，那么你必须奋力工作，同时要清楚意识到，做什么工作，和谁一起工作，比努力本身更重要&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;正确的工作领域&lt;/code&gt;: 最重要，选择职业或者做生意，先要弄清楚做什么，有没有市场，我能够开发出什么产品，能否发挥我的特长知识，我有没有兴趣能否持续投入&lt;/li&gt;
&lt;li&gt;其次是和&lt;code&gt;正确的人(聪明/精力充沛/正直)&lt;/code&gt;, 和优秀的人一起工作，优秀的标准也要超高(now matter how high your bar is, raise your bar)。&lt;/li&gt;
&lt;li&gt;最后才是&lt;code&gt;努力工作&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Nobody really works 80 hours a week&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;没有人能真正工作80甚至120小时，这样说的人无非是在身份炫耀。没有人能持续工作80甚至120小时，同时还保持高产出和头脑清醒，你的脑袋会迟钝，灵感缺失。&lt;/p&gt;

&lt;p&gt;在知识领域的高效工作方式是：在灵感和兴趣来的时候，像冲刺一样奋力工作一段时间，然后休息一段更长的时间。这种方式更像猎捕狮子，而不是像马拉松，但长期看，致富的过程是一系列冲刺组成的一个马拉松。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Inspiration is perishable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;灵感容易腐烂。灵感稍纵即逝，灵感点子来的时候要及时抓住，及时动手去做。比如脑中突然来了写博文的灵感，马上动手去写，如果延迟或迟疑，它可能很快消失。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Impatience with actions, patience with results.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对行动可以没有耐性(积极行动)，但是对结果要有耐心。灵感来的时候，抓住行动，问题来的时候，不睡觉也要解决。但是产品被市场接受需要很长时间，与人合作磨合也需要很长时间，伟大的产品诞生需要不断的打磨，打磨，再打磨。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;27.你应该足够忙，没有多少时间去社交(Be Too Busy to &amp;ldquo;Do Coffee&amp;rdquo;)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You should be too busy to &amp;ldquo;do coffee&amp;rdquo;, while still keeping an uncluttered calendar&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你应该足够忙，没有多少时间去社交，同时日程表最好空白，换句话说，你应该专注自己的要事，没有时间社交和开会。&lt;/p&gt;

&lt;p&gt;在职业早期的探索(exploring)阶段，你可以参与一些社交和建立一些关系。在职业的中后期利用(exploiting)阶段，你有更重要的事情要做，你必须无情地将会议从你的生活中剔除。&lt;/p&gt;

&lt;p&gt;如果某人要和你开会，你就问能否用电话代替。如果某人要和你电话沟通，你就问能否用电子邮件代替。如果某人想要发电子邮件给你，你就问能否用短信代替，实际上到这一步，大部分短信都是可以忽略的，除非是真正紧急的事情&lt;/p&gt;

&lt;p&gt;你应该无情地拒绝会议。如果真的要开会，就边走边谈，或站着谈。让会谈保持简短，保持行动导向(actionable)。大部分超过8个人的圆桌会议，不会有任何产出，你基本上浪费至少一个小时。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People will meet with you when you have proof of work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你手头真有重要和有价值的产品，可以考虑找合适的人会谈合作。找重量级投资人谈，你必须先有工作证明(proof of work，区块链术语)，也就是你实际开发的产品或者项目进度，而不是ppt，更不是脑袋里的想法&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Networking is overrated even early in your career&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;即便在职业早期，社交的作用也被夸大了。通过社交手段建立人脉获得机会，表面上看如此，实际这种机会顶多是第一(撞大运)和第二类(奋力争取带来的好运)。你应该把重点放在第三(积极准备带来的好运)和第四类(独特个性带来的好运)，专注建立声誉，开发产品，建立独特视角，善于发掘机会(在别人还没看到时)。&lt;/p&gt;

&lt;p&gt;忙碌的日程表和忙碌的脑瓜，做不了伟大的事情。自由的时间和思考，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;28.不断重新定义你的工作(Keep Redefing What You Do)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Become the best in the world at what you do. Keep redefining what you do until this is true.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在你专注的工作上做到世界最佳，不断重新定义和打磨你的工作，直到世界最佳成真。这个工作必须和你的特长知识/技能/职位/能力/位置/兴趣相匹配(遵循自己的内心，being authentic to yourself)，探索之旅会很漫长，但你始终要意识这点。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Find founder-product-market fit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;企业家最重要的事：找到有&lt;code&gt;市场&lt;/code&gt;的&lt;code&gt;产品&lt;/code&gt;，而且你天生&lt;code&gt;擅长&lt;/code&gt;干这事，三者缺一不可&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;29.通过做自己避开竞争(Escape Competition Through Authenticity)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Competition will trap you in a lesser game&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;受到社会上身份地位游戏的影响，我们容易追逐模仿而迷失自我。如果周围的人都是成功的商务人士，我也要成为商务人士。如果我周围的人都是成功的社会活动家，我也要成为社会活动家。如果我周围的人都是成功的架构师，我也要成为架构师。实际上这种追逐模仿更多是一种零和竞争游戏。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No one can complete with you on being you&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;没有人能够和做自己的人竞争，做你最擅长的事，基于你的特长知识打造你的核心竞争。同时也要注意产品和市场匹配问题(product-market fit)，如果真实做自己，但是市场不大，你也要注意调整。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In entrepreneurship, the masses are never right&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从企业视角看，大众判断往往不正确。如果大众判断正确，那么大家早就发财致富了。如果大众都在谈论某个领域或产品，那么恰恰说明这个领域的竞争趋于饱和，已经没有多少机会了。相反，如果没人谈论某个领域，则可能这个领域的机会也不大。企业家需要在两者之间找到平衡。大部分人倾向模仿追逐热点，伟大的企业家倾向真实做自己。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Combine your vocation and avocation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最好将自己的事业和爱好结合起来，这样的人更容易做自己。经过不断尝试，很多人最终会找到自己最擅长的事业。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;30.玩愚蠢的游戏，赢愚蠢的奖励(Play Stupid Games, Win Stupid Prizes)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Competition will blind you to greater games. You&amp;rsquo;re one step away from a better market.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;热衷模仿竞争会蒙蔽你的双眼，陷入零和游戏，让你迷失自我。真实面对自己和客户才能找到更好市场。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;31.最终你会获得你应得的（Eventually You Will Get What You Deserve）&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Apply specific knowledge with leverge and eventually you will get what you deserve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果满足特长知识，责任心，利用杠杆和真实做自己这些先决条件，那么从足够长的时间范围来看，你最终会获得回报。这个通常需要十年甚至二十年，也有快的三五年的，但是这种是例外。期间你会经历很多失败，但在企业界，有时往往做对一次就够了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are you really good at that the market values?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;致富要素：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.特长知识的稀缺性&lt;/li&gt;
&lt;li&gt;2.能够利用多大的杠杆&lt;/li&gt;
&lt;li&gt;3.判断力的准确度&lt;/li&gt;
&lt;li&gt;4.责任心强度&lt;/li&gt;
&lt;li&gt;5.所做事情的社会价值多大(product market fit)&lt;/li&gt;
&lt;li&gt;6.持续投入时间+持续学习改进&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;核心:&lt;/code&gt; 你擅长(特长知识)+社会需要(product market fit)，其它自然会来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;32.拒绝大部分建议(Reject Most Advice)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Most advice is people giving you their winning lottery ticket numbers. The best founders listen to everyone but make up their own mind.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你问那些速成人士是如何获得成功的，他们可能只是告诉你他们中奖的彩票号码(也就是说，你得到的建议往往只适用于特定的人和特定上下文环境)，可能完全不适用于你和你的环境。你应该关注系统，而非单一目标，也就是什么的系统或者说环境，才促成了某些人的成功。盲目生搬硬套只会适得其反。&lt;/p&gt;

&lt;p&gt;真正的创始人会聆听所有人的视角和建议，但是在最后做决策时，他会忽略所有人，而是根据自己的系统和上下文做决定。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Advice is maxims you can recall later, when you get your own experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所谓建议可以认为是一种格言，也就是你有了自己体验之后，你能回忆起来并能对上号的格言。本文的35条建议也是35条格言，我(原文作者)碰到问题时也时常会回顾这些格言，作为我的处事指导，比如是否要和某人一起共事，如果我不能和他一起共事10年(长线游戏)，那么我何必要和他共事一天？如果你看过建议以后有体验共鸣，那么对你就要价值；如果你无感，那么请忽略，继续做自己的事就好了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;33.平和的内心，健康的身体和充满爱的家庭(A Calm Mind, a Fit Body, a House Full of Love)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you&amp;rsquo;re finally wealthy, you&amp;rsquo;ll realize it wasn&amp;rsquo;t what you were seeking in the first place.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当你某天最终变得富有，你会意识到这其实并不是你最初的追求。钱只能解决你钱的问题(获得一定的物质世界的自由度)，但是内心的平静，健康的身体，和谐有爱的家庭，这些靠钱买不来，这些也要靠你去挣取，不可偏废。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;34.致富没有捷径(There Are No Get Rich Quick Schemes)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Get rich quick schemes are just someone else getting rich off you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所谓的致富速成，往往是别人想从你身上挣钱的把戏。世界是一个高效之地，如果有容易挣钱的地方，那么这个地方早就被探索和利用过了。&lt;/p&gt;

&lt;p&gt;另一方面，作为专家或成功人士，可以给其他人一些(高质量和可执行的)致富建议，同时要坦承过程漫长且艰难，否则会毁掉自己的声誉。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;35. 将自己产品化(Productize Yourself)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure out what you&amp;rsquo;re uniquely good at and apply as much leverage as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;找到你擅长的事业，并尽可能利用杠杆。Productize Yourself，把独特的你和你的特长知识进行产品化，勇于承担风险，真实面对自己，充分利用杠杆规模化你的产品。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Making money isn&amp;rsquo;t even something you do, it&amp;rsquo;s not a skill. It&amp;rsquo;s who you are.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;做最真实的自己，&lt;code&gt;挣钱并不是关于你做的事情，也不是一种技能，而是你到底是谁的问题。&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Find hobbies that make you rich, fit and creative&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;挣钱是一个函数，输入是你的身份和你的爱好。找到你的三个爱好，一个让你挣钱，一个让你健康，一个让你富有创造力。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>2019年总结之瞎扯淡</title>
      <link>https://bgbiao.top/post/2019%E5%B9%B4%E6%80%BB%E7%BB%93%E4%B9%8B%E7%9E%8E%E6%89%AF%E6%B7%A1/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/2019%E5%B9%B4%E6%80%BB%E7%BB%93%E4%B9%8B%E7%9E%8E%E6%89%AF%E6%B7%A1/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;大胡子&lt;/code&gt;是我特别佩服的一位老师，第一次知道他是17年偶尔一次线上讲座，具体题目忘记了，内容大概是关于&amp;rdquo;技术人如何赚钱&amp;rdquo;，很real，告诉一些晚辈如何赚钱，以及拥有一些赚钱思维，我觉得这个真的很酷。后来才了解到他的&lt;code&gt;疯人院&lt;/code&gt;和星球，所以立马入会，所幸会费不是很高(这要是再高个几百的，当时的我是肯定不会去&amp;rdquo;割韭菜&amp;rdquo;社群)。不过，在这两年里，虽然不曾在社群发表自己的观点，但是通过群里各种大牛、前辈们的探讨，在加上自己的思考，也的确让自己再技术之外成长了很多，所以，在这里我向大家极力推荐大胡子老师，他的公众号是&lt;code&gt;姜胡说&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;年初了，总该总结总结过去一年的成长和收获，也该去梳理梳理新一年的征程如何走下去，这里有一篇胡子老师的文章，觉得很有意思，感兴趣的可以去仔细读读&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzIxMjE4NzM5MA==&amp;amp;mid=2651785933&amp;amp;idx=1&amp;amp;sn=867e1c2e54dc124d60d9ad3c7a759a49&amp;amp;chksm=8cb24b5cbbc5c24a7a3f51f882e2a8c13f05312bdf33d5a5e03e52ea89eb818b32dfad65a43b#rd&#34;&gt;早知道这个，我至少可以少奋斗3年&lt;/a&gt;，虽然有点标题档了，但不妨碍这依然是一篇值得看和值得思考的文章.&lt;/p&gt;

&lt;p&gt;以下摘录几个观点，用于鞭策自己:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Stay hungry,Stay foolish&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Stay hungry,Stay foolish!&lt;/code&gt;是乔布斯老爷子在斯坦福大学大学演讲时结尾的一句话，翻译过来即为&amp;rdquo;求知若饥，虚心若愚&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;记得那个时候我还在上大学，乔老爷子的自传以及演讲都那么激动人心，我还曾经将&lt;code&gt;Stay hungry,Stay foolish!&lt;/code&gt;作为我的微信签名，直到后来我懂得了做的重要性，才将微信签名换成如今的&lt;code&gt;Never try,Never known!&lt;/code&gt;。要说&amp;rdquo;Stay hungry,Stay foolish&amp;rdquo;是内在修养的话，那么&amp;rdquo;Never try,Never known&amp;rdquo;就是外在表现，我们要一直对外保持不断的好奇心，不断尝试，只有不断尝试，我们才会发现我们是多么的无知，而当你长时间处于无知状态时，往往会被别人远远的甩在最后。&lt;/p&gt;

&lt;p&gt;所以，&lt;code&gt;当你对这个世界失去了敬畏和好奇心时，你就一定会落后&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;落后就肯定会挨打，我相信从小到大大家都不愿成为挨打的那个人。&lt;/p&gt;

&lt;p&gt;那该怎么办呢？我在&amp;rdquo;Stay hungry,Stay foolish&amp;rdquo;的后面再加一个&amp;rdquo;Never try,Never known!&amp;ldquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stay hungry: &lt;code&gt;保持对知识的敬畏，保持对这个世界的好奇心&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stay foolish: &lt;code&gt;接触到新事物时，不要让固有的观念影响自己。真正强大的人，允许自己的大脑里同时存在两种或者两种以上完全相反的声音。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Never try,Never known: &lt;code&gt;不去尝试，永远不知道这个世界本身的运行机制，当你知道再多也不去尝试仍然是不知道&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2.技不压身&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;像我们搞运维的，最早之前可能会比较熟悉使用Linux，然后擅长Linux环境下一些常用服务的规划和实施，并且能够尽快排查故障和问题。在我刚开始从业的一段时间，我一度有点茫然，纠其原因是因为运维这个行业，起码像我上面提到的这个定义，其实任何一个有相关技术背景，并且本身还算是一个靠谱的人，及时对运维一点儿也不懂，如果有运维的活儿，那他也一定可以完成，不过就是多花点时间多花点儿精力而已。&lt;/p&gt;

&lt;p&gt;所以，我那个时候在想，作为一个运维从业者，未来将如何破局。这就跟一两年前同行相遇都会问&amp;rdquo;我们搞运维的，要不要去学点开发啊&amp;rdquo;，到目前为止，我想市面上应该再没有不懂开发的运维了吧。至少你写个Python、Shell、Perl脚本是最基本的吧,再有甚者可能还会对运维有Golang或者Java开发的能力的要求。&lt;/p&gt;

&lt;p&gt;那我想说的也是:&lt;code&gt;多了解一些其他技术，对运维，甚至是其他事情都会有莫大的好处&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;这两年我也因此去多学习了一些其他技术，比如&lt;code&gt;Golang、Vue、基于Hadoop体系的大数据处理&lt;/code&gt;，虽然在这几个方面都不是很深入，也不是很资深，但此时作为一个运维从业者来说，或者想要成为一个更加优秀的运维从业者来说，这些技能都是非常有帮助的。&lt;/p&gt;

&lt;p&gt;2020年，我会在巩固常用技术的基础上再去多拓展一些技术，比如&lt;code&gt;Rust&lt;/code&gt;或者&lt;code&gt;JavaScript&lt;/code&gt;之类的，毕竟2020年都要实现全面建设小康社会了，我们自身的技能也应该再全面一些不是么？&lt;/p&gt;

&lt;p&gt;有些人可能就会说了，学那么多技术，也不一定用的上，其实古人有句话就是&amp;rdquo;书到用时，方恨少&amp;rdquo;，很多时候我们在不断学习和了解的过程中并不一定是在未来一定要用它，而是&lt;code&gt;用整个经历来还原他人决策的依据&lt;/code&gt;，让你能够以更贴近他人的角度去理解一件事，更何况万一在未来用上了，不是也不用去求他人了不是。&lt;/p&gt;

&lt;p&gt;这个时候，可能还会有人说了，我想去学习一些先进的技术，但是在国内网站上都无法找到，而且信息杂乱。其实，只要你确定了要去学习一些新技术，那怎么学就不是那么重要了，毕竟&lt;code&gt;做什么比怎么做更重要&lt;/code&gt;，是吧，只要目标明确，就一定能找到对应的途径。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.知识获取&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接着上面说到的，我想学习一门新技术，我该如何去学习呢？&lt;/p&gt;

&lt;p&gt;我的建议其实如同大胡子老师的观点，一定要吸收&lt;code&gt;最原始的知识&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;一定要&lt;code&gt;拒绝二手知识。更何况是三手、四手。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;前两天，偶然在群里看到有小伙伴说&amp;rdquo;现在就是照着网上的配置抄，然后埋大bug&amp;rdquo;。现实可能的确是这样的，因为大家时间都很宝贵，遇到问题也都着眼于解决眼下&amp;rdquo;问题&amp;rdquo;，所以对于本质问题也少有人会追根溯源了。这就是典型的多手知识，目前网络上充斥着各种良莠不齐的文章，我们可能不了解别人的场景，也不了解问题的上下文，照抄别人的配置，可能是暂时解决问题了，也许也埋下了一个祸根，但终究对于我们个人而言，没有任何成长。&lt;/p&gt;

&lt;p&gt;胡子老师在那篇文章说:
&amp;gt; 读书这种事很美妙。
&amp;gt; 思考也是。
&amp;gt; 不要让他人剥夺走。
&amp;gt; 获取一些有养料的知识。
&amp;gt; 不仅仅是读书。&lt;/p&gt;

&lt;p&gt;我们搞技术的人，大多数场景都在使用开源技术构建产品，所以在成长的路上我们完全可以阅读那些&lt;code&gt;官方文档&lt;/code&gt;，及时那些英文官方文档不那么容易理解，我也依然建议去阅读官方文档，起码在核心问题上，要比那些多手翻译的官方文档要好很多。再者，我们如果有时间和经历，其实是可以针对核心逻辑去阅读源代码来追溯源头。&lt;/p&gt;

&lt;p&gt;到现在为止，我在工作上遇到的任何技术问题，如果是开源组件，我都会第一时间去&lt;code&gt;GitHub&lt;/code&gt;或&lt;code&gt;Google&lt;/code&gt;上查找官方文档，当然我也会借鉴一些多手翻译的官方文档(毕竟英语水平不咋地)。&lt;/p&gt;

&lt;p&gt;当然这里并不是想说是怎么去获取知识的，而是一种思维模式，即&amp;rdquo;对于知识，我们一定要思考要不要去学习，然后找到一手渠道去学习最原始、最纯的知识&amp;rdquo;。知识其实是无处不在的，我们需要的是有鉴别知识的能力.&lt;/p&gt;

&lt;p&gt;然后，&lt;code&gt;基于需求或者人类的社会动机将那些想法进行分类整理&lt;/code&gt;。 这句话也是胡子老师文章中的，很有感触。将我们学到知识进行分门别类，仔细想想，&lt;code&gt;一个不能和人类需求和社会动机联系在一起的知识，它可以用在什么地方呢？&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以尝试思考一下:
&amp;gt; 这条信息主要覆盖哪个团体和人群？
&amp;gt; 这个想法代表了哪些深层的人类需求和行为？
&amp;gt; 这件事有趣的地方在哪里？
&amp;gt; 别人是怎么做的？
&amp;gt; 不同团体之间他们互相是如何做的？&lt;/p&gt;

&lt;p&gt;最后，依然以大胡子老师的话结尾。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;观察生活中既有的生活方式,
和那些新鲜事物做对比。看看发生了什么。
最后&lt;code&gt;把所有的问题全部回归到人类的需求和社会动机上来。&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;人活着都有什么需求，你考虑了，别人没考虑，那，这就是你和别人的差距。&lt;/p&gt;

&lt;p&gt;劳心者制人，劳力者制于人，这才是自然规律。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>2019年总结之财务投资</title>
      <link>https://bgbiao.top/post/2019%E5%B9%B4%E6%80%BB%E7%BB%93%E4%B9%8B%E8%B4%A2%E5%8A%A1%E6%8A%95%E8%B5%84/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/2019%E5%B9%B4%E6%80%BB%E7%BB%93%E4%B9%8B%E8%B4%A2%E5%8A%A1%E6%8A%95%E8%B5%84/</guid>
      
        <description>&lt;p&gt;18年的时候，我在个人公众号&lt;code&gt;BGBiao&lt;/code&gt;上写了一篇关于如何&amp;rdquo;选鸡&amp;rdquo;的文章，大概介绍下了作为一名不了解投资和没有投资经验的人如何选一只性价比较高的基金，感兴趣的同学可以回顾下&lt;a href=&#34;https://mp.weixin.qq.com/s/swAOiIT-tWkpC0wa24C51Q&#34;&gt;门外汉如何选择一只&amp;rdquo;鸡&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;作为一个在IT行业工作的人来说，我认为非常有必要提前考虑个人的投资和理财计划，毕竟年轻时的高薪和高强度工作很容易让你在后面很多年感觉到无所适从，因为随着年龄的增大，持续高薪的工作并不好找，而且高强度的工作，也可能没有小伙子们的那种撑劲儿，所以，提前规划自己的理财和投资，我个人觉得还是蛮重要的。&lt;/p&gt;

&lt;p&gt;2019年即将结束，回想一下自己过去一年的&amp;rdquo;选鸡&amp;rdquo;经历，还是想在这里总结一下，并希望和期待今后能够做的更好，同时也希望将自己总结的几个点分享出来。&lt;/p&gt;

&lt;p&gt;先晒一下过去一年入仓的一些&amp;rdquo;鸡&amp;rdquo;以及整体的收益状况。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaf2h7cjwyj30cn29cn1y.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.基金投资如何开户&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;购买基金一般可以从基金公司官网、银行、以及第三方基金销售平台购买。&lt;/p&gt;

&lt;p&gt;不过通常情况下，我都会在第三方App上进行投资，比如我会使用&lt;code&gt;支付宝&lt;/code&gt;和&lt;code&gt;天天基金网&lt;/code&gt;来进行基金投资，一个是因为方便和权威，并且基金的种类也特别丰富，另外一个原因是在这些平台上通常都会有较低的费率(通常有1折优惠)。&lt;/p&gt;

&lt;p&gt;有些人可能会问，为什么同时使用两个软件进行基金投资，其实最早是因为刚工作那会，支付宝有余额，想着可以通过一种理财策略来省钱，但是又不甘心余额宝那么低的收益，所以当16年左右，支付宝刚开始推出&amp;rdquo;一天10块钱，轻轻松松做理财&amp;rdquo;时，就买了些基金，并一直观察持有，且不断加仓(搞理财的都知道，频繁换手其实是非常不利的，所以既然认定了一只好鸡，索性就一直将这只鸡重仓在支付宝了).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;天天基金网&lt;/code&gt;是在我开始玩基金一段时间后，向一个在银行从业的朋友那了解到的，当时是想象她请教如何选鸡，如何交易，所以后面更多就使用该软件来进行交易。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.投资基金应该如何配置基金&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基金其实分很多种类，在之前的文章中，我好想写过，比如说有纯债基金，混合基金，指数基金，股票型基金等等。&lt;/p&gt;

&lt;p&gt;通常情况下来讲，混合基金，要看基金经理本身的能力，这个需要有一定的经验去挑选基金经理。&lt;/p&gt;

&lt;p&gt;如果想简单操作，搭配纯债基金+指数基金，这个方案也是没问题的。&lt;/p&gt;

&lt;p&gt;不过在我入仓的一些基金里，大部分都是股票型基金，当然了风险也会相对的比较高，因此对于该基金背后的团队，以及基金经理还有所持有的股票都需要有一定的了解，相对于普通人来说会有一定的难度。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.如何入仓&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我的建议是通过&amp;rdquo;基金定投&amp;rdquo;来入仓和不断加仓。&lt;/p&gt;

&lt;p&gt;因为使用基金定投从长远角度来考虑可以将整体的风险降低，并且可以不断的累计自己的基金池。&lt;/p&gt;

&lt;p&gt;相反，如果是追涨杀跌，看着基金涨了就想多买点，这会影响定投摊平风险的效果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.注意事项&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;建议在刚开始玩基金时，不要对收益有太大的幻想，因为任何成长都需要有成本的，不论是资金成本还是时间成本或者知识成本，但是如果选择定投基金，从长远角度是肯定会存储一笔资金的。另外，对于基金的买卖一定要沉住气，切勿&lt;code&gt;追涨杀跌&lt;/code&gt;，在我个人刚开始玩基金时，会频繁根据涨跌情况去调仓，后面会发现其实很多调仓都会出现反涨的情况，再加之费率的问题，其实整体会很不划算。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tips: 其实还有另外一个技巧就是，当你看好一只基金时，除了定投之外，也可以定期的去看基金一天的估价，通常情况下，在交易日下午三点前会是一个相对稳定的估价，此时可以做一些类似买跌类的操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先简单分享到这里，业余玩鸡，2020年一起进步。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexzwmo1wj30j60pa40b.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>CronJob控制器中的一些绕坑指南</title>
      <link>https://bgbiao.top/post/cronjob%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E5%9D%91%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/cronjob%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E5%9D%91%E6%8C%87%E5%8D%97/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;背景: 作为企业里唯一熟悉各种云产品的工种，通常需要和各种云产品打交道。当前，我们大部分的云基础设施和云服务都运行在阿里云上，而每个云产品都有独立的管理系统，这使得我们在运维过程中经常无法将相关产品和关联信息有效的组织在一起，来进行快速的问题诊断和信息查询，这对于运维和开发同学来说，在多个系统之间来回跳转查找关联信息是一个低效且极易出错的事务，因此通常来讲，不论是作为运维和开发，我们都希望将企业关联的云资源和服务进行整合关联，以实现效率的最大化。而在这过程中，我们采用Kubernetes集群的CronJob来定期获取阿里云的一些资源，在这过程中，遇到一些问题，根据问题重新细读CronJob官方文档，特记录于此。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;CronJob简单介绍&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个&lt;code&gt;CronJob&lt;/code&gt;对象就像是一个Linux环境的&lt;code&gt;crontab&lt;/code&gt;文件一样，它会在给定的调度周期(crontab格式)内定期的创建一些job.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;所有的定时任务的调度周期都依赖于k8s的master节点的时区&lt;/p&gt;

&lt;p&gt;通常情况下，CronJob对于创建定期和重复的任务非常有用，比如定期的备份和邮件发送之类的任务场景。&lt;/p&gt;

&lt;p&gt;当然了，在Kubernetes集群中，Cronjob也有一些局限性和特性，需要详细了解下才能用的比较好。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;: Cronjob控制器当前官方仍然是beta版本，也就意味着还是有一些问题存在的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cronjob的局限性&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个Cronjob会在它每执行一次调度就&lt;code&gt;大概&lt;/code&gt;会创建一个Jobs对象。&lt;code&gt;大概&lt;/code&gt;是因为有时候可能会有两个job被创建，或者没有任务创建。
官方实现中尝试去解决这种问题，但是目前仍然无法避免。因此在设计过程中，所有的Job都应该是幂等性的(idempotent)&lt;/p&gt;

&lt;p&gt;如果&lt;code&gt;startingDeadlineSeconds&lt;/code&gt;参数被设置为一个比较大的值，或者没有设置(默认)，并且&lt;code&gt;concurrencyPolicy&lt;/code&gt;设置为&lt;code&gt;Allow&lt;/code&gt;，那么Job总是会运行至少一次。&lt;/p&gt;

&lt;p&gt;对于每一个Cronjob来说，&lt;code&gt;CronJob&lt;/code&gt;控制器会检查从上一次调度时间到现在的持续时间内它错过了多少个调度，如果错过调度100次，它将不再执行调度，并且会有如下相关异常.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;Cannot determine if job needs to be started. Too many missed start time (&amp;gt; 100). Set or decrease .spec.startingDeadlineSeconds or check clock skew.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;值得关注的是，如果设置了&lt;code&gt;startingDeadlineSeconds&lt;/code&gt;参数(不为空),控制器统计错过的调度次数将不再是从最后一次调度时间，而是
从&lt;code&gt;startingDeadlineSeconds&lt;/code&gt;的值到现在进行统计。比如，如果设置&lt;code&gt;startingDeadlineSeconds:200&lt;/code&gt;,控制器会统计在最后200秒内错
过了的调度次数。&lt;/p&gt;

&lt;p&gt;如果CronJob未能在预定时间创建，则该任务将被视为错过调度。比如，当设置&lt;code&gt;concurrencyPolicy: Forbid&lt;/code&gt;时，当前一个任务还在运
行时CronJob尝试再次被调度，此时会被&lt;code&gt;forbid&lt;/code&gt;掉，因此也会被记录为错过一次调度。&lt;/p&gt;

&lt;p&gt;再比如，我们假设一个定时任务被设置在&lt;code&gt;08:30:00&lt;/code&gt;后每一分钟执行一次，并且&lt;code&gt;startingDeadlineSeconds&lt;/code&gt;参数没有被设置。如果CronJob控制器在&lt;code&gt;08:29:00&lt;/code&gt;到&lt;code&gt;10:21:00&lt;/code&gt;之间故障了，Job将不会运行，因此错过调度的任务数量将远超过100。&lt;/p&gt;

&lt;p&gt;为了更深层次说明这个问题，假设一个定时任务被设置在&lt;code&gt;08:30:00&lt;/code&gt;开始每一分钟执行一次，并且&lt;code&gt;startingDeadlineSeconds:200&lt;/code&gt;。如果CronJob控制器依然在相同时间段故障了，Job将会在&lt;code&gt;10:22:00&lt;/code&gt;开始继续执行。 因为控制器仅会计算在过去的200秒内，错过调度的
次数有多少，因此仅会错过调度3次，远远小于100次，所有定时任务会在控制器恢复后继续调度，而不会影响正常的任务。&lt;/p&gt;

&lt;p&gt;另外需要注意的是，CronJob仅负责调度和创建匹配的Jobs，而由Jobs真正去管理真正执行任务的Pods。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cronjob的参数详情&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec.startingDeadlineSeconds&lt;/code&gt;: 表示统计错过调度次数(100次)的开始时间，默认从最后一次调度时间开始统计错过调度次数(超
过100不再调度)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;spec.concurrencyPolicy&lt;/code&gt;: 并发调度策略，可选值:{&amp;ldquo;Allow&amp;rdquo;:&amp;ldquo;允许并发&amp;rdquo;,&amp;ldquo;Forbid&amp;rdquo;:&amp;ldquo;不允许&amp;rdquo;,&amp;ldquo;Replace&amp;rdquo;:&amp;ldquo;调度覆盖&amp;rdquo;}.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Allow&lt;/code&gt;: &lt;code&gt;注意:&lt;/code&gt;当设置为&lt;code&gt;Allow&lt;/code&gt;时，需要考虑到任务执行时间和调度周期，因为可能上个任务没执行成功，下个任务就到执行时间了，如此下来可能会有很多任务都执行积压，造成资源误使用;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Replace&lt;/code&gt;: 当使用&lt;code&gt;Replace&lt;/code&gt;遇到上述情况，后个任务会将前一个任务替换掉，如此以来所有的任务可能都不会完整执行;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Forbid&lt;/code&gt;: 则不允许并发调度，也即就调度一次，下一次调度周期再调度，但是可能由于任务执行过长，导致大部分的任务在每一
次调度时间都完美的错过了，此时&lt;code&gt;startingDeadlineSeconds&lt;/code&gt;参数也并没有设置，就可能会出现该任务不会再调度，对应到k8s里的事
件可能是&lt;code&gt;Cannot determine if job needs to be started: too many missed start time (&amp;gt; 100). Set or decrease .spec.startingDeadlineSeconds or check clock skew&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;spec.schedule&lt;/code&gt;: 调度周期，格式为标准的crontab格式[分 时 日 月 周]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;spec.failedJobsHistoryLimit&lt;/code&gt;: 历史失败的任务数限制(通常可以保留1-2个，用于查看失败详情，以调整调度策略)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;spec.successfulJobsHistoryLimit&lt;/code&gt;: 历史成功的任务数限制(可以自己决定保留多少个成功任务)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;spec.jobTemplate&lt;/code&gt;: 标准的pod运行的模板(容器运行时的相关参数)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;spec.suspend&lt;/code&gt;: 可选参数，如果设置为&lt;code&gt;true&lt;/code&gt;,所有后续的任务都会被暂停执行，该参数不适用于已经运行的任务，默认为False&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CronJob示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 配置了一个定期去阿里云云解析获取解析详情的数据
$ cat dnsall-cronjob.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    run: dnsall
  name: dnsall
  namespace: myapp
spec:
  # 强烈建议设置并发策略，根据调度周期和任务特性进行设置
  concurrencyPolicy: Forbid
  # 强烈建议设置失败任务数，用于排查任务失败根因，以优化任务
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 3
  # 强烈建议设置错过调度的计算时间
  startingDeadlineSeconds: 600
  # 调度周期
  schedule: &amp;#39;05,15,25,35,45,55 */1 * * *&amp;#39;
  suspend: false
  jobTemplate:
    metadata:
    spec:
      template:
        metadata:
          labels:
            run: dnsall
        spec:
          imagePullSecrets:
          - name: mydocker
          containers:
          - args:
            - -cmdbtype
            - dns
            image: harbor.bgbiao.top/cron-job:2019-12-04
            imagePullPolicy: Always
            name: dnsall
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          # 强烈建议设置任务的重启策略(任务的失败会触及到Jobs控制器中的Backofflimit参数，导致job失败)
          restartPolicy: OnFailure
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30

$ kubectl  get cronjob -n myapp
NAME             SCHEDULE                      SUSPEND   ACTIVE   LAST SCHEDULE   AGE
dnsall           05,15,25,35,45,55 */1 * * *   False     0        8m41s           23h

# cronjob其实定期的创建了job，因此具体的任务pod其实是由job控制器来维护的
# 这里可以看到，我们上面的cronjob保存的三个执行成功的任务
$ kubectl  get jobs -n myapp  | grep dns
dnsall-1577597100           1/1           23s        22m
dnsall-1577597700           1/1           24s        12m
dnsall-1577598300           1/1           24s        2m22s

# 再查看一个job真正管理的pod任务的执行
# 任务已经已完成，所以任务的期望值为1，当前值为0
$ kubectl  get pods -n myapp | grep dnsall-1577598300
dnsall-1577598300-hdl4z           0/1     Completed   0          3m29s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>软件工程师们必须了解的画图工具</title>
      <link>https://bgbiao.top/post/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E4%BB%AC%E5%BF%85%E9%A1%BB%E4%BA%86%E8%A7%A3%E7%9A%84%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E4%BB%AC%E5%BF%85%E9%A1%BB%E4%BA%86%E8%A7%A3%E7%9A%84%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;作为一名在IT行业摸爬滚打多年的少年，选择一款适手的画图工具可以说是爽到不行。记得学生时代，鉴于条件的限制，都只能选择Visio进行绘制流程图、类图、UML图等，但是微软家的东西，大家也懂。特别是作为一名长期混迹在开源世界的从业者，我们都喜欢使用一种免费且好用的替代方案来完成日常的工作需求。比如&lt;code&gt;Markdown&lt;/code&gt;就基本上成功替代了&lt;code&gt;Document&lt;/code&gt;去编写文档，然后&lt;code&gt;Xmind&lt;/code&gt;、&lt;code&gt;ProcessOn&lt;/code&gt;、&lt;code&gt;Draw&lt;/code&gt;之类的工具基本上也可以实现对&lt;code&gt;Visio&lt;/code&gt;的替代，当然我这里仅说的是我个人遇到的情况，不能以偏概全，微软家的很多产品也依然是不错的。接下来像大家推荐几个常用的画图工具.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;在线类产品&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.processon.com/&#34;&gt;ProcessOn&lt;/a&gt;: 很好用的产品，但是对于免费用户来说可保存的文件有限&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yuque.com/&#34;&gt;语雀&lt;/a&gt;: 阿里开源的一个在线知识写作平台，个人免费用户基本没什么限制，其中有个实验室功能，可以在线使用&lt;code&gt;PlantUML&lt;/code&gt;语法绘制各种图(流程图，时序图，UML图等)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://online.visual-paradigm.com/cn/&#34;&gt;Visual-paradigm&lt;/a&gt;: 和ProcessOn类似&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://draw.io/&#34;&gt;Draw&lt;/a&gt;: 开源免费的在线绘图(需要使用谷歌账号进行注册登录,不过既然开源是可以私有化部署，支持各种客户端)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;draw相关地址&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_33929309/article/details/91609993&#34;&gt;参考文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dl.elkpi.com:8080/draw/&#34;&gt;国内在线draw&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jgraph/drawio&#34;&gt;draw开源地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jgraph/drawio-desktop&#34;&gt;draw客户端&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Goroutine与主进程的通信</title>
      <link>https://bgbiao.top/post/goroutine%E4%B8%8E%E4%B8%BB%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/goroutine%E4%B8%8E%E4%B8%BB%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%80%9A%E4%BF%A1/</guid>
      
        <description>&lt;p&gt;还记得前半年去某条面试，面试小哥问我，当一个进程启动多个goroutine时，某个goroutine挂了，如何让主进程知道，当时大概知道可以通过&lt;code&gt;context&lt;/code&gt;这个包来实现，但是当时没有具体去了解和熟悉这块，在这里再总结下。&lt;/p&gt;

&lt;p&gt;子goroutine与主线程同步的集中方式:
- &lt;code&gt;channel&lt;/code&gt;: 每个goroutine往主进程的&lt;code&gt;chan&lt;/code&gt;写数据，然后由主进程去读取，直到读取完了全部goroutine的&lt;code&gt;chan&lt;/code&gt;就算运行完毕，此时主进程即可正常退出。这种方式是子线程通知主线程结束.
- &lt;code&gt;context&lt;/code&gt;: 使用&lt;code&gt;context&lt;/code&gt;中的&lt;code&gt;cancel&lt;/code&gt;，这种模式是主线程通知子线程结束
- &lt;code&gt;sync.WaitGroup&lt;/code&gt;: 通过&lt;code&gt;Add&lt;/code&gt;方法设置等待子goroutine的数量，使用&lt;code&gt;Done&lt;/code&gt;方法设置等待子goroutine的数量减1，当等待数量为0时，&lt;code&gt;Wait&lt;/code&gt;函数退出.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.通过channel实现同步&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 通过向主进程中的channel来和主进程进行通信
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;subTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;isok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;subTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 通过channel来让子goroutine和主线程共享内存(通过通信实现共享内存)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isok&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.context方式传递数据给主线程&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;subTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;c1&#34;&gt;// 通过使用select执行和channel相关的IO操作(类似switch)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;				&lt;span class=&#34;c1&#34;&gt;// select关键字其实是go并发模型中比较重要的
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                    &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cancel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithCancel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;cancel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// subTask中其实是一个死循环会不断将n自增并返回到dst
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;testChan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;subTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;testChan&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 主进程通过chan中的值控制并发？然后通过cancel()来通知子routine结束
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.通过sync.WaitGroup来实现&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;waitgroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;sync&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;subTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WaitGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 在并发函数中通知waitgroup完成
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WaitGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 设置waitgroup等待次数(并发次数)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;subTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;waitgroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4.多个子goroutine之间通信&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mutil&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;goroutines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 两个task互相协作，通过两个channel来互相通知对方执行的阻塞和继续
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 因为c2其实是一个带缓冲的(1)的channel，会阻塞主直到另外一个task处理
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;task1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// c2是一个带缓冲的channel，因此第一次打印12后到这里会等待读取c2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c2&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;task2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c3&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;char_seq&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;H&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c1&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;char_seq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;char_seq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 通知主进程任务执行完成
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;c3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 通过有缓冲的channel来争抢执行
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 定义一个struct{}类型的channel
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 创建两个goroutine在后台执行
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;task1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;task2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 继续执行，此时channel c2开始通过值告诉task1开始执行
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;begin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 通过一个struct{}类型的channel将主进程阻塞住
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mutil&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;goroutines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;begin&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;AB34CD56EF78GH910IJ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Linux下快速构建Android编译环境</title>
      <link>https://bgbiao.top/post/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAandroid%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAandroid%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;背景: 在移动互联网时代，大多数的企业内部都有移动客户端，而移动客户端又因为OS的不同产生了两个派系，即&lt;code&gt;安卓(Android)&lt;/code&gt;和&lt;code&gt;苹果(IOS)&lt;/code&gt;，而对于互联网技术从业者来说，这两者最直接的区别就是&lt;code&gt;开源&lt;/code&gt;和&lt;code&gt;闭源&lt;/code&gt;，因而也导致了在构建移动客户端时，为了整体的稳定性和可靠性的考虑(甚至有成本的考虑)，需要进行分别编译，本篇文章记录下如何在Linux环境下构建&lt;code&gt;Android&lt;/code&gt;编译环境.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;

&lt;p&gt;通常，开发&lt;code&gt;苹果&lt;/code&gt;系列的软件均需要使用一些专有开发工具，比如&lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;xcode&lt;/a&gt;,而此工具必须运行在&lt;code&gt;Mac OS X&lt;/code&gt;设备上(当然你也可以尝试各种黑苹果的方式)，所以不论是对于个人开发者还是企业构建服务器来说，都需要购买更多的&lt;code&gt;Mac&lt;/code&gt;设备，通常，我知道的企业内部会使用&lt;code&gt;Mac Mini&lt;/code&gt;来作为苹果系列的构建环境。&lt;/p&gt;

&lt;p&gt;而作为&lt;code&gt;安卓(Android)&lt;/code&gt;系列的软件，由于本身是谷歌开源的移动端操作系统，因此对于底层开发环境和构建环境没有太高的要求。一般而言，开发者会使用&lt;a href=&#34;https://developer.android.com/studio/&#34;&gt;Android Studio&lt;/a&gt;来开发安卓系列的软件，而内置的命令行工具&lt;a href=&#34;https://developer.android.com/studio/command-line/&#34;&gt;command-line&lt;/a&gt;则默认提供了安卓软件的编译工具和环境。值得一提的是，由于&lt;code&gt;Android Studio&lt;/code&gt;是开源的，因此该工具也提供了多个平台的支持(Windows,Mac,Linux,Chrome OS)。而这也极大的降低了企业的整体成本，通常开发环境可以在任意的OS环境中进行开发，而企业内部也可以使用&lt;code&gt;Linux&lt;/code&gt;环境进行安卓软件的持续集成和交付.&lt;/p&gt;

&lt;p&gt;接下来主要讲解下如何在Linux环境下构建安卓的编译环境。&lt;/p&gt;

&lt;h3 id=&#34;linux下安卓-android-编译环境的搭建&#34;&gt;Linux下安卓(Android)编译环境的搭建&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;前提条件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需要注意的是，对于&lt;code&gt;安卓(Android)&lt;/code&gt;应用来说，一些依赖包的管理主要依靠&lt;code&gt;sdkmanager&lt;/code&gt;这个命令行工具，该工具可以在&lt;a href=&#34;https://developer.android.com/studio/&#34;&gt;Android Studio&lt;/a&gt;页面找到，并且支持&lt;code&gt;Windows&lt;/code&gt;,&lt;code&gt;Mac&lt;/code&gt;,&lt;code&gt;Linux&lt;/code&gt;三个不同平台的版本。&lt;/p&gt;

&lt;p&gt;同时，&lt;code&gt;安卓(Android)&lt;/code&gt;应用的开发工具&lt;code&gt;Android Studio&lt;/code&gt;使用&lt;code&gt;[Gradle](https://github.com/gradle/gradle)&lt;/code&gt;来进行编译和打包，因此对于&lt;code&gt;安卓(Android)&lt;/code&gt;应用而言，也将使用&lt;code&gt;gradle&lt;/code&gt;来进行编译和打包操作，该软件可以在&lt;a href=&#34;https://services.gradle.org/distributions/&#34;&gt;Gradle&lt;/a&gt;页面找到。&lt;/p&gt;

&lt;p&gt;其次，&lt;code&gt;[NDK(原生开发套件)](https://developer.android.google.cn/ndk/guides/)&lt;/code&gt;是一套工具，可以使开发者能够在 Android 应用中使用 C 和 C++ 代码，并提供众多平台库，开发者可使用这些平台库管理原生 Activity 和访问物理设备组件，例如传感器和轻触输入。该开发套件可以在&lt;a href=&#34;https://developer.android.google.cn/ndk/downloads&#34;&gt;NDK&lt;/a&gt;页面找到.&lt;/p&gt;

&lt;p&gt;最后，如上几个组件的底层语言均使用&lt;code&gt;java&lt;/code&gt;进行开发，因此需要安装&lt;code&gt;JDK&lt;/code&gt;相关环境。&lt;/p&gt;

&lt;p&gt;综上所述，在Linux环境下编译安卓(Android)环境需要如下几个组件:
- &lt;a href=&#34;https://www.oracle.com/technetwork/java/javase/downloads/index.html&#34;&gt;JDK&lt;/a&gt;: java语言的基础编译和运行环境
- &lt;a href=&#34;https://developer.android.com/studio/&#34;&gt;sdkmanager&lt;/a&gt;: 安卓(Android)应用下的依赖包管理器
- &lt;a href=&#34;https://developer.android.google.cn/ndk/downloads&#34;&gt;NDK&lt;/a&gt;: 安卓原生开发套件，可调用底层&lt;code&gt;C&lt;/code&gt;和&lt;code&gt;C++&lt;/code&gt;代码
- &lt;a href=&#34;https://github.com/gradle/gradle&#34;&gt;Gradle&lt;/a&gt;: 安卓系列软件编译工具(类似&lt;code&gt;maven&lt;/code&gt;之类的工具)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;快速安装基本环境&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 下载基础软件包
$ mkdir -p /opt/servers/ &amp;amp;&amp;amp; cd /opt/servers/
# JDK(可以选择openjdk)
$ wget http://dl.bgbiao.top/dav/jdk1.8.0_191.tar.gz
$ tar -zxf jdk1.8.0_191.tar.gz -C /opt/servers/


# 下载并配置sdkmanager
$ wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip
$ unzip sdk-tools-linux-4333796.zip 
$ mkdir -p /opt/sdk
$ ln -s /opt/servers/tools /opt/sdk/tools

# 配置环境变量
$ cat /etc/profile
export JAVA_HOME=/opt/servers/jdk1.8.0_191
export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATH
export PATH=${JAVA_HOME}/bin:${PATH}
export ANDROID_HOME=/opt/sdk
export PATH=${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}:${PATH}

# 测试sdkmanager使用
$ source /etc/profile
$ sdkmanager --list
Warning: File /root/.android/repositories.cfg could not be loaded.
Installed packages:
  Path    | Version | Description              | Location
  ------- | ------- | -------                  | -------
  tools   | 26.0.1  | Android SDK Tools 26.0.1 | tools/


# 安装指定版本的包
$ sdkmanager --list | grep cmake
Warning: File /root/.android/repositories.cfg could not be loaded.
  cmake;3.10.2.4988404              | 3.10.2       | CMake 3.10.2.4988404
  cmake;3.6.4111459                 | 3.6.4111459  | CMake 3.6.4111459

$ sdkmanager &amp;#39;cmake;3.6.4111459&amp;#39; 
....

# 下载并安装ndk
$ cd /opt/servers &amp;amp;&amp;amp; wget https://dl.google.com/android/repository/android-ndk-r16b-linux-x86_64.zip
$ unzip android-ndk-r16b-linux-x86_64.zip
$ ln -s /opt/servers/android-ndk-r16b /opt/ndk

# 配置ndk配置环境(增加如下配置)
$ cat /etc/profile
export NDK_HOME=/opt/ndk
export ANDROID_NDK_HOME=/opt/ndk
export PATH=$NDK_HOME:${ANDROID_NDK_HOME}:$PATH


# 下载并安装gradle
$ cd /opt/servers &amp;amp;&amp;amp; wget https://services.gradle.org/distributions/gradle-4.10.1-all.zip
$ unzip gradle-4.10.1-all.zip
$ ln -s /opt/servers/gradle-4.10.1 /opt/gradle

# 配置gradle环境(增加如下配置)
$ cat /etc/profile
export GRADLE_HOME=/opt/gradle
export PATH=${GRADLE_HOME}/bin:${PATH}

# 测试gradle
$ gradle -v

------------------------------------------------------------
Gradle 4.10.1
------------------------------------------------------------

Build time:   2018-09-12 11:33:27 UTC
Revision:     76c9179ea9bddc32810f9125ad97c3315c544919

Kotlin DSL:   1.0-rc-6
Kotlin:       1.2.61
Groovy:       2.4.15
Ant:          Apache Ant(TM) version 1.9.11 compiled on March 23 2018
JVM:          1.8.0_191 (Oracle Corporation 25.191-b12)
OS:           Linux 3.10.0-862.el7.x86_64 amd64&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;安装Android基础依赖&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 正式编译之前先生成license，并将&lt;code&gt;licenses&lt;/code&gt;目录移动到&lt;code&gt;/opt/sdk/&lt;/code&gt;下,和&lt;code&gt;sdkmanager&lt;/code&gt;的tools目录平级&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 安装android基础依赖包
$ sdkmanager &amp;#39;build-tools;28.0.3&amp;#39; &amp;#39;platforms;android-28&amp;#39; &amp;#39;cmake;3.6.4111459&amp;#39;

# 生成licences
$ sdkmanager --licenses
$ cp -rp licenses /opt/sdk/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;编译Android包&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 加载下整体环境变量
$ cat /etc/profile
....
....
export JAVA_HOME=/opt/servers/jdk1.8.0_191
export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATH
export PATH=${JAVA_HOME}/bin:${PATH}
export ANDROID_HOME=/opt/sdk
export PATH=${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}:${PATH}
export GRADLE_HOME=/opt/gradle
export PATH=${GRADLE_HOME}/bin:${PATH}
export NDK_HOME=/opt/ndk
export ANDROID_NDK_HOME=/opt/ndk
export PATH=$NDK_HOME:${ANDROID_NDK_HOME}:$PATH

$ source /etc/profile

# 下载安卓(android)应用的源码文件
$ git clone http://git.bgbiao.top/test-app.git

$ cd test-app
$ export ENV=&amp;#34;fNormal&amp;#34;
$ gradle clean assemble${ENV}Release
Starting a Gradle Daemon, 2 busy Daemons could not be reused, use --status for details
Parallel execution with configuration on demand is an incubating feature.
&amp;lt;-------------&amp;gt; 0% CONFIGURING [29s]
&amp;gt; root project &amp;gt; Resolve dependencies of :classpath &amp;gt; guava-18.0.pom &amp;gt; 3 KB/5 KB downloaded
&amp;gt; IDLE
&amp;gt; root project &amp;gt; Resolve dependencies of :classpath &amp;gt; commons-lang-2.6.pom &amp;gt; 9 KB/17 KB downloaded
&amp;gt; root project &amp;gt; Resolve dependencies of :classpath &amp;gt; osdetector-gradle-plugin-1.4.0.pom
....
....

BUILD SUCCESSFUL in 7m 7s
501 actionable tasks: 164 executed, 288 from cache, 49 up-to-date


# 查看生成的apk包
$ ls app/build/outputs/apk/fNormal/release/
app-fNormal-release.apk  output.json


# 安装二维码生成器
$ yum install qrencode-3.4.1-3.el7.x86_64 -y

# 将生成的apk包上传到指定的http服务中
$ curl -T app/build/outputs/apk/fNormal/release/app-fNormal-release.apk http://dl.bgbiao.top/dav/

# 给apk下载文件生成一个二维码
$ qrencode -o test-android.png &amp;#34;http://dl.bgbiao.top/dav/app-fNormal-release.apk&amp;#34;

# 上传二维码
$ curl -T test-android.png http://dl.bgbiao.top/dav/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;接下来，开发者用户即可以使用&lt;code&gt;http://dl.bgbiao.top/dav/test-android.png&lt;/code&gt;二维码地址进行扫描安装，对该版本的app功能进行测试验证了。&lt;/p&gt;

&lt;p&gt;需要注意的是，通常情况下，开发者如果使用&lt;code&gt;Mac OSX&lt;/code&gt;来编写代码，可能会在代码里使用类似&lt;code&gt;#include &#39;MD5.h&#39;&lt;/code&gt;之类的代码，看起来好像没有什么问题，但是因为&lt;code&gt;Mac OSX&lt;/code&gt;或&lt;code&gt;Windows&lt;/code&gt;系统中对大小写不敏感，所以那样写不会有什么太大影响，因为编译器可以找到系统中的&lt;code&gt;md5.h&lt;/code&gt;，但是在&lt;code&gt;Linux&lt;/code&gt;环境下，系统对大小写很敏感，如果代码里写死了&lt;code&gt;MD5.h&lt;/code&gt;，而系统库中是&lt;code&gt;md5.h&lt;/code&gt;，那肯定会编译失败，而且一般人看到该异常情况不会想到是大小写的问题。&lt;/p&gt;

&lt;p&gt;好了，趟坑算是趟完了，接下来提供一个福利，我自己基于以上构建历史环境打包了一个docker镜像，用以封装&lt;code&gt;Android&lt;/code&gt;编译的基本环境.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;docker镜像&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ cat Dockerfile
FROM centos:7.5.1804
MAINTAINER &amp;#34;BGBiao &amp;lt;https://bgbiao.top/&amp;gt;&amp;#34;
ENV TZ &amp;#34;Asia/Shanghai&amp;#34;

RUN yum clean all &amp;amp;&amp;amp; \
    yum install unzip wget curl -y &amp;amp;&amp;amp; \
    mkdir -p /opt/{servers,app} &amp;amp;&amp;amp; \
    cd /opt/servers/ &amp;amp;&amp;amp; \
    wget  http://dl.bgbiao.top/hadoop/jdk1.8.0_191.tar.gz &amp;amp;&amp;amp; \
    wget http://dl.bgbiao.top/dav/android-build/android-ndk-r16b-linux-x86_64.zip &amp;amp;&amp;amp; \
    wget http://dl.bgbiao.top/dav/android-build/gradle-4.10.1-all.zip &amp;amp;&amp;amp; \
    wget http://dl.bgbiao.top/dav/android-build/sdk-tools-linux-4333796.zip

RUN pushd /opt/servers &amp;amp;&amp;amp; \
    tar -zxf jdk1.8.0_191.tar.gz &amp;amp;&amp;amp; \
    unzip android-ndk-r16b-linux-x86_64.zip &amp;amp;&amp;amp; \
    unzip gradle-4.10.1-all.zip &amp;amp;&amp;amp; \
    unzip sdk-tools-linux-4333796.zip &amp;amp;&amp;amp; \
    mkdir -p /opt/sdkmanager &amp;amp;&amp;amp; \
    ln -s /opt/servers/tools /opt/sdkmanager/tools &amp;amp;&amp;amp; \
    ln -s /opt/servers/gradle-4.10.1 /opt/gradle &amp;amp;&amp;amp; \
    ln -s /opt/servers/android-ndk-r16b /opt/ndk

COPY profile /opt/servers/setenv.sh
$ cat profile
export JAVA_HOME=/opt/servers/jdk1.8.0_191
export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATH
export PATH=${JAVA_HOME}/bin:${PATH}
export ANDROID_HOME=/opt/sdkmanager
export PATH=${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}:${PATH}
export GRADLE_HOME=/opt/gradle
export PATH=${GRADLE_HOME}/bin:${PATH}
export NDK_HOME=/opt/ndk
export ANDROID_NDK_HOME=/opt/ndk
export PATH=$NDK_HOME:${ANDROID_NDK_HOME}:$PATH

# 用户可以根据上述Dockerfile构建镜像，同时也可以直接使用我构建好的一个镜像
$ docker pull xxbandy123/android-build-env:19-12-12

# 使用方式
# 基于上述镜像，用户需要使用sdkmanager 安装依赖的安卓库，同时编排好自己的gradle打包命令，在自己的安卓项目中直接编译即可
$ docker run -itd --name android-build-env:19-12-12 bash 
[root@4c05d4ded28d /]# source /opt/servers/setenv.sh
[root@4c05d4ded28d /]# git clone your-android-app.git
[root@4c05d4ded28d /]# sdkmanager &amp;#39;build-tools;28.0.3&amp;#39; &amp;#39;platforms;android-28&amp;#39; &amp;#39;cmake;3.6.4111459&amp;#39;
[root@4c05d4ded28d /]# sdkmanager --licenses
[root@4c05d4ded28d /]# cp -rp licenses ${ANDROID_HOME}/
[root@4c05d4ded28d /]# ls ${ANDROID_HOME}
build-tools  cmake  licenses  platforms  platform-tools  tools
# 开始执行编译(之后就是漫长的等待了)
[root@4c05d4ded28d /]# cd your-android-app &amp;amp;&amp;amp; gradle clean assembleRelease&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.通常持续集成会使用&lt;code&gt;Jenkins&lt;/code&gt;来进行编译打包，因此以上环境再接入Jenkins-salve之前需要安装&lt;code&gt;git&lt;/code&gt;客户端名&lt;/li&gt;
&lt;li&gt;2.通常客户端在测试包时会通过二维码扫描来下载包，因此环境上需要安装&lt;code&gt;qrencode&lt;/code&gt;软件，用于生成二维码&lt;/li&gt;
&lt;li&gt;3.需要注意&lt;code&gt;gradle&lt;/code&gt;在编译过程中会启动一个守护进程，如果编译异常结束，该守护进程可能不会立即释放，此时立即再次编译将有可能导致OOM&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>salt-master高可用架构</title>
      <link>https://bgbiao.top/post/salt%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/salt%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;背景: 新来这家公司使用&lt;a href=&#34;https://docs.saltstack.com/en/latest/&#34;&gt;Salt&lt;/a&gt;来作为基础配置库管理和自动化运维的工具，但是前期同事刚开始使用时只是简单使用，因此对于可用性和可靠性来说都会存在很大问题(具体可能出现的问题下面会提到)。不过作为一个专业的SRE或者运维人员，在使用一个基础组件时，必须要考虑的一个问题就是&lt;code&gt;可用性&lt;/code&gt;和&lt;code&gt;可靠性&lt;/code&gt;，以前使用&lt;a href=&#34;https://docs.ansible.com/&#34;&gt;Ansible&lt;/a&gt;作为配置管理和自动化运维工具时只需对&lt;code&gt;ssh-key&lt;/code&gt;或者密码进行管理即可通过水平扩容来保证高可用，而在&lt;code&gt;Salt&lt;/code&gt;中需要涉及到&lt;code&gt;salt-minion&lt;/code&gt;的发现以及&lt;code&gt;key&lt;/code&gt;的管理，接下来对&lt;code&gt;高可用的Salt集群架构&lt;/code&gt;进行介绍和实施。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;单节点salt-master问题&#34;&gt;单节点salt-master问题&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;比如说2c2g的机器在管理500+左右的ECS时，就会发现异常慢，而且调用salt-api会出现异常，此时如果去检查资源使用率，就会发现cpu和load都会暴涨，这是因为在使用salt的场景中大部分会使用同步调用，此时salt相关的进程会一直占用资源，直到minion返回结果&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当单节点主机异常时，整体的salt管控端将会失效，也就意味着全量的主机将无法被统一管理，这对于任何一个基于salt的自动化管理系统来说都是一个大灾难&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因此，基于以上考虑，salt-master高可用架构的构建对于任何一个&lt;code&gt;生产环境&lt;/code&gt;的自动化基础设施来讲都是刻不容缓的。&lt;/p&gt;

&lt;h3 id=&#34;salt-master高可用架构方案&#34;&gt;salt-master高可用架构方案&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.saltstack.com/en/master/topics/highavailability/index.html&#34;&gt;salt高可用方案&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在salt的官方文档中提供了三种高可用的方案:
- &lt;a href=&#34;https://docs.saltstack.com/en/master/topics/tutorials/multimaster.html#tutorial-multi-master&#34;&gt;多Master结构&lt;/a&gt;: 该种方式需要在&lt;code&gt;minion&lt;/code&gt;中配置多个master，此时默认所有的master都是在线的，同时多个master必须共享相同的&lt;code&gt;cryptographic keys&lt;/code&gt;，而且&lt;code&gt;minion keys&lt;/code&gt;必须在所有的master节点单独允许，此外还需要&lt;code&gt;file_roots&lt;/code&gt;和&lt;code&gt;pillar_roots&lt;/code&gt;保持同步
- 故障切换的多Master结构: 同上，都是多Master架构，默认情况下采用的是顺序master，不过可以通过&lt;code&gt;master_type&lt;/code&gt;参数修改为&lt;code&gt;failover&lt;/code&gt;，以此来保障多Master节点之间的故障切换(通常failover需要&lt;code&gt;master_alive_interval&lt;/code&gt;和&lt;code&gt;master_shuffle: True&lt;/code&gt;参数支持)
- &lt;a href=&#34;https://docs.saltstack.com/en/master/topics/topology/syndic.html#syndic&#34;&gt;syndic&lt;/a&gt;: salt-syndic其实不能算是一种严格的高可用架构，它有点儿类似代理的方式，即在主控master节点下设置syndic节点，由syndic节点来管控旗下的minion节点
- [多Master结构下的syndic]: 同上&lt;/p&gt;

&lt;p&gt;大概了解了集中高可用方案之后，我们做一个简单分析:&lt;br /&gt;
1. 首先我们为了保障高可用，需要允许任意节点都是高可用的，因此排除&lt;code&gt;syndic&lt;/code&gt;方案
2. 在&lt;code&gt;多master&lt;/code&gt;，&lt;code&gt;故障切换的多master&lt;/code&gt;和&lt;code&gt;多master下的syndic&lt;/code&gt;中，在可用用性和性能承受范围内考虑架构的简洁性，排除&lt;code&gt;多master下的syndic&lt;/code&gt;方案&lt;/p&gt;

&lt;p&gt;因此，最终可供我们选择的即为&lt;code&gt;多master&lt;/code&gt;方案，至于&lt;code&gt;failover&lt;/code&gt;其实只是&lt;code&gt;多master&lt;/code&gt;下的一种类型。&lt;/p&gt;

&lt;h3 id=&#34;salt-master高可用实施&#34;&gt;salt-master高可用实施&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 在&lt;code&gt;多Master结构&lt;/code&gt;中也提到了，&lt;code&gt;cryptographic key&lt;/code&gt;和&lt;code&gt;file_roots&lt;/code&gt;以及&lt;code&gt;pillar_roots&lt;/code&gt;需要保持同步，我们这里使用共享存储方式来实现多master节点的文件同步。&lt;/p&gt;

&lt;p&gt;如果使用的是阿里云，可以使用&lt;a href=&#34;https://www.aliyun.com/product/nas?source=5176.11533457&amp;amp;userCode=n0qkvlxu&amp;amp;type=copy&#34;&gt;NAS&lt;/a&gt;服务来实现多主机的共享文件存储.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.aliyun.com/product/nas?source=5176.11533457&amp;amp;userCode=n0qkvlxu&amp;amp;type=copy&#34;&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1g9sqdlv593j316i0eun0l.jpg&#34; alt=&#34;NAS存储&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果是非云，或者非阿里云的环境，可以采用传统的&lt;code&gt;NFS&lt;/code&gt;存储方式来实现共享存储，不过&lt;code&gt;NFS&lt;/code&gt;仅提供了共享，却不保证高可用性，如果需要大规模使用也是需要考虑备份错输。另外其他的方式就是采用&lt;code&gt;GlusterFS&lt;/code&gt;或者&lt;code&gt;CephFS&lt;/code&gt;之类的分布式共享存储方案。因此在迁移迁移阶段，我们先采用&lt;code&gt;GlusterFS&lt;/code&gt;来提供底层的高可用的共性存储(后期会直接迁移到阿里云的NAS服务)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.创建一个glusterfs volume&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 创建一个salt卷(复制卷)
$ gluster volume create salt replica 2 node4:/data/salt node5:/data/salt force

# 查看当前gluster集群下的volume(也供给k8s中的自建mysql使用)
$ gluster volume list
k8s
salt

# 启动salt volume
$ gluster volume start salt
$ gluster volume info salt


# 开启磁盘配额的限制
$ gluster volume quota salt enable
volume quota : success

$ gluster volume quota salt limit-usage / 200GB 90%
volume quota : success

# 查看磁盘配额情况
$ gluster volume quota salt list
+----  1 line: Path                   Hard-limit  Soft-limit      Used  Available  Soft-limit exceeded? Hard-limit exce
-------------------------------------------------------------------------------------------------------------------------------
/                                        200.0GB     90%(180.0GB)   0Bytes 200.0GB              No                   No

# 使用(被挂载节点需要绑定这个hosts)
# 所有的客户端主机均需要安装(glusterfs客户端)
$ yum install glusterfs glusterfs-client -y
$ cat /etc/hosts
10.0.21.74  node4
10.0.21.73 node5

$ mount -t glusterfs 10.0.21.73:/salt /opt/data/salt-data/
$ df -H | grep /opt/data/
10.0.21.73:/salt  215G     0  215G    0% /opt/data/salt-data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.修改salt-master配置文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 每次master接收minion的认证后会将认证文件统一存放在&lt;code&gt;pki_dir&lt;/code&gt;目录下，如果是在单master像多Master改造，需要保持该文件的全量同步&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# salt-master-1
$ grep -v ^#  /etc/salt/master  | grep -v ^$
interface: 10.0.217.78
pki_dir: /opt/data/salt-data/pki/master
timeout: 10
file_recv: True
log_file: /var/log/salt/master
log_level: info

# salt-master-2
$ grep -v ^#  /etc/salt/master  | grep -v ^$
interface: 10.0.79.88
pki_dir: /opt/data/salt-data/pki/master
timeout: 10
file_recv: True
log_file: /var/log/salt/master
log_level: info

# salt-minion配置示例
# 这里使用随机master，可以减少master的负载
# 如果使用failover模式的话，将永远只有失败之后使用另外的salt-master，整体性价比较低(不过可随时切换)
$ grep -v ^# /etc/salt/minion | grep -v ^$
master:
    - salt-master-2.bgbiao.top
    - salt-master-1.bgbiao.top
random_master: True
id: 10.0.79.90

# 分别重启salt-master和salt-minion进程
# 在任意一台salt-master中同步key
$ salt-key -a 10.0.79.90 -y

# 测试后发现两个salt-master均可以对目标主机执行操作
[root@salt-master-2 ~]# salt 10.0.79.90 test.ping
10.0.79.90:
    True

[root@salt-master-1 ~]# salt 10.0.79.90 test.ping
10.0.79.90:
    True&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.修改file_roots和pillar_sls目录&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 修改salt-master相关配置
# 增加file_roots目录(默认在/srv/salt/目录下)
$ grep -v ^#  /etc/salt/master  | grep -v ^$
interface: 10.0.79.88
pki_dir: /opt/data/salt-data/pki/master
timeout: 10
file_recv: True
file_roots:
  base:
    - /opt/data/salt-data/salt-sls/
log_file: /var/log/salt/master
log_level: info

# 将源master节点/srv/salt/下文件同步到/opt/data/salt-data/salt-sls/目录即可

# 测试salt state文件使用
# 测试hadoop客户端安装
[root@salt-master-2 salt-sls]# salt 10.0.79.90 state.sls hadoop-client.init-hadoop-env
....
....
Summary
-------------
Succeeded: 25 (changed=24)
Failed:     0
-------------
Total states run:     25

# 使用state初始化hadoop环境后测试hadoop客户端是否正常
[root@salt-master-2 salt-sls]# salt 10.0.79.90 cmd.run &amp;#39;source /etc/profile &amp;amp;&amp;amp; hadoop fs -ls /hive;&amp;#39;
10.0.79.90:
    19/12/10 16:37:59 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
    19/12/10 16:38:00 WARN shortcircuit.DomainSocketFactory: The short-circuit local reads feature cannot be used because libhadoop cannot be loaded.
    Found 3 items
    drwxr-x--x   - root   hadoop          0 2018-12-03 20:05 /hive/dw
    drwxr-x--x   - root   hadoop          0 2019-04-02 11:03 /hive/ods
    drwxr-x--x   - hadoop hadoop          0 2019-07-18 21:26 /hive/rpt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;在新的master节点验证完毕后，将全部master节点的&lt;code&gt;/etc/salt/master&lt;/code&gt;配置文件进行同步(&lt;code&gt;interface&lt;/code&gt;参数需要为指定的地址)即可.&lt;/p&gt;

&lt;h3 id=&#34;salt-minion接入使用&#34;&gt;salt-minion接入使用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 安装salt-minion
$ yum install salt-minion -y

# 修改salt-minion配置文件(id为唯一标识salt-minion)
$ cat /etc/salt/minion
master:
    - salt-master-2.bgbiao.top
    - salt-master-1.bgbiao.top
random_master: True
# 其实这里的id可以不用指定，默认为socket.getfqdn()函数值(其实就是ipv4)
id: 10.0.79.90

# 重启salt-minion
$ systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart salt-minion

# salt-master手动同意请求(可用设置成定期accept all)
$ salt-key -a 10.0.79.90 -y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;salt使用问题和注意事项&#34;&gt;salt使用问题和注意事项&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; master设备会为每个minion的auth-request请求计算签名。 在有许多minions和频繁的auth请求时，这可以消耗掉master服务器上相当多的CPU资源.&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>快速使用互联网检索有用数据</title>
      <link>https://bgbiao.top/post/%E4%BA%92%E8%81%94%E7%BD%91%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/%E4%BA%92%E8%81%94%E7%BD%91%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;背景: 随着互联网的普及和发展，互联网上充斥了大量的数据，如何从海量数据中识别自己最想要的数据成为了很多人头疼的问题，接下来给大家分享一些自己常用的检索数据的网站和方法.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;搜索引擎&#34;&gt;搜索引擎&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.搜索关键字&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在搜索关键字的时候，尽量选择具体的关键字，比如&lt;code&gt;大数据&lt;/code&gt;就没有&lt;code&gt;大数据就业&lt;/code&gt;，&lt;code&gt;大数据行业&lt;/code&gt;，&lt;code&gt;大数据企业&lt;/code&gt;具体；另外在搜索关键词的时候，通常推荐使用多次分词，也就是使用一个词一个词，词词之间使用空格分开，比如&lt;code&gt;大数据 云计算&lt;/code&gt;,同时在检索内容时，也可以根据关键程度将词前后位置进行转换。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.搜索技巧&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.文件类型搜索:在搜索引擎搜索框最后增加&lt;code&gt;空格 filetype:type&lt;/code&gt; type可以是[pdf,ppt,xls,doc]中的任意一个&lt;/li&gt;
&lt;li&gt;2.网站定位搜索:在搜索引擎搜索框最后增加&lt;code&gt;空格 site:URL&lt;/code&gt;  URL即为指定网站(其实各种搜索引擎都是去定向爬取各个网站的关键字进行收录的)&lt;/li&gt;
&lt;li&gt;3.限制性搜索: 使用&lt;code&gt;intitle&lt;/code&gt;,如在百度键入&lt;code&gt;intitie:大数据&lt;/code&gt;，限定于搜索标题中含有&lt;code&gt;大数据&lt;/code&gt;网页，如果输入&lt;code&gt;intitie:大数据市场规模&lt;/code&gt;限定于搜索标题中含有&lt;code&gt;大数据&lt;/code&gt;和&lt;code&gt;市场规模&lt;/code&gt;的网页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实上述三个搜索技巧，在各个搜索引擎中会默认支持工具，但是通常会被放在很隐蔽的地方&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1g9rfguy2qoj310m0hc42h.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;另外，除了常用的搜索引擎:百度,谷歌,必应,搜狗之外，通常还会有一些垂直领域或者非商业化的搜索引擎.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google学术搜索: &lt;a href=&#34;http://scholar.google.com/&#34;&gt;http://scholar.google.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;科技文献搜索: &lt;a href=&#34;http://www.scirus.com&#34;&gt;http://www.scirus.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;学术搜索引擎: &lt;a href=&#34;http://www.base-search.net/&#34;&gt;http://www.base-search.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;交叉学科门户网站: &lt;a href=&#34;http://www.vascoda.de/&#34;&gt;http://www.vascoda.de/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个神奇的网站: &lt;a href=&#34;http://www.goole.com/&#34;&gt;http://www.goole.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Amazon推出的: &lt;a href=&#34;http://www.a9.com&#34;&gt;http://www.a9.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;免费paper检索: &lt;a href=&#34;http://www.findarticles.com/&#34;&gt;http://www.findarticles.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;计算机和信息科学: &lt;a href=&#34;http://citeseer.ist.psu.edu/&#34;&gt;http://citeseer.ist.psu.edu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;谷歌马甲: &lt;a href=&#34;https://search.aol.com/&#34;&gt;https://search.aol.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;数据库&#34;&gt;数据库&lt;/h3&gt;

&lt;p&gt;数据库是研究人员重要的数据来源之一，目前券商、基金研究研究机构都购买有商业数据库，目前研究用的数据库主要分为两大类，一是商业数据库，二是学术数据库。&lt;/p&gt;

&lt;p&gt;由于一般是个人使用，这里仅介绍一些免费可用的数据库.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数据汇: &lt;a href=&#34;http://www.shujuhui.com/database/&#34;&gt;http://www.shujuhui.com/database/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;数据圈子: &lt;a href=&#34;http://www.shujuquan.com.cn/&#34;&gt;http://www.shujuquan.com.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FRED: &lt;a href=&#34;http://research.stlouisfed.org/fred2/&#34;&gt;http://research.stlouisfed.org/fred2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OECD: &lt;a href=&#34;http://www.oecd-ilibrary.org/economics&#34;&gt;http://www.oecd-ilibrary.org/economics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;台湾学术数据库: &lt;a href=&#34;http://fedetd.mis.nsysu.edu.tw/&#34;&gt;http://fedetd.mis.nsysu.edu.tw/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;台湾大学电子书: &lt;a href=&#34;http://ebooks.lib.ntu.edu.tw/Home/ListBooks&#34;&gt;http://ebooks.lib.ntu.edu.tw/Home/ListBooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;共享文库&#34;&gt;共享文库&lt;/h3&gt;

&lt;p&gt;主要介绍下国外的，国内的&lt;code&gt;百度文库&lt;/code&gt;,&lt;code&gt;道客巴巴&lt;/code&gt;之类的文档太差，而且还收费.&lt;/p&gt;

&lt;p&gt;Scribd：&lt;a href=&#34;http://www.scribd.com&#34;&gt;http://www.scribd.com&lt;/a&gt;
Docstoc: &lt;a href=&#34;http://www.docstoc.com&#34;&gt;http://www.docstoc.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;专业网站&#34;&gt;专业网站&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;人大经济论坛: &lt;a href=&#34;http://bbs.pinggu.org/&#34;&gt;http://bbs.pinggu.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;经济学家: &lt;a href=&#34;http://bbs.jjxj.org/&#34;&gt;http://bbs.jjxj.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;随意网-经济论坛: &lt;a href=&#34;http://economic.5d6d.net/&#34;&gt;http://economic.5d6d.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;理想在线: &lt;a href=&#34;http://www.55188.com&#34;&gt;股票券商研究报告&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;迈博汇金: &lt;a href=&#34;http://www.hibor.com.cn/&#34;&gt;股票券商研究报告&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;博瑞金融: &lt;a href=&#34;http://www.brjr.com.cn/forum.php&#34;&gt;金融行业专业型论坛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;华尔街社区: &lt;a href=&#34;http://forum.cnwallstreet.com/index.php&#34;&gt;国内专业的金融论坛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中华股权投资论坛: &lt;a href=&#34;http://www.tzluntan.com/&#34;&gt;pe投资专业型论坛&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;政府数据&#34;&gt;政府数据&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;国家统计局: &lt;a href=&#34;http://www.stats.gov.cn/&#34;&gt;http://www.stats.gov.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;工业和信息化部: &lt;a href=&#34;http://www.miit.gov.cn&#34;&gt;http://www.miit.gov.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中国人民银行: &lt;a href=&#34;http://www.pbc.gov.cn/&#34;&gt;http://www.pbc.gov.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;银监会: &lt;a href=&#34;http://www.cbrc.gov.cn&#34;&gt;http://www.cbrc.gov.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中国海关: &lt;a href=&#34;http://www.customs.gov.cn&#34;&gt;http://www.customs.gov.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;国家知识产权局: &lt;a href=&#34;http://www.sipo.gov.cn&#34;&gt;http://www.sipo.gov.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中国证监会: &lt;a href=&#34;http://www.csrc.gov.cn&#34;&gt;http://www.csrc.gov.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;巨潮信息网:&lt;a href=&#34;http://www.cninfo.com.cn/&#34;&gt;中国资本市场指定披露平台&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;证券交易所&#34;&gt;证券交易所&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;上海证券交易所: &lt;a href=&#34;http://www.sse.com.cn/&#34;&gt;http://www.sse.com.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;深圳证券交易所: &lt;a href=&#34;http://www.szse.cn/&#34;&gt;http://www.szse.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;全国中小企业股份转让系统: &lt;a href=&#34;http://www.neeq.com.cn/&#34;&gt;http://www.neeq.com.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;香港证券交易所: &lt;a href=&#34;http://www.hkexnews.hk/index_c.htm&#34;&gt;http://www.hkexnews.hk/index_c.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;台湾证券交易所: &lt;a href=&#34;http://www.tse.com.tw/ch/index.php&#34;&gt;http://www.tse.com.tw/ch/index.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新加坡证券交易所: &lt;a href=&#34;http://www.sgx.com/&#34;&gt;http://www.sgx.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;纽约证券交易所: &lt;a href=&#34;http://www.nyse.com&#34;&gt;http://www.nyse.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;纳斯达克证券交易所: &lt;a href=&#34;http://www.nasdaq.com&#34;&gt;http://www.nasdaq.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;行业网站&#34;&gt;行业网站&lt;/h3&gt;

&lt;p&gt;互联网及传媒
1）资讯类
新浪科技 &lt;a href=&#34;http://tech.sina.com.cn/&#34;&gt;http://tech.sina.com.cn/&lt;/a&gt;
腾讯科技 &lt;a href=&#34;http://tech.qq.com/&#34;&gt;http://tech.qq.com/&lt;/a&gt;
艾瑞网 &lt;a href=&#34;http://www.iresearch.cn/&#34;&gt;http://www.iresearch.cn/&lt;/a&gt;
艺恩网 &lt;a href=&#34;http://www.entgroup.cn/&#34;&gt;http://www.entgroup.cn/&lt;/a&gt;
虎嗅网 &lt;a href=&#34;http://wwww.huxiu.com/&#34;&gt;http://wwww.huxiu.com/&lt;/a&gt;
36kr &lt;a href=&#34;http://36kr.com/&#34;&gt;http://36kr.com/&lt;/a&gt;
钛媒体 &lt;a href=&#34;http://www.tmtpost.com/&#34;&gt;http://www.tmtpost.com/&lt;/a&gt;
游戏大观 &lt;a href=&#34;http://www.gamelook.com.cn/&#34;&gt;http://www.gamelook.com.cn/&lt;/a&gt;
亿欧网 &lt;a href=&#34;http://www.iyiou.com/&#34;&gt;http://www.iyiou.com/&lt;/a&gt;
媒介360 &lt;a href=&#34;http://www.chinamedia360.com/main&#34;&gt;http://www.chinamedia360.com/main&lt;/a&gt;
　
2）数据类
中国票房 &lt;a href=&#34;http://www.cbooo.cn/&#34;&gt;http://www.cbooo.cn/&lt;/a&gt;
中国互联网络信息中心 &lt;a href=&#34;http://www.cnnic.net.cn/&#34;&gt;http://www.cnnic.net.cn/&lt;/a&gt;
艾瑞网
&lt;a href=&#34;http://www.iresearch.com.cn/report/viewlist.aspx&#34;&gt;http://www.iresearch.com.cn/report/viewlist.aspx&lt;/a&gt;
易观智库 &lt;a href=&#34;http://www.analysys.cn/&#34;&gt;http://www.analysys.cn/&lt;/a&gt;
游戏产业网
&lt;a href=&#34;http://www.cgigc.com.cn/list/79644663134.html&#34;&gt;http://www.cgigc.com.cn/list/79644663134.html&lt;/a&gt;
百度指数 &lt;a href=&#34;http://index.baidu.com/&#34;&gt;http://index.baidu.com/&lt;/a&gt;
大数据导航 &lt;a href=&#34;http://hao.199it.com/&#34;&gt;http://hao.199it.com/&lt;/a&gt;
CSM（电视收视率） &lt;a href=&#34;http://www.csm.com.cn/&#34;&gt;http://www.csm.com.cn/&lt;/a&gt;
微排片 &lt;a href=&#34;http://www.weipaipian.com&#34;&gt;http://www.weipaipian.com&lt;/a&gt;
　
医药行业
1）样本医院数据
化药、生物药和中药注射剂 &lt;a href=&#34;http://pdb.pharmadl.com/&#34;&gt;http://pdb.pharmadl.com/&lt;/a&gt;
中成药、化药 &lt;a href=&#34;http://www.menet.com.cn/&#34;&gt;http://www.menet.com.cn/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;银行业
1）新闻资讯
中证网 &lt;a href=&#34;http://www.cs.com.cn/xwzx/hg/&#34;&gt;http://www.cs.com.cn/xwzx/hg/&lt;/a&gt;
一财网 &lt;a href=&#34;http://www.yicai.com/economy&#34;&gt;http://www.yicai.com/economy&lt;/a&gt;
财新网 &lt;a href=&#34;http://finance.caixin.com/bank/&#34;&gt;http://finance.caixin.com/bank/&lt;/a&gt;
华尔街见闻 &lt;a href=&#34;http://wallstreetcn.com/news?cid=19&#34;&gt;http://wallstreetcn.com/news?cid=19&lt;/a&gt;
新浪财经 finance.sina.com.cn/
证券时报网 &lt;a href=&#34;http://www.stcn.com/&#34;&gt;http://www.stcn.com/&lt;/a&gt;
中国金融新闻网
&lt;a href=&#34;http://www.financialnews.com.cn/yh/xw/&#34;&gt;http://www.financialnews.com.cn/yh/xw/&lt;/a&gt;
　
2）公告、数据查找
中国货币网 &lt;a href=&#34;http://www.chinamoney.com.cn/index.html&#34;&gt;http://www.chinamoney.com.cn/index.html&lt;/a&gt;
巨潮网 &lt;a href=&#34;http://www.cninfo.com.cn/&#34;&gt;http://www.cninfo.com.cn/&lt;/a&gt;
统计局 www.stats.gov.cn/
中国人民银行 www.pbc.gov.cn
银监会 &lt;a href=&#34;http://www.cbrc.gov.cn/index.html&#34;&gt;http://www.cbrc.gov.cn/index.html&lt;/a&gt;
上海证券交易所 www.sse.com.cn/
深圳证券交易所 www.szse.cn/
最常用wind股票数据库。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>基于阿里云Terway网络的Kubernetes集群实践</title>
      <link>https://bgbiao.top/post/k8s-ali-terway/</link>
      <pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/k8s-ali-terway/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;背景: 众所周知的是在构建一个Kubernetes集群时，容器网络通常会使用一个独立的私有子网来构建Kubernetes集群内部的pod网络和service网络，但在实际的业务场景中，没有企业会在一段时间内将内部全部的服务都迁移到Kubernetes集群中(因为涉及到业务架构以及整体业务的可靠性)，因而会产生一些Kubernetes集群内部服务和集群外部服务互相调用的场景，当然如果是HTTP服务，我们可以采用LVS、Nginx、HAProxy之类的代理工具工具进行集群内外的流量转发，但如果是TCP服务，比如使用Dubbo框架时，生产者和消费者需要直连，当生产者和消费者不在一个可以互联互通的网络下会比较麻烦，这也就是为什么大厂在规模化使用Kubernetes时首先需要解决的就是网络问题的原因了。比如我们在数科的时候就采用的是&lt;a href=&#34;https://github.com/contiv/install&#34;&gt;Contiv&lt;/a&gt;+BGP的模式来实现容器网络和容器外网络的互联互通的，而这通常需要一个比较专业的SDN团队来构建和维护。而作为创业公司通常会使用公有云来承载自己的业务，这种轻资产模式的好处就是底层会有专业的团队来提供保障，因此考虑到业务需求我们采用了阿里云的terway网络插件来实现内部的Kubernetes集群网络.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;现有网络插件&#34;&gt;现有网络插件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/coreos/flannel&#34;&gt;Flannel&lt;/a&gt;: Flannel是最早CoreOS团队开源的网络插件，用于让集群中不同节点创建的容器都具有集群内全局唯一的网络(集群外无法感知)，也是当前Kubernetes开源方案中比较成熟的方案，支持HostGW和VXLAN模式&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/projectcalico/&#34;&gt;Calico&lt;/a&gt;: Calico是一个纯3层的数据中心网络方案，支持IPIP和BGP模式，后者可以无缝集成像OpenStack这种IaaS云架构，能够提供可控的VM、容器、裸机之间的IP通信，但是需要网络设备对BGP的支持(阿里云vpc子网内应该是不支持BGP的); 同时可以支持基于iptables的网络策略控制&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contiv/install&#34;&gt;Contiv&lt;/a&gt;: Contiv是思科开源的用于跨虚拟机、裸机、公有云或私有云的异构容器部署的开源容器网络架构，可支持2层、3层网络(通常也需要BGP的支持)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AliyunContainerService/terway&#34;&gt;Terway&lt;/a&gt;: Terway是阿里云开源的基于VPC网络的CNI插件，支持VPC和ENI模式，后者可实现容器网络使用vpc子网网络&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上就是当前开源Kubernetes集群中使用较多的集中网络方案，我们的业务需求中也是需要打通容器内外的网络，因此在成本、效率以及稳定性上优先选择采用阿里云的Terway网络方案来满足我们的Kubernetes集群需求.&lt;/p&gt;

&lt;h3 id=&#34;基于阿里云ecs搭建terway网络的kubernetes集群&#34;&gt;基于阿里云ECS搭建Terway网络的Kubernetes集群&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; &lt;a href=&#34;https://www.aliyun.com/product/kubernetes?aly_as=TZbDoxLq&amp;amp;source=5176.11533457&amp;amp;userCode=n0qkvlxu&amp;amp;type=copy&#34;&gt;阿里云容器服务ACK&lt;/a&gt;默认也支持两种网络，Flannel和Terway，前者和开源插件基本一致，后者支持VPC模式和ENI模式，VPC模式可实现容器网络使用vpc内交换机子网地址，但是默认无法和其他交换机下的ecs主机通信，ENI模式会给pod容器组分配一块弹性网卡来实现和集群外网络的互联互通，但Terway网络下的ENI模式需要部分特殊机型才可以支持。&lt;/p&gt;

&lt;p&gt;由于&lt;a href=&#34;https://www.aliyun.com/product/kubernetes?aly_as=TZbDoxLq&amp;amp;source=5176.11533457&amp;amp;userCode=n0qkvlxu&amp;amp;type=copy&#34;&gt;ACK&lt;/a&gt;下Terway的ENI模式对机型的要求，我们采用购买&lt;a href=&#34;https://www.aliyun.com/product/ecs?aly_as=UfM12PdU&amp;amp;source=5176.11533457&amp;amp;userCode=n0qkvlxu&amp;amp;type=copy&#34;&gt;ECS&lt;/a&gt;来自己搭建单节点集群测试&lt;code&gt;Terway&lt;/code&gt;网络下容器的互联互通.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;前提条件:&lt;/code&gt;
- 已经创建了VPC子网
- 在VPC子网下创建2个虚拟交换机(模拟Kubernetes集群网络和ECS网络)
- 分别在两个子网购买两台ECS主机(模拟ECS到容器的互联互通)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; Terway网络插件官方验证过的os镜像为&lt;code&gt;Centos 7.4/7.6&lt;/code&gt;，购买ecs时需要注意&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.使用kubeadm安装k8s单节点集群&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 因为要使用terway网络将pod和ecs网络打通，因此需要将内核参数&lt;code&gt;rp_filter&lt;/code&gt;全部设置为&lt;code&gt;0&lt;/code&gt;(对数据包源地址不进行校验)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 更新yum源并安装k8s相关组件
$ yum update
$ cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF

$ yum clean all
$ yum install kubelet kubeadm kubectl --disableexcludes=kubernetes -y
$ yum install docker -y


# 启动kubelet
## 此时kubelet会无限重试，因为会链接apiserver
$ systemctl restart kubelet

# 启动docker
## 注意:需要注意kubelet中的cgroupfs类型要和docker的cgroupfs一致
$ systemctl restart docker

# 查看kubeadm 启动集群时所需镜像
# 注意:kubeadm默认使用的是谷歌的镜像仓库，可将镜像仓库换成阿里云镜像仓库
# 将k8s.gcr.io 替换成registry.cn-hangzhou.aliyuncs.com/google_containers 即可
$ kubeadm config images list
k8s.gcr.io/kube-apiserver:v1.16.2
k8s.gcr.io/kube-controller-manager:v1.16.2
k8s.gcr.io/kube-scheduler:v1.16.2
k8s.gcr.io/kube-proxy:v1.16.2
k8s.gcr.io/pause:3.1
k8s.gcr.io/etcd:3.3.15-0
k8s.gcr.io/coredns:1.6.2

# 初始化集群
## 注意:初始化时需要指定vpc的子网，否则后期可能会发现无法识别vpc子网
$ kubeadm  init  --pod-network-cidr=172.16.48.0/20
....
....
Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &amp;#34;kubectl apply -f [podnetwork].yaml&amp;#34; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.16.62.70:6443 --token j4b3xp.78izi2bmitxxx \
    --discovery-token-ca-cert-hash sha256:fd1ff50cbabd4fb22cb9a866052fbdc0db7da662168cda702exxxxxxxx

# 接下来按照上述提示创建配置文件
$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

# 查看k8s的node节点(当前处于NotReady状态,因为kubelet还没有成功启动)
$ # kubectl version
Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;16&amp;#34;, GitVersion:&amp;#34;v1.16.2&amp;#34;, GitCommit:&amp;#34;c97fe5036ef3df2967d086711e6c0c405941e14b&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2019-10-15T19:18:23Z&amp;#34;, GoVersion:&amp;#34;go1.12.10&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;}
Server Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;16&amp;#34;, GitVersion:&amp;#34;v1.16.2&amp;#34;, GitCommit:&amp;#34;c97fe5036ef3df2967d086711e6c0c405941e14b&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2019-10-15T19:09:08Z&amp;#34;, GoVersion:&amp;#34;go1.12.10&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;}

$ kubectl  get nodes
NAME                      STATUS     ROLES    AGE     VERSION
izbp18diszrt8m41b2fbpsz   NotReady   master   7m19s   v1.16.2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2. 给k8s集群创建terway网络&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 使用kubeadm创建的k8s集群是v1.16的，官方提供的yaml文件中需要稍微修改下DaemonSet的相关部分&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 给集群创建k8s的cni网络插件，也就是前面说的terway插件
# 需要修改阿里云相关的配置(ak,as,subnet,security_group)
$ curl -O https://raw.githubusercontent.com/BGBiao/k8s-ansible-playbooks/master/manifest/cni/terway/podnetwork.yaml

# 修改podnetwork.yaml中的配置(指定阿里云的ak和as认证信息以及vpc子网和安全组信息)
$ cat podnetwork.yaml
...
...
  eni_conf: |
    {
      &amp;#34;version&amp;#34;: &amp;#34;1&amp;#34;,
      &amp;#34;access_key&amp;#34;: &amp;#34;your ak&amp;#34;,
      &amp;#34;access_secret&amp;#34;: &amp;#34;your as&amp;#34;,
      &amp;#34;service_cidr&amp;#34;: &amp;#34;your vpc subnet&amp;#34;,
      &amp;#34;security_group&amp;#34;: &amp;#34;your 安全组id&amp;#34;,
      &amp;#34;max_pool_size&amp;#34;: 5,
      &amp;#34;min_pool_size&amp;#34;: 0
    }
....
....
          - name: Network
            value: &amp;#34;your vpc subnet&amp;#34;
....

# 创建terway网络
$ kubectl apply -f podnetwork.yaml
serviceaccount/terway created
clusterrole.rbac.authorization.k8s.io/terway-pod-reader created
clusterrolebinding.rbac.authorization.k8s.io/terway-binding created
configmap/eni-config created
daemonset.apps/terway created
customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created

# 查看cni相关容器以及node状态
$ kubectl  get nodes
NAME                      STATUS   ROLES    AGE   VERSION
izbp18diszrt8m41b2fbpsz   Ready    master   28m   v1.16.2

$ kubectl  get pods -A | grep terway
kube-system   terway-b9vm8                                      2/2     Running   0          6m53s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;至此，我们就已经完成了kubernetes的terway网络单节点集群，接下来就可以尝试让k8s集群中的pod来使用vpc的网络了，以便可以实现k8s集群内部的容器网络和其他ecs主机的网络是平行的.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 测试terway网络&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 我们使用kubeadm构建的k8s单节点集群，而kubeadm默认给master节点设置了taint，因此测试前需要去除taint&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 去除taint
$ kubectl taint nodes --all node-role.kubernetes.io/master-
node/izbp18diszrt8m41b2fbpsz untainted

# 默认创建一个vpc模式的deployment
$ kubectl  apply -f https://raw.githubusercontent.com/BGBiao/k8s-ansible-playbooks/master/manifest/cni/terway/nginx.yaml
namespace/myapp configured
deployment.apps/nginx-test created

# 可以看到容器网络地址其实是指定的vpc子网内地址
$ kubectl  get pods -n myapp  -o wide
NAME                         READY   STATUS    RESTARTS   AGE     IP            NODE                      NOMINATED NODE   READINESS GATES
nginx-test-d56c87dd9-26mzs   1/1     Running   0          2m40s   172.16.48.5   izbp18diszrt8m41b2fbpsz   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
nginx-test-d56c87dd9-hp2rv   1/1     Running   0          2m40s   172.16.48.4   izbp18diszrt8m41b2fbpsz   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;

$ curl 172.16.48.4 -I
HTTP/1.1 200 OK
Server: nginx/1.17.5
Date: Sat, 26 Oct 2019 08:21:28 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 22 Oct 2019 14:30:00 GMT
Connection: keep-alive
ETag: &amp;#34;5daf1268-264&amp;#34;
Accept-Ranges: bytes

$ curl 172.16.48.5 -I
HTTP/1.1 200 OK
Server: nginx/1.17.5
Date: Sat, 26 Oct 2019 08:21:31 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 22 Oct 2019 14:30:00 GMT
Connection: keep-alive
ETag: &amp;#34;5daf1268-264&amp;#34;
Accept-Ranges: bytes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以发现，在集群内部使用terway网络已经没有任何问题了,但是我们在其他ECS主机去访问pod网络时发现依然无法访问(因为默认使用的是terway的VPC模式，其实就是类似于calico的模式了.这个时候就需要用到eni模式了，即给k8s节点增加eni弹性网卡，然后pod的网络流量统一通过node节点的eni网卡传输，此时就可以很好的和整个内网vpc打通了)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.测试ENI模式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 在上面的nginx配置中增加&lt;code&gt;limits: aliyun/eni: N&lt;/code&gt;即可,需要注意的是N表示node节点上eni弹性网卡的数量，该数量取决于阿里云ecs不同规格对eni的限制.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/25378.html?spm=a2c4g.11174283.6.594.7eda52fear19UA&#34;&gt;阿里云ecs规格详情&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 注意:
# 由于实验中采用的是4c8g的k8s单节点集群，因此只能创建2个弹性网卡，这也就意味着如果不增加任何网络配置，该node节点最多只能运行2个和整个VPC网络中其他ecs主机互联互通的pod

$ cat nginx.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-v2
  namespace: myapp
spec:
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  replicas: 2
  selector:
    matchLabels:
      app: nginx-v2
      profile: prod
  template:
    metadata:
      labels:
        app: nginx-v2
        profile: prod
    spec:
      containers:
      - name: nginx-v2
        image: nginx:latest
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 200m
            memory: 215Mi
          limits:
            cpu: 200m
            memory: 215Mi
            aliyun/eni: 1


# 创建带eni的pod
$ kubectl  apply -f nginx.yaml
deployment.apps/nginx-v2 configured

# 查看pod状态
$ kubectl  get pods -n myapp -o wide
NAME                         READY   STATUS    RESTARTS   AGE   IP             NODE                      NOMINATED NODE   READINESS GATES
nginx-test-d56c87dd9-26mzs   1/1     Running   0          19m   172.16.48.5    izbp18diszrt8m41b2fbpsz   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
nginx-test-d56c87dd9-hp2rv   1/1     Running   0          19m   172.16.48.4    izbp18diszrt8m41b2fbpsz   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
nginx-v2-7548466fc8-d4klv    1/1     Running   0          61s   172.16.62.74   izbp18diszrt8m41b2fbpsz   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
nginx-v2-7548466fc8-x7ft9    1/1     Running   0          61s   172.16.62.75   izbp18diszrt8m41b2fbpsz   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;

# 在k8snode节点访问
$ curl 172.16.62.75 -I
HTTP/1.1 200 OK
Server: nginx/1.17.5
Date: Sat, 26 Oct 2019 08:38:20 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 22 Oct 2019 14:30:00 GMT
Connection: keep-alive
ETag: &amp;#34;5daf1268-264&amp;#34;
Accept-Ranges: bytes

$ curl 172.16.62.74 -I
HTTP/1.1 200 OK
Server: nginx/1.17.5
Date: Sat, 26 Oct 2019 08:38:23 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 22 Oct 2019 14:30:00 GMT
Connection: keep-alive
ETag: &amp;#34;5daf1268-264&amp;#34;
Accept-Ranges: bytes

# 此时发现创建的带eni和不带eni的两个pod在k8s集群内部已经完全可以访问&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5. 测试集群内外部网络互联互通&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; k8s集群使用的是vpc网络，因此默认集群访问外部ECS网络默认是没有问题，这里主要测试外部ECS网络是否可以直连pod网络进行通信&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 在同vpc环境下其他ecs主机上访问
# 首先分别ping 上述四个pod的网络(可以发现eni模式下容器默认可以ping通)
$ for i in 172.16.48.5 172.16.48.4 172.16.62.74 172.16.62.75 ;do ping -c 1 -w 1 $i;done
PING 172.16.48.5 (172.16.48.5) 56(84) bytes of data.

--- 172.16.48.5 ping statistics ---
2 packets transmitted, 0 received, 100% packet loss, time 999ms

PING 172.16.48.4 (172.16.48.4) 56(84) bytes of data.

--- 172.16.48.4 ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms

PING 172.16.62.74 (172.16.62.74) 56(84) bytes of data.
64 bytes from 172.16.62.74: icmp_seq=1 ttl=64 time=0.782 ms

--- 172.16.62.74 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.782/0.782/0.782/0.000 ms
PING 172.16.62.75 (172.16.62.75) 56(84) bytes of data.
64 bytes from 172.16.62.75: icmp_seq=1 ttl=64 time=0.719 ms

--- 172.16.62.75 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.719/0.719/0.719/0.000 ms

# 测试nginx服务(依然是带eni的网络可达)
$ for i in 172.16.48.5 172.16.48.4 172.16.62.74 172.16.62.75 ;do curl --connect-timeout 1 -I  $i;done
curl: (28) Connection timed out after 1001 milliseconds
curl: (28) Connection timed out after 1001 milliseconds
HTTP/1.1 200 OK
Server: nginx/1.17.5
Date: Sat, 26 Oct 2019 08:44:21 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 22 Oct 2019 14:30:00 GMT
Connection: keep-alive
ETag: &amp;#34;5daf1268-264&amp;#34;
Accept-Ranges: bytes

HTTP/1.1 200 OK
Server: nginx/1.17.5
Date: Sat, 26 Oct 2019 08:44:21 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 22 Oct 2019 14:30:00 GMT
Connection: keep-alive
ETag: &amp;#34;5daf1268-264&amp;#34;
Accept-Ranges: bytes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;此时，我们查看该node节点上的网卡信息时可以看到，增加了两块辅助网卡&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/2577135-13753a99b3036e4c.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. 其他问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;前面我们提到过，如果使用&lt;code&gt;eni&lt;/code&gt;模式，不同的ECS规格可以绑定的&lt;code&gt;ENI&lt;/code&gt;弹性网卡是有限的，也就是说可以创建互联互通的容器是有限的，我们这里验证下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 如果我们这个时候再创建带eni的pod时，就会发现无法创建成功(因为4c8g的ecs最大只支持两个eni)
$ kubectl  apply -f nginx-v3.yaml
deployment.apps/nginx-v3 created
[root@iZbp18diszrt8m41b2fbpsZ ~]# kubectl  get pods -n myapp -o wide
NAME                         READY   STATUS    RESTARTS   AGE   IP             NODE                      NOMINATED NODE   READINESS GATES
nginx-test-d56c87dd9-26mzs   1/1     Running   0          48m   172.16.48.5    izbp18diszrt8m41b2fbpsz   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
nginx-test-d56c87dd9-hp2rv   1/1     Running   0          48m   172.16.48.4    izbp18diszrt8m41b2fbpsz   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
nginx-v2-7548466fc8-d4klv    1/1     Running   0          29m   172.16.62.74   izbp18diszrt8m41b2fbpsz   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
nginx-v2-7548466fc8-x7ft9    1/1     Running   0          29m   172.16.62.75   izbp18diszrt8m41b2fbpsz   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
nginx-v3-79dd8fb956-4ghgb    0/1     Pending   0          2s    &amp;lt;none&amp;gt;         &amp;lt;none&amp;gt;                    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
nginx-v3-79dd8fb956-str2k    0/1     Pending   0          2s    &amp;lt;none&amp;gt;         &amp;lt;none&amp;gt;                    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;

# 查看Pending的详情
$ kubectl  describe pods -n myapp nginx-v3-79dd8fb956-4ghgb
....
....
Events:
  Type     Reason            Age        From               Message
  ----     ------            ----       ----               -------
  Warning  FailedScheduling  &amp;lt;unknown&amp;gt;  default-scheduler  0/1 nodes are available: 1 Insufficient aliyun/eni.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以发现，当使用terway网络的&lt;code&gt;ENI&lt;/code&gt;模式时，如果该ecs可支持的弹性网卡达到限制，k8s就会调度失败。&lt;/p&gt;

&lt;p&gt;所以问题就来了，通常情况下，我们是希望使用k8s来弹性扩容，我们会希望k8s节点上运行更多的pod，但用了terway网络之后我们发现，创建和k8s集群外ecs主机通信的pod数量竟然受eni的限制，这可得了?&lt;/p&gt;

&lt;p&gt;其实不用担心，阿里云同学的回复是，这种情况下在vpc上设置静态路由即可实现node节点上的多pod和集群外ecs主机互通，此时ecs主机上的eni仅相当于是整个容器的网络出口，到这里其实我们就可以放心了，因为使用terway后，及时不用eni模式，pod网络也是全局唯一的，这个时候适当增加一些静态路由，即可实现整个vpc内k8s容器网络和容器外的ecs主机网络互联互通，很好的解决了我们一开始的问题。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;阿里云容器服务ACK的terway网络模式下的集群会默认创建一些路由规则，因此当你使用ACK集群时，只要购买了支持&lt;code&gt;terway&lt;/code&gt;规格的节点，默认创建的容器都可以实现和外部ecs主机的互联互通，此时，该ecs上创建的弹性网卡将作为节点上k8s容器的网络出口，而ecs主机本身的&lt;code&gt;eth0&lt;/code&gt;将仅作为管理网络而存在，感兴趣的同学可以点击&lt;code&gt;阅读原文&lt;/code&gt;尝试使用阿里云ACK的&lt;code&gt;terway&lt;/code&gt;网络模式.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.aliyun.com/product/kubernetes?aly_as=TZbDoxLq&amp;amp;source=5176.11533457&amp;amp;userCode=n0qkvlxu&amp;amp;type=copy&#34;&gt;阅读全文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>k8s删除Terminating状态的命名空间</title>
      <link>https://bgbiao.top/post/k8s-delete-namespace/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/k8s-delete-namespace/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;背景: 我们都知道在k8s中namespace有两种常见的状态，即Active和Terminating状态，其中后者一般会比较少见，只有当对应的命名空间下还存在运行的资源，但是该命名空间被删除时才会出现所谓的terminating状态，这种情况下只要等待k8s本身将命名空间下的资源回收后，该命名空间将会被系统自动删除。但是今天遇到命名空间下已没相关资源，但依然无法删除terminating状态的命名空间的情况，特此记录一下.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;查看命名空间详情&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ kubectl  get ns  | grep rdb
rdbms                  Terminating   6d21h

$ kubectl  get ns rdbms -o yaml
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {&amp;#34;apiVersion&amp;#34;:&amp;#34;v1&amp;#34;,&amp;#34;kind&amp;#34;:&amp;#34;Namespace&amp;#34;,&amp;#34;metadata&amp;#34;:{&amp;#34;annotations&amp;#34;:{},&amp;#34;name&amp;#34;:&amp;#34;rdbms&amp;#34;}}
  creationTimestamp: &amp;#34;2019-10-14T12:17:44Z&amp;#34;
  deletionTimestamp: &amp;#34;2019-10-14T12:30:27Z&amp;#34;
  name: rdbms
  resourceVersion: &amp;#34;8844754&amp;#34;
  selfLink: /api/v1/namespaces/rdbms
  uid: 29067ddf-56d7-4cce-afa3-1fbdbb221ab1
spec:
  finalizers:
  - kubernetes
status:
  phase: Terminating&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;查看该命名空间下的资源&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 查看k8s集群中可以使用命名空间隔离的资源
$ kubectl api-resources -o name --verbs=list --namespaced | xargs -n 1 kubectl get --show-kind --ignore-not-found -n rdbms

# 发现rdbms命名空间下并无资源占用&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;尝试对命名空间进行删除&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 直接删除命名空间rdbms
## 提示删除操作未能完成，说系统会在确定没用没用资源后将会被自动删除
$ kubectl  delete ns rdbms
Error from server (Conflict): Operation cannot be fulfilled on namespaces &amp;#34;rdbms&amp;#34;: The system is ensuring all content is removed from this namespace.  Upon completion, this namespace will automatically be purged by the system.


# 使用强制删除(依然无法删除该命名空间)
$ kubectl  delete ns rdbms --force --grace-period=0
warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.
Error from server (Conflict): Operation cannot be fulfilled on namespaces &amp;#34;rdbms&amp;#34;: The system is ensuring all content is removed from this namespace.  Upon completion, this namespace will automatically be purged by the system.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;使用原生接口删除&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 获取namespace的详情信息
$ kubectl  get ns rdbms  -o json &amp;gt; rdbms.json

# 查看napespace定义的json配置
## 删除掉spec部分即可
$ cat rdbms.json
{
    &amp;#34;apiVersion&amp;#34;: &amp;#34;v1&amp;#34;,
    &amp;#34;kind&amp;#34;: &amp;#34;Namespace&amp;#34;,
    &amp;#34;metadata&amp;#34;: {
        &amp;#34;annotations&amp;#34;: {
            &amp;#34;kubectl.kubernetes.io/last-applied-configuration&amp;#34;: &amp;#34;{\&amp;#34;apiVersion\&amp;#34;:\&amp;#34;v1\&amp;#34;,\&amp;#34;kind\&amp;#34;:\&amp;#34;Namespace\&amp;#34;,\&amp;#34;metadata\&amp;#34;:{\&amp;#34;annotations\&amp;#34;:{},\&amp;#34;name\&amp;#34;:\&amp;#34;rdbms\&amp;#34;}}\n&amp;#34;
        },
        &amp;#34;creationTimestamp&amp;#34;: &amp;#34;2019-10-14T12:17:44Z&amp;#34;,
        &amp;#34;deletionTimestamp&amp;#34;: &amp;#34;2019-10-14T12:30:27Z&amp;#34;,
        &amp;#34;name&amp;#34;: &amp;#34;rdbms&amp;#34;,
        &amp;#34;resourceVersion&amp;#34;: &amp;#34;8844754&amp;#34;,
        &amp;#34;selfLink&amp;#34;: &amp;#34;/api/v1/namespaces/rdbms&amp;#34;,
        &amp;#34;uid&amp;#34;: &amp;#34;29067ddf-56d7-4cce-afa3-1fbdbb221ab1&amp;#34;
    },
    &amp;#34;spec&amp;#34;: {
        &amp;#34;finalizers&amp;#34;: [
            &amp;#34;kubernetes&amp;#34;
        ]
    },
    &amp;#34;status&amp;#34;: {
        &amp;#34;phase&amp;#34;: &amp;#34;Terminating&amp;#34;
    }
}

# 使用http接口进行删除
$ curl -k -H &amp;#34;Content-Type:application/json&amp;#34; -X PUT --data-binary @rdbms.json https://x.x.x.x:6443/api/v1/namespaces/rdbms/finalize
{
  &amp;#34;kind&amp;#34;: &amp;#34;Namespace&amp;#34;,
  &amp;#34;apiVersion&amp;#34;: &amp;#34;v1&amp;#34;,
  &amp;#34;metadata&amp;#34;: {
    &amp;#34;name&amp;#34;: &amp;#34;rdbms&amp;#34;,
    &amp;#34;selfLink&amp;#34;: &amp;#34;/api/v1/namespaces/rdbms/finalize&amp;#34;,
    &amp;#34;uid&amp;#34;: &amp;#34;29067ddf-56d7-4cce-afa3-1fbdbb221ab1&amp;#34;,
    &amp;#34;resourceVersion&amp;#34;: &amp;#34;8844754&amp;#34;,
    &amp;#34;creationTimestamp&amp;#34;: &amp;#34;2019-10-14T12:17:44Z&amp;#34;,
    &amp;#34;deletionTimestamp&amp;#34;: &amp;#34;2019-10-14T12:30:27Z&amp;#34;,
    &amp;#34;annotations&amp;#34;: {
      &amp;#34;kubectl.kubernetes.io/last-applied-configuration&amp;#34;: &amp;#34;{\&amp;#34;apiVersion\&amp;#34;:\&amp;#34;v1\&amp;#34;,\&amp;#34;kind\&amp;#34;:\&amp;#34;Namespace\&amp;#34;,\&amp;#34;metadata\&amp;#34;:{\&amp;#34;annotations\&amp;#34;:{},\&amp;#34;name\&amp;#34;:\&amp;#34;rdbms\&amp;#34;}}\n&amp;#34;
    }
  },
  &amp;#34;spec&amp;#34;: {

  },
  &amp;#34;status&amp;#34;: {
    &amp;#34;phase&amp;#34;: &amp;#34;Terminating&amp;#34;
  }

# 再次查看namespace发现已经被删除了
$ kubectl  get ns  | grep rdb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang中的单元测试、基准测试、覆盖测试</title>
      <link>https://bgbiao.top/post/golang-unit-test/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/golang-unit-test/</guid>
      
        <description>&lt;h2 id=&#34;单元测试-基准测试-覆盖测试&#34;&gt;单元测试、基准测试、覆盖测试&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;背景: 之前很长一段时间再写Golang程序时，不会有意识去写单元测试，直到后来写了独立项目后，慢慢才发现给一个功能编写对应的单元测试是多么高效和方便，接下来就再一起复习下Golang中的测试.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;UnitTest(单元测试)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;单元测试是程序开发者适用一段代码来验证另外一段代码写的是否符合预期的一种相对高效的自我测试方法。&lt;/p&gt;

&lt;p&gt;还记得最早开始搞运维时，写的程序基本上是通过&lt;code&gt;main&lt;/code&gt;程序去调用具体的功能函数，然后通过具体的输出来主观验证结果是否符合预期，这种方式对于搞正统的软件开发者而言会感觉很傻，但这对于运维领域来说却很实用，很有效，因为通常运维工作中需要的一些开发都不会是逻辑较为复杂的程序，所以没有必要专门去写测试程序去测试另外一个程序是否符合预期。&lt;/p&gt;

&lt;p&gt;但是随着工作内容和运维需求的变化，不得不使用一些正规软件工程领域的相关方法来进行测试，因为对于程序开发来说，经过长期的积累和方法总结，单元测试是一种比较好的开发程序验证方式，而且能够提高程序开发的质量。而在&lt;code&gt;Golang&lt;/code&gt;语言中内置了一系列的测试框架，加下来就主要讲讲&lt;code&gt;UnitTest&lt;/code&gt;单元测试的相关知识点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UnitTest的编写&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;在Golang中，对于单元测试程序来说通常会有一些重要约束，主要如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;单元测试文件名必须为&lt;code&gt;xxx_test.go&lt;/code&gt;(其中xxx为业务逻辑程序)&lt;/li&gt;
&lt;li&gt;单元测试的函数名必须为&lt;code&gt;Testxxx&lt;/code&gt;(xxx可用来识别业务逻辑函数)&lt;/li&gt;
&lt;li&gt;单元测试函数参数必须为&lt;code&gt;t *testing.T&lt;/code&gt;(测试框架强要求)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;测试程序和被测试程序文件在一个包&lt;code&gt;package&lt;/code&gt;中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;示例文件&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;假设我们为某段业务逻辑专门写了一个package&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;用来初始化一个矩形&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;并计算体积&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;此时看到到整体结构如下&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;L&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unittest&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unittest&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;area_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;业务逻辑代码&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;业务逻辑需要和单元测试在一个package下&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unittest&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 初始化一个结构体指针对象，后面使用结构体指针方法来设置和获取对象属性
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Newbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 给结构体对象设置具体的属性(名称，规格大小)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 注意: 在如下几个方法中，方法接受者为指针类型，而方法参数为值类型，因此在赋值时可能有人产生疑惑，这里其实是Golang底层做了优化(v.name = name 等同于(*v).name = name)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SetSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 获取对象的一些属性(名称和体积)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetVolume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;对应业务逻辑的单元测试逻辑&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;area_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unittest&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 必须导入testing模块，并且方法的接受者为(t *testing.T)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 测试1: 测试名称是否符合预期
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TestSetSomething&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Newbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bgbiao&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bgbiao&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;the rectangular name&amp;#39;s result is ok&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 测试2: 测试计算出来的体积是否符合预期
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TestGetSomething&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Newbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetVolume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;the rectangular volume&amp;#39;s result is ok&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;运行单元测试程序&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;可以看到我们编写的两个单元测试都经过预期测试&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unittest&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rectangular&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rectangular&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;volume&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;PASS&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt;  	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BGBiao&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unittest&lt;/span&gt;	&lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;单元测试的运行&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过上面那个测试示例，我们都知道了可以使用&lt;code&gt;go test&lt;/code&gt;来对Golang代码进行测试，接下来具体讲解一些&lt;code&gt;go test&lt;/code&gt;的其他用法(其实上面说的那些规则也可以在&lt;code&gt;go help test&lt;/code&gt;帮助文档中找到)&lt;/p&gt;

&lt;p&gt;这里主要总结下几个常用的参数:
- -args: 指定一些测试时的参数(可以指定超时时间,cpu绑定,压测等等(go test包含单元测试，压力测试等))
- - -test.v: 是否输出全部的单元测试用例（不管成功或者失败），默认没有加上，所以只输出失败的单元测试用例
- - -test.run pattern: 只跑哪些单元测试用例
- - -test.bench patten: 只跑那些性能测试用例
- - -test.benchmem : 是否在性能测试的时候输出内存情况
- - -test.benchtime t : 性能测试运行的时间，默认是1s
- - -test.cpuprofile cpu.out : 是否输出cpu性能分析文件
- - -test.memprofile mem.out : 是否输出内存性能分析文件
- - -test.blockprofile block.out : 是否输出内部goroutine阻塞的性能分析文件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-c: 编译测试文件到pkg.test,但是不会运行测试程序&lt;/li&gt;
&lt;li&gt;-exec xprog: 使用xprog参数来运行编译的测试文件(参数类似go run后的参数)&lt;/li&gt;
&lt;li&gt;-i: 安装测试程序中的依赖包，但是不运行测试程序&lt;/li&gt;
&lt;li&gt;-json: 以json格式输出测试结果&lt;/li&gt;
&lt;li&gt;-o file: 指定测试程序编译后生成的文件名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;单元测试中常用的命令参数:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 对当前目录下的全部单元测试程序进行运行测试(也就是所有的xxx_test.go文件中的所有function都会运行)
$ go test
the rectangular name&amp;#39;s result is ok
the rectangular volume&amp;#39;s result is ok
PASS
ok  	_/Users/BGBiao/unittest	0.005s

# 查看详细的单元测试结果
# (go test -v 等同于go test -args -test.v)
$ go test -v
=== RUN   TestSetSomething
the rectangular name&amp;#39;s result is ok
--- PASS: TestSetSomething (0.00s)
=== RUN   TestGetSomething
the rectangular volume&amp;#39;s result is ok
--- PASS: TestGetSomething (0.00s)
PASS
ok  	_/Users/BGBiao/unittest	0.005s

# 指定单元测试function来进行测试(-run参数可以指定正则匹配模式-run=&amp;#34;test1|test2&amp;#34;)
# go test -v -run functionname 
$ go test -v -test.run TestGetSomething
=== RUN   TestGetSomething
the rectangular volume&amp;#39;s result is ok
--- PASS: TestGetSomething (0.00s)
PASS
ok  	_/Users/BGBiao/unittest	0.005s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;单元测试注意事项&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 在单元测试时，一个比较重要的事情就是如何构造测试数据，因为通常我们能够想到的测试数据都是在预期之中的，有些核心逻辑的测试数据往往不能考虑到，因此构造测试数据时可考虑如下几个方面:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. 正常输入: 正常的可预测的测试用例&lt;/li&gt;
&lt;li&gt;2. 边界输入: 极端情况下的输入来测试容错性&lt;/li&gt;
&lt;li&gt;3. 非法输入: 输入异常数据类型，整个逻辑是否能够正常处理或者捕获&lt;/li&gt;
&lt;li&gt;4. 白盒覆盖: 需要设计的测试用例能够覆盖所有代码(语句覆盖、条件覆盖、分支覆盖、分支/条件覆盖、条件组合覆盖)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 在写项目时，对于基础的工具层&lt;code&gt;util&lt;/code&gt;的逻辑代码，一定要进行全方位，多场景的进行测试，否则当项目大起来后到处引用可能会造成较大麻烦;其次，我们的代码逻辑通常是更新迭代的，单元测试代码也应该进行定期更新.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;华丽的分割线&#34;&gt;华丽的分割线&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Golang的测试断言工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;在&lt;code&gt;testing&lt;/code&gt;包中包含了一些常用的断言工具&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;func TestPrint(t *testing.T) {
    // 输出测试日志
    t.Logf()
    // 标记错误，但仍然执行后面的语句
    t.Fail()
    // 获取是否当前用例是执行错误的
    t.Failed()
    // 错误输出，等于 t.Logf 再执行 t.Fail()
    t.Errorf(&amp;#34;%s&amp;#34;, &amp;#34;run ErrorF&amp;#34;)
    // 标记函数错误，并中断后面的执行
    t.FailNow()
    // 致命错误输出，等同于调用了 t.Logf 然后调用 t.FailNow()
    t.Fatalf(&amp;#34;%s&amp;#34;, &amp;#34;run Fatelf&amp;#34;)
    // 测试用例的名字
    t.Name()
    //运行子测试用例
    t.Run()
    // 跳过后面的内容，后面将不再运行
    t.SkipNow()
    // 告知当前的测试是否已被忽略
    t.Skipped()
    // 并行测试
    t.Parallel()
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试覆盖率统计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;Golang内置工具包中也提供了测试覆盖率相关的工具，&lt;code&gt;go test&lt;/code&gt;常用参数如下:
- &lt;code&gt;-cover&lt;/code&gt;: 是否开启覆盖测试率统计的开关.(当有&lt;code&gt;-covermode&lt;/code&gt;、&lt;code&gt;-coverpkg&lt;/code&gt;、&lt;code&gt;-coverprofile&lt;/code&gt;参数时会自动打开)
- &lt;code&gt;-covermode&lt;/code&gt;: 设置覆盖测试率模式(可选值:set,count,atomic). set(默认)仅统计语法块是否覆盖;count 会统计语法块覆盖了多少次;atomic 用于多线程测试中统计语法块覆盖了多少次
- &lt;code&gt;-coverpkg&lt;/code&gt;: 指定覆盖率统计package的范围(默认只统计有执行了测试的packages)
- &lt;code&gt;-timeout&lt;/code&gt;: 指定单个测试用例的超时时间，默认10分钟
- &lt;code&gt;-coverprofile&lt;/code&gt;: 指定覆盖率profile文件的输出地址&lt;/p&gt;

&lt;p&gt;&lt;code&gt;第三方的测试覆盖统计&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://goconvey.co/&#34;&gt;goconvey&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/smartystreets/goconvey&#34;&gt;goconvey&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://codecov.io/&#34;&gt;codecov&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 使用golang内置的工具来执行覆盖测试，执行之后生成.test的执行文件，执行后会执行所有单元测试代码，然后输出覆盖率的报告
$ go test -c -covermode=count -coverpkg ./
➜  unittest git:(master) ✗ ls
area.go       area_test.go  unittest.test
➜  unittest git:(master) ✗ ./unittest.test
the rectangular name&amp;#39;s result is ok
the rectangular volume&amp;#39;s result is ok
PASS
coverage: 100.0% of statements in ./&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;统计单元测试的覆盖率，也就是白盒测试的覆盖率.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;覆盖率测试报告&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 将测试覆盖率结果写入一个数据文件
$ go test -coverpkg=./ -coverprofile=coverage.data -timeout=5s

# 将覆盖率报告数据文件转化成对应的人类可识别模式(go tool cover可查看覆盖率相关的工具)
$  go tool cover -func=coverage.data -o coverage.txt
➜  unittest git:(master) ✗ cat coverage.txt
/Users/BGBiao/unittest/area.go:19:	Newbox		100.0%
/Users/BGBiao/unittest/area.go:23:	SetName		100.0%
/Users/BGBiao/unittest/area.go:27:	SetSize		100.0%
/Users/BGBiao/unittest/area.go:33:	GetName		100.0%
/Users/BGBiao/unittest/area.go:37:	GetVolume	100.0%
total:										(statements)	100.0%

# 转化成html格式(会在本地生成html文件)
$ go tool cover -html=coverage.data -o coverage.html

# 直接以html形式展示覆盖测试率报告
$ go tool cover -html=coverage.data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006y8mN6ly1g8tw12ghvej317l0u0jvu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基准测试&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基准测试是测量一个程序在固定工作负载下的性能。在Golang中，基准测试函数和普通的单元测试函数写法类似，同样需要遵循以下规则:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.函数以&lt;code&gt;Benchmark&lt;/code&gt;开头&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2.函数参数为&lt;code&gt;b *testing.B&lt;/code&gt; (区别于单元测试的&lt;code&gt;t *testing.T&lt;/code&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;: &lt;code&gt;*testing.B&lt;/code&gt;参数提供了一些额外的性能测量相关的方法，同时还提供了一个随机整数&lt;code&gt;N&lt;/code&gt;，用于限定执行的循环次数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 编写benchmark函数
func Benchmark_GetSomething(b *testing.B) {
    box := Newbox()
    volume := 0
    for i := 0; i &amp;lt; b.N; i++ {
        box.SetSize(10,1111,2222)
        volume = box.GetVolume()
    }
    b.Log(volume)
}

# 运行测试(运行所有的基准测试，-bench可以指定函数名，-benchmem可以指定分配内存的次数和字节数)
# 和单元测试不同的是，我们需要使用-bench来手工指定需运行的基准测试函数(.表示全部的基准测试函数)
# 如下输出结果表示:GOMAXPROCS为4核心,每次调用GetSomething函数平均花费0.35ns(调用了2000000000次)
$ go test -v -run=&amp;#34;none&amp;#34; -bench=Benchmark_GetSomething -benchmem
goos: darwin
goarch: amd64
Benchmark_GetSomething-4   	2000000000	         0.35 ns/op	       0 B/op	       0 allocs/op
--- BENCH: Benchmark_GetSomething-4
    area_test.go:40: 24686420
    area_test.go:40: 24686420
    area_test.go:40: 24686420
    area_test.go:40: 24686420
    area_test.go:40: 24686420
    area_test.go:40: 24686420
PASS
ok  	_/Users/BGBiao/unittest	0.749s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;性能分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 当我们的程序在运行过程中可能会消耗非常多的资源(通常是程序性价比较低时，比如处理一个很小的数据，却占用了几个G的内存，并且CPU长期处于高负荷状态)，此时我们就需要通过一些技术手段来分析程序性能损耗点，以此来提高程序的性价比。&lt;/p&gt;

&lt;p&gt;Go语言支持多种类型的剖析性能分析，每一种关注不同的方面，但它们都涉及到每个采样记录的感兴趣的一系列事件消息，每个事件都包含函数调用时函数调用堆栈的信息。基本上常用的为&lt;code&gt;MEM分析&lt;/code&gt;、&lt;code&gt;CPU分析&lt;/code&gt;以及&lt;code&gt;block分析&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MEM分析: 主要是堆分析，可以标识出最耗内存的逻辑，内置库会会记录调用内部内存分配的操作，平均每512KB的内存申请会触发一个剖析数据.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;CPU分析: 可以标识最耗CPU时间的函数,每个CPU上运行的线程在每隔几毫秒都会遇到操作系统的中断事件，每次中断时都会记录一个剖析数据然后恢复正常的运行.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Block分析: 记录阻塞goroutine最久的操作，例如系统调用、管道发送和接收，还有获取锁; 当goroutine被这些操作阻塞时，剖析库都会记录相应的事件.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 剖析对于长期运行的程序尤其有用，因此可以通过调用Go的&lt;code&gt;runtime API&lt;/code&gt;来启用运行时剖析。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 通过不同的参数来获取指定性能分析数据
$ go test -cpuprofile=cpu.out
$ go test -blockprofile=block.out
$ go test -memprofile=mem.out&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;一旦我们通过上述内置工具获取到相关的分析数据，我们就可以使用&lt;code&gt;pprof&lt;/code&gt;来分析数据，使用&lt;code&gt;go help pprof&lt;/code&gt;可以查看更多帮助信息，最常用的即: 生成这个概要文件的可执行程序和对应的剖析数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 获取CPU基准测试数据
$ go test  -run=&amp;#34;none&amp;#34; -bench=Benchmark_GetSomething -cpuprofile=cpu.log
goos: darwin
goarch: amd64
Benchmark_GetSomething-4   	2000000000	         0.36 ns/op
--- BENCH: Benchmark_GetSomething-4
    area_test.go:40: 24686420
    area_test.go:40: 24686420
    area_test.go:40: 24686420
    area_test.go:40: 24686420
    area_test.go:40: 24686420
    area_test.go:40: 24686420
PASS
ok  	_/Users/BGBiao/unittest	0.944s
➜  unittest git:(master) ✗ ls
area.go       area_test.go  cpu.log       unittest.test

# 之后会生成测试程序和cpu分析数据(unittest.test和cpu.log) 
# 使用pprof工具分析相关数据(-text用于指定输出格式;-nodecount=10限制只输出前10行结果)
$ go tool pprof -text -nodecount=10 ./unittest.test cpu.log
File: unittest.test
Type: cpu
Time: Nov 11, 2019 at 12:12pm (CST)
Duration: 938ms, Total samples = 680ms (72.49%)
Showing nodes accounting for 680ms, 100% of 680ms total
      flat  flat%   sum%        cum   cum%
     510ms 75.00% 75.00%      680ms   100%  _/Users/BGBiao/unittest.Benchmark_GetSomething
     170ms 25.00%   100%      170ms 25.00%  _/Users/BGBiao/unittest.(*box).GetVolume
         0     0%   100%      680ms   100%  testing.(*B).launch
         0     0%   100%      680ms   100%  testing.(*B).runN

# web可视化分析(会弹出web页面,可查看程序每个逻辑的cpu使用)
$ go tool pprof -http=:8080 -nodecount=10 ./unittest.test cpu.log

# 对应的，我们也可以使用-memprofile参数来获取内存分析数据，来查看处理逻辑对内存的消耗状况&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006y8mN6ly1g8tz9u4xz2j30u00xxdjd.jpg&#34; alt=&#34;cpu性能分析&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006y8mN6ly1g8u1yeltk4j305p0ptgmk.jpg&#34; alt=&#34;mem分配&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例程序&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://johng.cn/go-test-profile-and-cover/&#34;&gt;Go性能测试、单元测试以及代码覆盖率&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kubernetes-1.15管理NVIDIA GPU容器</title>
      <link>https://bgbiao.top/post/k8s-nvidia-gpu/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/k8s-nvidia-gpu/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;使用kubernetes来调度和管理nvidia gpu资源。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;参考链接:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/k8s-device-plugin/&#34;&gt;nvidia-k8s-device-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://v1-15.docs.kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/&#34;&gt;k8s-1.15调度GPU文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/nvidia-docker&#34;&gt;nvidia-docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;0. GPU主机依赖&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.下载&lt;code&gt;nvidia-driver&lt;/code&gt;(官方提示要约等于361.93)&lt;/li&gt;
&lt;li&gt;2.安装&lt;code&gt;nvidia-docker2.x&lt;/code&gt;(nvidia-docker1.x和2.x完全不同)&lt;/li&gt;
&lt;li&gt;3.&lt;code&gt;docker&lt;/code&gt;配置成&lt;code&gt;nvidia&lt;/code&gt;的默认运行时&lt;/li&gt;
&lt;li&gt;4.&lt;code&gt;kubernetes&lt;/code&gt;版本大于1.10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1. systemd服务配置文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;在企业级生产环境里通常都会使用&lt;code&gt;Centos&lt;/code&gt;来运行服务，但由于&lt;code&gt;GPU&lt;/code&gt;环境下需要安装GPU驱动、cuda、cudnn之类的依赖库，导致操作不方便，因此可能会使用&lt;code&gt;Ubuntu&lt;/code&gt;来运行GPU相关服务，两种发型版的&lt;code&gt;systemd&lt;/code&gt;服务启动配置默认不同，因此在自动化安装时需要适配到多个发行版&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.centos服务默认目录: /usr/lib/systemd/system/docker.service&lt;/li&gt;
&lt;li&gt;2.ubuntu服务默认目录: /lib/systemd/system/docker.service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可在手动部署服务时，将服务配置文件都放置到&lt;code&gt;/etc/systemd/system/&lt;/code&gt;目录&lt;/p&gt;

&lt;p&gt;&lt;code&gt;提示:systemd加载配置文件的顺序和优先级可自行查阅&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. kubelet默认配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt;k8s官方文档依然标明需要添加&lt;code&gt;--feature-gates=&amp;quot;Accelerators=true&amp;quot;&lt;/code&gt;参数，但其实在&lt;code&gt;k8s-v1.15&lt;/code&gt;版本&lt;code&gt;Accelerators&lt;/code&gt;已经废弃，改为使用&lt;code&gt;&amp;quot;DevicePlugins=true&amp;quot;&lt;/code&gt;参数了。&lt;/p&gt;

&lt;p&gt;另外，在&lt;code&gt;k8s&lt;/code&gt;比较高版本后(至少v1.15)，&lt;code&gt;kubelet&lt;/code&gt;相关参数建议在&lt;code&gt;--config&lt;/code&gt;中进行指定，大概内容如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ cat kubelet.config
...
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
port: 10250
featureGates:
  DevicePlugins: true
clusterDomain: cluster.local.
...
...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3. docker默认配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;增加&lt;code&gt;nvidia&lt;/code&gt;的默认运行时
安装&lt;code&gt;nvidia-docker 2+&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ cat /etc/docker/daemon.json
{
    &amp;#34;default-runtime&amp;#34;: &amp;#34;nvidia&amp;#34;,
    &amp;#34;runtimes&amp;#34;: {
        &amp;#34;nvidia&amp;#34;: {
            &amp;#34;path&amp;#34;: &amp;#34;/usr/bin/nvidia-container-runtime&amp;#34;,
            &amp;#34;runtimeArgs&amp;#34;: []
        }
    }
}

# 重启docker和kubelet
$ systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart docker kubelet&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4. 给gpu节点打标签&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;kubectl label nodes 172.16.21.0 gpu=nvidia-tesla-p100&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5. 给gpu节点部署nvidia-device-plugin插件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 给gpu节点创建nvidia-device-plugin插件
$ kubectl  apply -f nvidia-device-plugin-v1.9.yaml
daemonset.extensions/nvidia-device-plugin-daemonset created

$ kubectl  get pods -n kube-system  -o wide | grep nvidia-device
nvidia-device-plugin-daemonset-p9kff   1/1     Running   0          2s     20.0.52.3       172.16.21.0     &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;

# 查看device-plugin日志详情
$ kubectl  logs nvidia-device-plugin-daemonset-p9kff -n kube-system
2019/09/30 08:05:44 Loading NVML
2019/09/30 08:05:44 Fetching devices.
2019/09/30 08:05:44 Starting FS watcher.
2019/09/30 08:05:44 Starting OS watcher.
2019/09/30 08:05:44 Starting to serve on /var/lib/kubelet/device-plugins/nvidia.sock
2019/09/30 08:05:44 Registered device plugin with Kubelet

# 也可以在docker上测试该驱动
$ docker run --security-opt=no-new-privileges --cap-drop=ALL --network=none -it -v /var/lib/kubelet/device-plugins:/var/lib/kubelet/device-plugins nvidia/k8s-device-plugin:1.11&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;6. 在k8s集群中调度gpu业务容器&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ kubectl apply -f gpu-deploy-svc.yaml
...
...

# 查看gpu容器的deploy和svc(使用了service，并且使用nodePort类型)
$ kubectl  get pods,svc | grep gpu

pod/gpu-image-cluster-6565586479-x89bk   1/1     Running   0          9m1s
service/gpu-image-cluster   NodePort    10.253.172.218   &amp;lt;none&amp;gt;        8080:38080/TCP   8m21s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;7. 测试GPU容器业务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;:想要测试GPU容器，可以直接使用nvidia/cuda:8.0-runtime-ubuntu14.04镜像，容器运行后执行&lt;code&gt;nvidia-smi&lt;/code&gt;可以显示GPU卡，即为生产。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ kubectl  get nodes
NAME            STATUS   ROLES    AGE     VERSION
172.16.21.0     Ready    &amp;lt;none&amp;gt;   7h11m   v1.15.0
172.16.21.26    Ready    &amp;lt;none&amp;gt;   24d     v1.15.0
172.16.21.27    Ready    &amp;lt;none&amp;gt;   24d     v1.15.0
172.16.21.28    Ready    &amp;lt;none&amp;gt;   24d     v1.15.0

# 使用service 进行访问
$ curl -H &amp;#39;Content-Type:application/json&amp;#39; -X POST -d &amp;#39;{&amp;#34;imgUrl&amp;#34;: &amp;#34;https://img.bgbiao.cn/image/2019-08-27/f208b338-af03-4557-8d23-9cf308c38ba9-1566921008172.png&amp;#34;}&amp;#39; &amp;#34;http://10.253.172.218:8080/api/predict/class&amp;#34;
{&amp;#34;class_id&amp;#34;:958,&amp;#34;class_name&amp;#34;:&amp;#34;\u5c0f\u718a\u732b\u5927\u6bb5\u6587\u5b57\uff08\u53d7\u4e0d\u4e86\u7f51\u604b\uff09\u8868\u60c5\u5305&amp;#34;,&amp;#34;code&amp;#34;:200,&amp;#34;message&amp;#34;:&amp;#34;OK&amp;#34;}


# 由于是使用的nodePort类型的service，可以直接访问每个node节点的28080
$ curl -H &amp;#39;Content-Type:application/json&amp;#39; -X POST -d &amp;#39;{&amp;#34;imgUrl&amp;#34;: &amp;#34;https://img.bgbiao.cn/image/2019-08-27/f208b338-af03-4557-8d23-9cf308c38ba9-1566921008172.png&amp;#34;}&amp;#39; &amp;#34;http://172.16.21.0:38080/api/predict/class&amp;#34;
{&amp;#34;class_id&amp;#34;:958,&amp;#34;class_name&amp;#34;:&amp;#34;\u5c0f\u718a\u732b\u5927\u6bb5\u6587\u5b57\uff08\u53d7\u4e0d\u4e86\u7f51\u604b\uff09\u8868\u60c5\u5305&amp;#34;,&amp;#34;code&amp;#34;:200,&amp;#34;message&amp;#34;:&amp;#34;OK&amp;#34;}

$ curl -H &amp;#39;Content-Type:application/json&amp;#39; -X POST -d &amp;#39;{&amp;#34;imgUrl&amp;#34;: &amp;#34;https://img.bgbiao.cn/image/2019-08-27/f208b338-af03-4557-8d23-9cf308c38ba9-1566921008172.png&amp;#34;}&amp;#39; &amp;#34;http://172.16.21.26:38080/api/predict/class&amp;#34;
{&amp;#34;class_id&amp;#34;:958,&amp;#34;class_name&amp;#34;:&amp;#34;\u5c0f\u718a\u732b\u5927\u6bb5\u6587\u5b57\uff08\u53d7\u4e0d\u4e86\u7f51\u604b\uff09\u8868\u60c5\u5305&amp;#34;,&amp;#34;code&amp;#34;:200,&amp;#34;message&amp;#34;:&amp;#34;OK&amp;#34;}

$ curl -H &amp;#39;Content-Type:application/json&amp;#39; -X POST -d &amp;#39;{&amp;#34;imgUrl&amp;#34;: &amp;#34;https://img.bgbiao.cn/image/2019-08-27/f208b338-af03-4557-8d23-9cf308c38ba9-1566921008172.png&amp;#34;}&amp;#39; &amp;#34;http://172.16.21.27:38080/api/predict/class&amp;#34;
{&amp;#34;class_id&amp;#34;:958,&amp;#34;class_name&amp;#34;:&amp;#34;\u5c0f\u718a\u732b\u5927\u6bb5\u6587\u5b57\uff08\u53d7\u4e0d\u4e86\u7f51\u604b\uff09\u8868\u60c5\u5305&amp;#34;,&amp;#34;code&amp;#34;:200,&amp;#34;message&amp;#34;:&amp;#34;OK&amp;#34;}

$ curl -H &amp;#39;Content-Type:application/json&amp;#39; -X POST -d &amp;#39;{&amp;#34;imgUrl&amp;#34;: &amp;#34;https://img.bgbiao.cn/image/2019-08-27/f208b338-af03-4557-8d23-9cf308c38ba9-1566921008172.png&amp;#34;}&amp;#39; &amp;#34;http://172.16.21.28:38080/api/predict/class&amp;#34;
{&amp;#34;class_id&amp;#34;:958,&amp;#34;class_name&amp;#34;:&amp;#34;\u5c0f\u718a\u732b\u5927\u6bb5\u6587\u5b57\uff08\u53d7\u4e0d\u4e86\u7f51\u604b\uff09\u8868\u60c5\u5305&amp;#34;,&amp;#34;code&amp;#34;:200,&amp;#34;message&amp;#34;:&amp;#34;OK&amp;#34;}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Traefik-v2.0快速入门</title>
      <link>https://bgbiao.top/post/k8s-traefik-v2/</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bgbiao.top/post/k8s-traefik-v2/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://docs.traefik.io/&#34;&gt;traefik官方文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:Traefikv2.0之后的版本在修改了很多bug之后也增加了新的特性，比如增加了TCP的支持，并且更换了新的WEB UI界面&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;使用-docker-compose-来快速启动traefki实例&#34;&gt;使用&lt;code&gt;docker-compose&lt;/code&gt;来快速启动traefki实例.&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 查看编辑好的docker-compose配置文件
$ cat traefik-v2.0.yaml
version: &amp;#39;3&amp;#39;
services:
  reverse-proxy:
    image: traefik:2.0.1
    # Enables the web UI and tells Traefik to listen to docker
    # 启用webUI 并告诉Traefile去监听docker的容器实例
    command: --api.insecure=true --providers.docker
    ports:
      # traefik暴露的http端口
      - &amp;#34;80:80&amp;#34;
      # webUI暴露的端口(必须制定--api.insecure=true才可以访问)
      - &amp;#34;8080:8080&amp;#34;
    volumes:
      # 指定docker的sock文件来让traefik获取docker的事件，从而实现动态负载均衡
      - /var/run/docker.sock:/var/run/docker.sock


# 使用docker-compose创建集群
$ docker-compose -f traefik-v2.0.yaml up -d reverse-proxy
Creating 20190927_reverse-proxy_1 ... done

# 查看使用docker-compose启动的应用
$ docker-compose -f traefik-v2.0.yaml ps
          Name                        Command               State                     Ports
--------------------------------------------------------------------------------------------------------------
20190927_reverse-proxy_1   /entrypoint.sh --api.insec ...   Up      0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:8080-&amp;gt;8080/tcp

# 直接访问traefik对外暴露的http接口
curl -s   &amp;#34;http://localhost:8080/api/rawdata&amp;#34; | python -m json.tool
{
    &amp;#34;routers&amp;#34;: {
        &amp;#34;reverse-proxy-20190927@docker&amp;#34;: {
            &amp;#34;rule&amp;#34;: &amp;#34;Host(`reverse-proxy-20190927`)&amp;#34;,
            &amp;#34;service&amp;#34;: &amp;#34;reverse-proxy-20190927&amp;#34;,
            &amp;#34;status&amp;#34;: &amp;#34;enabled&amp;#34;,
            &amp;#34;using&amp;#34;: [
                &amp;#34;http&amp;#34;,
                &amp;#34;traefik&amp;#34;
            ]
        }
    },
    &amp;#34;services&amp;#34;: {
        &amp;#34;reverse-proxy-20190927@docker&amp;#34;: {
            &amp;#34;loadBalancer&amp;#34;: {
                &amp;#34;passHostHeader&amp;#34;: true,
                &amp;#34;servers&amp;#34;: [
                    {
                        &amp;#34;url&amp;#34;: &amp;#34;http://172.21.0.2:80&amp;#34;
                    }
                ]
            },
            &amp;#34;serverStatus&amp;#34;: {
                &amp;#34;http://172.21.0.2:80&amp;#34;: &amp;#34;UP&amp;#34;
            },
            &amp;#34;status&amp;#34;: &amp;#34;enabled&amp;#34;,
            &amp;#34;usedBy&amp;#34;: [
                &amp;#34;reverse-proxy-20190927@docker&amp;#34;
            ]
        }
    }
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;查看Traefik官方Dashboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/2577135-7be3032760e90e6a.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;traefik来检测新服务并为你创建一个路由&#34;&gt;Traefik来检测新服务并为你创建一个路由&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;82
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 创建一个新服务
$ cat test-service.yaml
version: &amp;#39;3&amp;#39;
services:
  whoami:
    image: containous/whoami
    labels:
      - &amp;#34;traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)&amp;#34;

# 创建服务
$ docker-compose  -f test-service.yaml up -d whoami
Pulling whoami (containous/whoami:)...
latest: Pulling from containous/whoami
6f3614cb05a5: Pull complete

# 查看新创建的服务
$ docker-compose  -f test-service.yaml ps
      Name          Command   State   Ports
--------------------------------------------
20190927_whoami_1   /whoami   Up      80/tcp

# 再次查看traefik中的路由信息(就会发现服务自动加载进去了)
# 其实有点儿类似kong 的路由，只是traefik会自动监听docker的事件
$ curl -s   &amp;#34;http://localhost:8080/api/rawdata&amp;#34; | python -m json.tool
{
    &amp;#34;routers&amp;#34;: {
        &amp;#34;reverse-proxy-20190927@docker&amp;#34;: {
            &amp;#34;rule&amp;#34;: &amp;#34;Host(`reverse-proxy-20190927`)&amp;#34;,
            &amp;#34;service&amp;#34;: &amp;#34;reverse-proxy-20190927&amp;#34;,
            &amp;#34;status&amp;#34;: &amp;#34;enabled&amp;#34;,
            &amp;#34;using&amp;#34;: [
                &amp;#34;http&amp;#34;,
                &amp;#34;traefik&amp;#34;
            ]
        },
        &amp;#34;whoami@docker&amp;#34;: {
            &amp;#34;rule&amp;#34;: &amp;#34;Host(`whoami.docker.localhost`)&amp;#34;,
            &amp;#34;service&amp;#34;: &amp;#34;whoami-20190927&amp;#34;,
            &amp;#34;status&amp;#34;: &amp;#34;enabled&amp;#34;,
            &amp;#34;using&amp;#34;: [
                &amp;#34;http&amp;#34;,
                &amp;#34;traefik&amp;#34;
            ]
        }
    },
    &amp;#34;services&amp;#34;: {
        &amp;#34;reverse-proxy-20190927@docker&amp;#34;: {
            &amp;#34;loadBalancer&amp;#34;: {
                &amp;#34;passHostHeader&amp;#34;: true,
                &amp;#34;servers&amp;#34;: [
                    {
                        &amp;#34;url&amp;#34;: &amp;#34;http://172.21.0.2:80&amp;#34;
                    }
                ]
            },
            &amp;#34;serverStatus&amp;#34;: {
                &amp;#34;http://172.21.0.2:80&amp;#34;: &amp;#34;UP&amp;#34;
            },
            &amp;#34;status&amp;#34;: &amp;#34;enabled&amp;#34;,
            &amp;#34;usedBy&amp;#34;: [
                &amp;#34;reverse-proxy-20190927@docker&amp;#34;
            ]
        },
        &amp;#34;whoami-20190927@docker&amp;#34;: {
            &amp;#34;loadBalancer&amp;#34;: {
                &amp;#34;passHostHeader&amp;#34;: true,
                &amp;#34;servers&amp;#34;: [
                    {
                        &amp;#34;url&amp;#34;: &amp;#34;http://172.21.0.3:80&amp;#34;
                    }
                ]
            },
            &amp;#34;serverStatus&amp;#34;: {
                &amp;#34;http://172.21.0.3:80&amp;#34;: &amp;#34;UP&amp;#34;
            },
            &amp;#34;status&amp;#34;: &amp;#34;enabled&amp;#34;,
            &amp;#34;usedBy&amp;#34;: [
                &amp;#34;whoami@docker&amp;#34;
            ]
        }
    }
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;查看Traefik中的http反向代理记录:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/2577135-4742e0c7c39822ae.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;测试traefik相关功能&#34;&gt;测试traefik相关功能&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# 测试访问
$ curl -H Host:whoami.docker.localhost http://localhost
Hostname: f1b280a61fa7
IP: 127.0.0.1
IP: 172.21.0.3
RemoteAddr: 172.21.0.2:44604
GET / HTTP/1.1
Host: whoami.docker.localhost
User-Agent: curl/7.54.0
Accept: */*
Accept-Encoding: gzip
X-Forwarded-For: 172.21.0.1
X-Forwarded-Host: whoami.docker.localhost
X-Forwarded-Port: 80
X-Forwarded-Proto: http
X-Forwarded-Server: bf98c245d265
X-Real-Ip: 172.21.0.1

# 单机扩容
$ docker-compose -f test-service.yaml up -d --scale whoami=2

# 再次访问(就会发现自动负载到两个不同的实例上去了)
$ curl -H Host:whoami.docker.localhost http://localhost
Hostname: 3045eb2f3a89
IP: 127.0.0.1
IP: 172.21.0.4
RemoteAddr: 172.21.0.2:55182
GET / HTTP/1.1
Host: whoami.docker.localhost
User-Agent: curl/7.54.0
Accept: */*
Accept-Encoding: gzip
X-Forwarded-For: 172.21.0.1
X-Forwarded-Host: whoami.docker.localhost
X-Forwarded-Port: 80
X-Forwarded-Proto: http
X-Forwarded-Server: bf98c245d265
X-Real-Ip: 172.21.0.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;查看Traefike后端每个service的详情信息:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/2577135-2c2bf1835e797e63.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;traefik配置介绍&#34;&gt;Traefik配置介绍&lt;/h4&gt;

&lt;p&gt;traefik配置结构图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/2577135-5d5922c185e0515a.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在traefik中的配置，会涉及到两方面内容:
- 动态的路由配置(即由k8s-api或docker相关api来自动发现服务的endpoint而进行路由的配置描述)
- 静态的启动配置(即traefik标准的启动配置参数)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:使用docker run traefik[:version] --help可查看traefik的配置参数&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;在k8s集群中部署traefik-v2-0-1&#34;&gt;在k8s集群中部署traefik-v2.0.1&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ kubectl apply -f https://github.com/BGBiao/k8s-ansible-playbooks/blob/master/manifest/traefik/traefik-ds-v2.0.1.yaml

$ kubectl get pods  -n kube-system   | grep traefik-ingress-controller-v2
traefik-ingress-controller-v2-54h54   1/1     Running   0          29m
traefik-ingress-controller-v2-lh2jg   1/1     Running   0          29m
traefik-ingress-controller-v2-tqbvd   1/1     Running   0          29m
traefik-ingress-controller-v2-ww449   1/1     Running   0          29m

$ kubectl --kubeconfig ../../files/kubelet.kubeconfig get svc -n kube-system  | grep v2
traefik-ingress-service-v2   ClusterIP   10.253.86.121   &amp;lt;none&amp;gt;        81/TCP,8081/TCP          30m&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;查看traefik-v2.0.1的dashboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/2577135-cb6dfb4835fb3aff.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:虽然traefikv2.x改动了很多，但是还是向下兼容一些内容的，比如我重新创建traefik-v2.0.1之后，之前创建的ingress规则会自动导入&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gai9amj2lcj30vu0b275p.jpg&#34; alt=&#34;知识星球&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gaexte72s7j31bi0hc418.jpg&#34; alt=&#34;公众号&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
